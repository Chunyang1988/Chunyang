<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chunyang1988</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chunyang1988.github.io/"/>
  <updated>2018-04-25T07:45:31.172Z</updated>
  <id>https://chunyang1988.github.io/</id>
  
  <author>
    <name>Chunyang1988</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java反射机制</title>
    <link href="https://chunyang1988.github.io/2018/01/25/Reflection/"/>
    <id>https://chunyang1988.github.io/2018/01/25/Reflection/</id>
    <published>2018-01-25T07:41:31.000Z</published>
    <updated>2018-04-25T07:45:31.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>反射</li><li>动态化</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>了解 Java 反射主要类</li><li>了解 Java 反射常用功能</li><li>了解 Java 反射功能与场景</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Java 反射是Java语言的一个很重要的特征，它使得Java具体了“动态性”。</p><p>Java 反射机制主要提供了以下功能：</p><ul><li>在运行时判断任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时判断任意一个类所具有的成员变量和方法。</li><li>在运行时调用任意一个对象的方法。</li></ul><h3 id="Java-反射主要类"><a href="#Java-反射主要类" class="headerlink" title="Java 反射主要类"></a>Java 反射主要类</h3><p>主要由一下类来实现 Java 反射机制：</p><ul><li>Class类：代表一个类。</li><li>Field 类：代表类的成员变量（成员变量也称为类的属性）。</li><li>Method类：代表类的方法。</li><li>Constructor 类：代表类的构造方法。</li><li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法。</li></ul><h3 id="特殊方法讲解"><a href="#特殊方法讲解" class="headerlink" title="特殊方法讲解"></a>特殊方法讲解</h3><h4 id="getField-与-getDeclaredField"><a href="#getField-与-getDeclaredField" class="headerlink" title="getField 与 getDeclaredField"></a>getField 与 getDeclaredField</h4><p>Field代表类的成员变量</p><p><strong>getField</strong><br>获取类中<code>public</code>的成员变量，包含基类（父类）的成员变量。<br><strong>getDeclaredField</strong><br>获取类中所有成员变量，但不包含基类（父类）的成员变量。</p><h4 id="getMethods-与-getDeclaredMethods"><a href="#getMethods-与-getDeclaredMethods" class="headerlink" title="getMethods 与 getDeclaredMethods"></a>getMethods 与 getDeclaredMethods</h4><p>Method代表类的方法<br><strong>getMethods</strong><br>获取类中<code>public</code>的方法，包含基类（父类）的方法。<br><strong>getDeclaredMethods</strong><br>获取类中所有方法，但不包含基类（父类）的方法。</p><h4 id="setAccessible"><a href="#setAccessible" class="headerlink" title="setAccessible"></a>setAccessible</h4><p>在获取为<code>private</code>修饰的的时候，需要使用此方法，才能获取到。</p><h4 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h4><p>上文中用到的 <code>private</code>、<code>public</code> 都是必要条件，例如 <code>setAccessible</code> 中的 <code>private</code>中，只有 <code>private</code> 的方法或者属性才用添加，非 <code>private</code> 则无需添加。</p><h2 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h2><p>由于内存存储情况，在获取类属性或者方法的时候，都是需要分情况考虑因此都会有<strong>非静态类</strong>与<strong>静态类</strong>区分。<br>下面的实例会用到几个类具体情况在文章最后会给出</p><h3 id="获取类属性"><a href="#获取类属性" class="headerlink" title="获取类属性"></a>获取类属性</h3><p>在非静态类中，想要获取某个属性，需要知道在哪个对象中，而静态类中则只需要知道那个 Class 即可。</p><h4 id="非静态类"><a href="#非静态类" class="headerlink" title="非静态类"></a>非静态类</h4><p>例如下文中的 sample 对象，通过反射就能知道 private 修饰的 tag 值是多少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Sample sample = new Sample();</div><div class="line">Class ownerClass = sample.getClass();</div><div class="line">Field field = ownerClass.getDeclaredField(&quot;TAG&quot;);</div><div class="line">field.setAccessible(true);</div><div class="line">Object property = field.get(ownerClass);</div></pre></td></tr></table></figure><p>上面例子可以提取出来这样的一个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static &lt;T&gt; T getDeclaredField(Object owner, String fieldName, boolean isAccessible) throws Exception &#123;</div><div class="line">    Class ownerClass = owner.getClass();</div><div class="line">    Field field = ownerClass.getDeclaredField(fieldName);</div><div class="line">    field.setAccessible(isAccessible);</div><div class="line">    return (T) field.get(owner);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h4><p>在静态类中，由于内存情况，因此无需知道对象，只需要知道那个 class 即可获取到想要的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Class ownerClass = Sample.class;</div><div class="line">Field field = ownerClass.getDeclaredField(&quot;TAG&quot;);</div><div class="line">field.setAccessible(true);</div><div class="line">Object property = field.get(ownerClass);</div></pre></td></tr></table></figure><p>上面例子可以提取出来这样的一个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static &lt;T&gt; T getDeclaredField(Class cls, String fieldName, boolean isAccessible) throws Exception &#123;</div><div class="line">    Field field = cls.getDeclaredField(fieldName);</div><div class="line">    field.setAccessible(isAccessible);</div><div class="line">    return (T) field.get(cls);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="执行类属性"><a href="#执行类属性" class="headerlink" title="执行类属性"></a>执行类属性</h3><p>在非静态类中，想要执行某个方法，需要知道在哪个对象中，而静态类中则只需要知道那个 Class 即可。</p><h4 id="非静态类-1"><a href="#非静态类-1" class="headerlink" title="非静态类"></a>非静态类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Sample sample = new Sample();</div><div class="line">Class ownerClass = sample.getClass();</div><div class="line">Object arg = &quot;newName&quot;;</div><div class="line">Class argCls = arg.getClass();</div><div class="line">Method method = ownerClass.getDeclaredMethod(&quot;getSample&quot;, argCls);</div><div class="line">method.setAccessible(true);</div><div class="line">Object object = method.invoke(sample, arg);</div><div class="line">System.out.println(&quot;类属性：&quot; + object);</div></pre></td></tr></table></figure><h4 id="静态类-1"><a href="#静态类-1" class="headerlink" title="静态类"></a>静态类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Class ownerClass = Sample.class;</div><div class="line">Method method = ownerClass.getDeclaredMethod(&quot;getName&quot;);</div><div class="line">method.setAccessible(true);</div><div class="line">Object property = method.invoke(ownerClass);</div><div class="line">System.out.println(property);</div></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>实例化对象需要区分<strong>带参数</strong>与<strong>无参数</strong></p><h4 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Class newClass = Sample.class;</div><div class="line">Object arg = &quot;SampleName&quot;;</div><div class="line">Class argClass = arg.getClass();</div><div class="line">Constructor cons = newClass.getConstructor(argClass);</div><div class="line">Sample sample = (Sample) cons.newInstance(arg);</div><div class="line">System.out.println(sample.name);</div></pre></td></tr></table></figure><h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class newClass = Sample.class;</div><div class="line">Sample sample = (Sample) newClass.newInstance();</div><div class="line">System.out.println(sample.name);</div></pre></td></tr></table></figure><h3 id="文中实例代码"><a href="#文中实例代码" class="headerlink" title="文中实例代码"></a>文中实例代码</h3><p>Demo类代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Demo &#123;</div><div class="line">    private int code = 1;</div><div class="line">    public String versionName = &quot;VersionName&quot;;</div><div class="line">    protected int sdkVersion = 21;</div><div class="line">    int minSdkVersion = 14;</div><div class="line"></div><div class="line">    private String getVersionName() &#123;</div><div class="line">        return versionName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getSdkVersion() &#123;</div><div class="line">        return sdkVersion;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int getMinSdkVersion() &#123;</div><div class="line">        return minSdkVersion;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Sample类代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class Sample extends Demo &#123;</div><div class="line"></div><div class="line"></div><div class="line">    public Sample() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Sample(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static final String TAG = &quot;SampleTag&quot;;</div><div class="line"></div><div class="line">    public String name = &quot;Sample.Demo&quot;;</div><div class="line">    private int age = 10;</div><div class="line"></div><div class="line">    boolean isSample = true;</div><div class="line"></div><div class="line">    private String getSample(String name) &#123;</div><div class="line">        System.out.println(&quot;getSample有参数&quot;);</div><div class="line">        return &quot;SampleName:&quot; + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private String getSample() &#123;</div><div class="line">        System.out.println(&quot;getSample无参数&quot;);</div><div class="line">        return &quot;Sample&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static String getName() &#123;</div><div class="line">        System.out.println(&quot;getName静态方法&quot;);</div><div class="line">        return &quot;Name&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;反射&lt;/li&gt;
&lt;li&gt;动态化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; cla
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Mac 终端常用命令</title>
    <link href="https://chunyang1988.github.io/2018/01/12/mac-command/"/>
    <id>https://chunyang1988.github.io/2018/01/12/mac-command/</id>
    <published>2018-01-12T08:37:17.000Z</published>
    <updated>2018-03-20T09:07:21.224Z</updated>
    
    <content type="html"><![CDATA[<p><strong>列出文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls 参数 目录名</div><div class="line"></div><div class="line"># 例如</div><div class="line">ls Documents</div></pre></td></tr></table></figure><p>参数：<br>-w 显示中文<br>-l 详细信息<br>-a 显示全部包含隐藏文件</p><p><strong>显示目录路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pwd</div><div class="line"># 结果</div><div class="line">/Users/xx/Documents</div></pre></td></tr></table></figure><p><strong>转换目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd 目录名</div><div class="line"># 例如</div><div class="line">cd Documents</div></pre></td></tr></table></figure><p><strong>创建新目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir 目录名</div><div class="line"># 例如</div><div class="line">mkdir newDir</div></pre></td></tr></table></figure><p><strong>删除目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rmdir 目录名</div><div class="line"># 例如</div><div class="line">rmdir newDir</div></pre></td></tr></table></figure><p><strong>拷贝文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cp 参数 源文件 目标文件</div><div class="line"># 例如</div><div class="line">cp Download/a.txt Documents/a.txt</div><div class="line">cp Download/a.txt Documents</div></pre></td></tr></table></figure><p><strong>删除文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm 参数 文件</div><div class="line"># 例如</div><div class="line">rm -rf Documents/a.txt</div></pre></td></tr></table></figure><p>参数<br>-f 强制删除</p><p><strong>移动文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mv 文件</div><div class="line"># 移动文件并以原名移动</div><div class="line">mv Download/a.txt Documents</div><div class="line"># 移动并以新名存储</div><div class="line">mv Download/a.txt Documents/b.txt</div></pre></td></tr></table></figure><p><strong>查看文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat 文件名</div><div class="line"># 例如</div><div class="line">cat t.txt</div></pre></td></tr></table></figure><p><strong>显示文件类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file 文件名</div><div class="line"># 例如</div><div class="line">file t.txt</div></pre></td></tr></table></figure><p><strong>查找文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find path -name &quot;xx&quot;</div><div class="line"># 例如 查找当前目录后缀为.txt 的文件</div><div class="line">find . -name &quot;*.txt&quot;</div></pre></td></tr></table></figure><p><strong>时间相关</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">date 显示系统当前日期和时间</div><div class="line">cal 显示日历</div></pre></td></tr></table></figure><p><strong>File 隐藏文件显示/隐藏</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 显示隐藏文件</div><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</div><div class="line"># 恢复隐藏文件</div><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool false </div><div class="line"># 关闭所有 Finder</div><div class="line">killall Finder</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;列出文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="Shell" scheme="https://chunyang1988.github.io/tags/Shell/"/>
    
      <category term="Mac" scheme="https://chunyang1988.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Android 动态授权那些事</title>
    <link href="https://chunyang1988.github.io/2017/12/31/Android-Permission/"/>
    <id>https://chunyang1988.github.io/2017/12/31/Android-Permission/</id>
    <published>2017-12-31T06:34:23.000Z</published>
    <updated>2018-03-20T06:36:00.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>动态授权</li><li>Android API</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>了解动态授权机制，以及各个版本注意事项。文章结尾有项目地址。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>从 Android 6.0(API 23)开始，应用要使用危险全系时候，需要动态获取权限，而不是安装时候授权。</p><p>系统权限分为两类：<strong>正常权限</strong>和<strong>危险权限</strong></p><ul><li>正常权限不会直接给用户隐私带来风险。如果在应用的AndroidManifes中注册，系统将会自动授予权限。</li><li>危险权限会授予应用访问用户机密数据的权限，如果在应用的AndroidManifes中注册，则用户必须明确批准应用才能使用此权限。</li></ul><p>运行时权限说明：</p><ul><li>如果设备运行在 Android5.1 或者更低版本，如果 AndroidManifest 列出危险权限，则用户必须安装应用时授予此权限，反之则无法安装应用。</li><li>如果设备运行在 Android6.0 或者更高版本，应用必须在 AndroidManifest 中列出权限，并且它必须在运行时请求需要的危险权限。</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="http://upload-images.jianshu.io/upload_images/2210217-ceda81027909ea98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="检测权限"><a href="#检测权限" class="headerlink" title="检测权限"></a>检测权限</h3><p>如果使用到危险权限，则每次执行需要这一权限的操作时，必须都要检查是否已有权限。检测权限需要调用<code>PermissionChecker.checkSelfPermission(@NonNull Context context,@NonNull String permission)</code>方法<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int permissionCheck = PermissionChecker.checkSelfPermission(thisActivity,</div><div class="line">        Manifest.permission.WRITE_CALENDAR);</div></pre></td></tr></table></figure><p>如果有此权限，方法返回<code>PackageManager.PERMISSION_GRANTED</code>，反之返回<code>PackageManager.PERMISSION_DENIED</code></p><h3 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h3><p>如果应用无所需的权限，则应用必须调用<code>ActivityCompat.requestPermissions(final @NonNull Activity activity,final @NonNull String[] permissions, final @IntRange(from = 0) int requestCode)</code>方法来请求适当的权限。这时候会跳出系统对话框（不可定制），询问用户是否授权，系统会将结果会调给<code>Activity.onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)</code>方法。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// Here, thisActivity is the current activity</div><div class="line">if (ContextCompat.checkSelfPermission(thisActivity,</div><div class="line">                Manifest.permission.READ_CONTACTS)</div><div class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">    // Should we show an explanation?</div><div class="line">    if (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</div><div class="line">            Manifest.permission.READ_CONTACTS)) &#123;</div><div class="line"></div><div class="line">        // Show an expanation to the user *asynchronously* -- don&apos;t block</div><div class="line">        // this thread waiting for the user&apos;s response! After the user</div><div class="line">        // sees the explanation, try again to request the permission.</div><div class="line"></div><div class="line">    &#125; else &#123;</div><div class="line"></div><div class="line">        // No explanation needed, we can request the permission.</div><div class="line"></div><div class="line">        ActivityCompat.requestPermissions(thisActivity,</div><div class="line">                new String[]&#123;Manifest.permission.READ_CONTACTS&#125;,</div><div class="line">                MY_PERMISSIONS_REQUEST_READ_CONTACTS);</div><div class="line"></div><div class="line">        // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</div><div class="line">        // app-defined int constant. The callback method gets the</div><div class="line">        // result of the request.</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注：<code>ActivityCompat.shouldShowRequestPermissionRationale()</code>一般用它来判断，如果用户在过去拒绝了权限请求，并在权限请求系统对话框中选择了 Don’t ask again 选项，此方法将返回 false。如果设备规范禁止应用具有该权限，此方法也会返回 false。因此用此方法用于解释应用为什么需要权限的情况，来提示用户权限使用。</p><h3 id="处理权限请求"><a href="#处理权限请求" class="headerlink" title="处理权限请求"></a>处理权限请求</h3><p>当应用请求权限后，系统会将结果会调给<code>onRequestPermissionsResult()</code>方法<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onRequestPermissionsResult(int requestCode,</div><div class="line">        String permissions[], int[] grantResults) &#123;</div><div class="line">    switch (requestCode) &#123;</div><div class="line">        case MY_PERMISSIONS_REQUEST_READ_CONTACTS: &#123;</div><div class="line">            // If request is cancelled, the result arrays are empty.</div><div class="line">            if (grantResults.length &gt; 0</div><div class="line">                &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">                // permission was granted, yay! Do the</div><div class="line">                // contacts-related task you need to do.</div><div class="line"></div><div class="line">            &#125; else &#123;</div><div class="line"></div><div class="line">                // permission denied, boo! Disable the</div><div class="line">                // functionality that depends on this permission.</div><div class="line">            &#125;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // other &apos;case&apos; lines to check for other</div><div class="line">        // permissions this app might request</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请求的权限结果会返回给此方法，其中<code>int[] grantResults</code>用户判断当时请求的权限<code>String permissions[]</code>结果，如果获取到权限则为<code>PackageManager.PERMISSION_GRANTED</code>其他都未未获取到权限。</p><p>详情请看<a href="https://github.com/Chunyang1988/Android-Permission" target="_blank" rel="external">Android-Permission</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;动态授权&lt;/li&gt;
&lt;li&gt;Android API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Gradle 基础说明</title>
    <link href="https://chunyang1988.github.io/2017/12/24/Android-Gradle-Basic-Instructions/"/>
    <id>https://chunyang1988.github.io/2017/12/24/Android-Gradle-Basic-Instructions/</id>
    <published>2017-12-24T07:34:01.000Z</published>
    <updated>2018-03-20T06:37:49.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-Studio-目录结构"><a href="#Android-Studio-目录结构" class="headerlink" title="Android Studio 目录结构"></a>Android Studio 目录结构</h2><p>Android Studio 目录结构说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">├── app #Android App目录</div><div class="line">│   ├── app.iml</div><div class="line">│   ├── build #构建输出目录</div><div class="line">│   ├── build.gradle #构建脚本</div><div class="line">│   ├── libs #so相关库</div><div class="line">│   ├── proguard-rules.pro #proguard混淆配置</div><div class="line">│   └── src #源代码，资源等</div><div class="line">├── build</div><div class="line">│   └── intermediates</div><div class="line">├── build.gradle #工程构建文件</div><div class="line">├── gradle</div><div class="line">│   └── wrapper</div><div class="line">├── gradle.properties #gradle的配置</div><div class="line">├── gradlew #gradle wrapper linux shell脚本</div><div class="line">├── gradlew.bat</div><div class="line">├── LibSqlite.iml</div><div class="line">├── local.properties #配置Androod SDK位置文件</div><div class="line">└── settings.gradle #工程配置</div></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><p>settings.gradle：<br>用于配置 Project 中有几个 Module</p></li><li><p>build.gradle:</p><ul><li>Projcet 目录设置为整个项目所使用的配置；</li><li>Module 目录当前项目所使用的配置；</li></ul></li></ol><h2 id="AndroidMainfest-占位符"><a href="#AndroidMainfest-占位符" class="headerlink" title="AndroidMainfest 占位符"></a>AndroidMainfest 占位符</h2><p>在项目使用时候，可能或多或少会需要在 AndroidMainfest 里面配置一些特殊数据，例如友盟的渠道，第三方的 ApkKey 等信息，如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 腾讯 APPID</div><div class="line">&lt;data android:scheme=&quot;tencent$&#123;TENCENT_KEY&#125;&quot; /&gt;</div><div class="line"></div><div class="line"># 友盟渠道</div><div class="line">&lt;meta-data android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; android:name=&quot;UMENG_CHANNEL&quot;/&gt;</div></pre></td></tr></table></figure><p>上面的 <code>${TENCENT_KEY}</code> 或 <code>${UMENG_CHANNEL_VALUE}</code> 就是占位符，我们替换的时候使用 <code>manifestPlaceholders = [UMENG_CHANNEL_VALUE: &#39;tencent&#39;]</code> 或<code>manifestPlaceholders.put(&quot;UMENG_CHANNEL_VALUE&quot;,&#39;tencent&#39;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">manifestPlaceholders = [UMENG_CHANNEL_VALUE: &apos;tencent&apos;]</div><div class="line"></div><div class="line">manifestPlaceholders.put(&quot;UMENG_CHANNEL_VALUE&quot;,&apos;tencent&apos;)</div></pre></td></tr></table></figure><p>具体放在哪里使用manifestPlaceholders可以根据实际需求例如放入<code>buildTypes</code>、<code>defaultConfig</code>、<code>productFlavors</code>等等地方</p><h2 id="自定义-BuildConfig"><a href="#自定义-BuildConfig" class="headerlink" title="自定义 BuildConfig"></a>自定义 BuildConfig</h2><p>BuildConfig.java是 Android Gradle<br>自动编译生成的一个文件，我们也可以通过buildConfigField来自定义一些属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># String 类型</div><div class="line">buildConfigField &quot;String&quot;, &quot;TENCENT_KEY&quot;, &apos;&quot;Value&quot;&apos;</div><div class="line"># boolean 类型 </div><div class="line">buildConfigField &quot;boolean&quot;, &quot;CONFIG&quot;, &quot;true&quot;</div><div class="line"># int 类型    </div><div class="line">buildConfigField &quot;int&quot;, &quot;VALUE&quot;, &quot;1&quot;</div></pre></td></tr></table></figure><p>这样BuildConfig.java就会有上面那自定义的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Fields from default config.</div><div class="line">public static final boolean CONFIG = true;</div><div class="line">public static final String TENCENT_KEY = &quot;Value&quot;;</div><div class="line">public static final int VALUE = 1;</div></pre></td></tr></table></figure><p>具体放在哪里使用，可以根据实际需求例如放入<code>buildTypes</code>、<code>defaultConfig</code>、<code>productFlavors</code>等等地方</p><h2 id="统一依赖管理"><a href="#统一依赖管理" class="headerlink" title="统一依赖管理"></a>统一依赖管理</h2><p>统一依赖的目的是方便各个 Module 中引用版本升级时候防止多个 Module 改变而只需要更改这一个文件即可。</p><p>创建一个<code>config.gradle</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line"></div><div class="line">    android = [compileSdkVersion: 26,</div><div class="line">               minSdkVersion    : 15,</div><div class="line">               targetSdkVersion : 26</div><div class="line">    ]</div><div class="line"></div><div class="line">    dependencies = [</div><div class="line">            &quot;appcompat-v7&quot;: &apos;com.android.support:appcompat-v7:26.1.0&apos;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 Project 项目 build.gradle 中引用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply from: &quot;config.gradle&quot;</div></pre></td></tr></table></figure><p>接下来只需要在使用的 build.gradle 中引用即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.android.compileSdkVersion</div><div class="line">    defaultConfig &#123;</div><div class="line"></div><div class="line">        minSdkVersion rootProject.ext.android.minSdkVersion</div><div class="line">        targetSdkVersion rootProject.ext.android.targetSdkVersion</div><div class="line"></div><div class="line">        applicationId &quot;com.xiu8.apidemo&quot;</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line"></div><div class="line">        buildConfigField &quot;String&quot;, &quot;TENCENT_KEY&quot;, &apos;&quot;Value&quot;&apos;</div><div class="line">        buildConfigField &quot;boolean&quot;, &quot;CONFIG&quot;, &quot;true&quot;</div><div class="line">        buildConfigField &quot;int&quot;, &quot;VALUE&quot;, &quot;1&quot;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</div><div class="line">    compile rootProject.ext.dependencies[&quot;appcompat-v7&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样即可解决统一依赖管理，方便你随意升级版版本，而不用那个改其他 Module </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-Studio-目录结构&quot;&gt;&lt;a href=&quot;#Android-Studio-目录结构&quot; class=&quot;headerlink&quot; title=&quot;Android Studio 目录结构&quot;&gt;&lt;/a&gt;Android Studio 目录结构&lt;/h2&gt;&lt;p&gt;An
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
      <category term="Gradle" scheme="https://chunyang1988.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 Nexus3 实例</title>
    <link href="https://chunyang1988.github.io/2017/12/15/Docker-Nexus3/"/>
    <id>https://chunyang1988.github.io/2017/12/15/Docker-Nexus3/</id>
    <published>2017-12-15T04:41:26.000Z</published>
    <updated>2018-03-07T04:54:47.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行 Nexus3 时候一般会暴露出指定端口绑定到主机；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 8081:8081 --name nexus sonatype/nexus3</div></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 浏览器中访问地址</div><div class="line">localhost:8081</div><div class="line"></div><div class="line"># curl 检测地址</div><div class="line"></div><div class="line">curl -u admin:admin123 http://localhost:8081/service/metrics/ping</div></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>默认凭证是： admin/admin123</li><li><p>持久数据推荐方法：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    $ docker volume create --name nexus-data</div><div class="line">$ docker run -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</div></pre></td></tr></table></figure></li></ul><h2 id="搭建私服"><a href="#搭建私服" class="headerlink" title="搭建私服"></a>搭建私服</h2><p>浏览器中输入<code>localhost:8081</code> 进入 Nexus 平台</p><ol><li><p>登录系统</p><p> 输入用户名与密码 admin/admin123<br> <img src="http://p57e5dawm.bkt.clouddn.com/login.png" alt=""></p></li></ol><ol><li><p>创新私有库</p><p> 按照步骤操作<br><img src="http://p57e5dawm.bkt.clouddn.com/create.png" alt=""></p><p> 第三部后选择 <code>docker(hosted)</code></p><p> 填写 name 按照下图创建</p><p> <img src="http://p57e5dawm.bkt.clouddn.com/docker-hosted.png" alt=""></p><p> 最后点击 <code>Create repository</code></p></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>如何使用可以看我之前文章 <a href="http://chunyang1988.com/2017/11/28/nexus-upload/" target="_blank" rel="external">上传库到私服</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h2&gt;&lt;p&gt;运行 Nexus3 时候一般会暴露出指定端口绑定到主机；&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://chunyang1988.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 入门介绍</title>
    <link href="https://chunyang1988.github.io/2017/12/03/Docker-Introduction/"/>
    <id>https://chunyang1988.github.io/2017/12/03/Docker-Introduction/</id>
    <published>2017-12-03T04:38:26.000Z</published>
    <updated>2018-03-07T04:40:46.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Image-镜像"><a href="#Image-镜像" class="headerlink" title="Image 镜像"></a>Image 镜像</h1><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数。</p><p>Docker 把应用程序及其依赖，打包在 image 文件里面。</p><p>Image 镜像文件是通用的，可以跨机器使用，为了方便共享，image 文件制作完成后，可以上传到仓库中。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。</p><h2 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 列出本机所有的 image 镜像文件</div><div class="line">docker image ls </div><div class="line"></div><div class="line"># 删除 image 镜像文件</div><div class="line">docker iange rm [imageName]</div><div class="line"></div><div class="line"># 获取镜像</div><div class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</div></pre></td></tr></table></figure><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker image pull library/hello-world</div></pre></td></tr></table></figure><p><code>library</code>是 image 文件所在的组，而Docker Hub 官网的默认组即<code>library</code>因此可以不写；</p><p><code>hello-world</code> 则是镜像名称；</p><h3 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h3><p>获取成功后，就可以查看这个 image 镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker image ls</div></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>那么如何删除不用的镜像呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</div></pre></td></tr></table></figure><p>其中，&lt;镜像&gt; 可以是 镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要。</p><h2 id="container-容器"><a href="#container-容器" class="headerlink" title="container 容器"></a>container 容器</h2><p>容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker container run hello-world</div></pre></td></tr></table></figure><p><code>docker container run</code> 命令会从 image 文件中生成一个正在运行的容器实例；</p><p><code>docker container run</code> 命令会自动抓取 image 镜像中的功能，如果发现本地没有指定的 image 则会自动去仓库中拉取，因此 <code>docker image pull</code> 并不是必需命令；</p><h3 id="查询容器"><a href="#查询容器" class="headerlink" title="查询容器"></a>查询容器</h3><p>image 文件生成的容器实例，本身也是一个文件，称为容器文件；</p><p>一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 列出本机正在运行的容器</div><div class="line">docker container ls</div><div class="line"></div><div class="line"># 列出本机所有容器，包括终止容器</div><div class="line">docker container ls --all</div></pre></td></tr></table></figure><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker container stop [containerId]</div></pre></td></tr></table></figure><h3 id="删除容器文件"><a href="#删除容器文件" class="headerlink" title="删除容器文件"></a>删除容器文件</h3><p>上文说了启动容器会生成一个容器文件，现在将删除这个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker container rm [containerID]</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>具体的某个镜像如何使用，其实看 Docker Hub 里面说明已经讲解很明了，例如 <a href="https://hub.docker.com/r/sonatype/nexus3/" target="_blank" rel="external">nexus3</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Image-镜像&quot;&gt;&lt;a href=&quot;#Image-镜像&quot; class=&quot;headerlink&quot; title=&quot;Image 镜像&quot;&gt;&lt;/a&gt;Image 镜像&lt;/h1&gt;&lt;p&gt;Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://chunyang1988.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>上传库到私服（Nexus）</title>
    <link href="https://chunyang1988.github.io/2017/11/28/nexus-upload/"/>
    <id>https://chunyang1988.github.io/2017/11/28/nexus-upload/</id>
    <published>2017-11-28T15:10:23.000Z</published>
    <updated>2018-03-07T10:25:01.249Z</updated>
    
    <content type="html"><![CDATA[<p>这里面主要介绍 Android Studio 通过 gradle 上传库到私有 Maven 服务器 Nexus 的配置文件如何配置。<br>简单的介绍一些基础知识，详细的可以看文章结尾处的链接。</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>Nexus</li><li>Gradle</li><li>Maven</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>记录Nexus库的基础上传方式</li><li>理解基本定义</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Maven是什么？</p><p>Maven 是一个项目管理和构建自动化工具。</p><p>什么是构建工具？</p><p>构建工具是将软件项目构建相关的过程自动化的工具。构建一个软件项目通常包含以下一个或多个过程：</p><p>生成源码（如果项目使用自动生成源码）；<br>从源码生成项目文档；<br>编译源码；<br>将编译后的代码打包成JAR文件或者ZIP文件；<br>将打包好的代码安装到服务器、仓库或者其它的地方；</p><p>Nexus又是什么？</p><p>Nexus是一个基于maven的仓库管理的社区项目。</p><p>主要的使用场景就是可以在局域网搭建一个maven私服,用来部署第三方公共构件或者作为远程仓库在该局域网的一个代理。</p><p>先说明一下本文不会过多介绍名词解析，在这里主要是记录最基本的配置，防止博主忘记。</p><h3 id="正文的正文"><a href="#正文的正文" class="headerlink" title="正文的正文"></a>正文的正文</h3><p>首先在项目的根目录的 <code>gradle.properties</code>中配置如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 用户名</div><div class="line">USERNAME=admin</div><div class="line"># 密码</div><div class="line">PASSWORD=admin123</div><div class="line"># 仓库地址</div><div class="line">NEXUS_REPOSITORY_URL=http://localhost:32770/repository/chunyang1988/</div><div class="line"># 库的描述信息</div><div class="line">DESCRIPTION=dependences lib for Android</div><div class="line"># 格式aar、jar等</div><div class="line">PACKAGING=aar</div><div class="line"># 库的包名</div><div class="line">GROUP_ID=com.cy</div><div class="line"># 库的项目名称</div><div class="line">ARTIFACT_ID=artifactId</div><div class="line"># 库的名称</div><div class="line">NAME=name</div><div class="line"># 库的版本号</div><div class="line">VERSION=1.0.0</div></pre></td></tr></table></figure><p>一般在根目录创建如下<code>nexus_upload.gradle</code>上传task</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;maven&apos;</div><div class="line"></div><div class="line">task androidJavadocs(type: Javadoc) &#123;</div><div class="line">    source = android.sourceSets.main.java.srcDirs</div><div class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</div><div class="line">&#125;</div><div class="line"></div><div class="line">task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) &#123;</div><div class="line">    classifier = &apos;javadoc&apos;</div><div class="line">    from androidJavadocs.destinationDir</div><div class="line">&#125;</div><div class="line"></div><div class="line">task androidSourcesJar(type: Jar) &#123;</div><div class="line">    classifier = &apos;sources&apos;</div><div class="line">    from android.sourceSets.main.java.srcDirs</div><div class="line">&#125;</div><div class="line"></div><div class="line">artifacts &#123;</div><div class="line">    archives androidSourcesJar</div><div class="line">    archives androidJavadocsJar</div><div class="line">&#125;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            repository(url: NEXUS_REPOSITORY_URL) &#123;</div><div class="line">                authentication(userName: USERNAME, password: PASSWORD)</div><div class="line">            &#125;</div><div class="line">            pom.project &#123;</div><div class="line">                name NAME</div><div class="line">                version VERSION</div><div class="line">                artifactId ARTIFACT_ID</div><div class="line">                groupId GROUP_ID</div><div class="line">                packaging PACKAGING</div><div class="line">                description DESCRIPTION</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也可以将<a href="/nexus_upload.gradle">nexus_upload.gradle</a>上传到服务器中方便下载使用。</p><p>接下来就是使用了如下：</p><ol><li><p>在项目 Project 的 build.gradle 中添加如下代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line">            url NEXUS_REPOSITORY_URL</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在需要上传的 Module 中 添加如下代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NAME = &apos;permision&apos;</div><div class="line">VERSION = &apos;1.0.1&apos;</div><div class="line">ARTIFACT_ID = &apos;permision&apos;</div><div class="line">apply from: &apos;../nexus_maven.gradle&apos;//或者</div><div class="line">apply from: &apos;http://xxx/nexus_maven.gradle&apos;</div></pre></td></tr></table></figure></li></ol><p>之后就是运行此task即可，可以点击 AndroidStudio 右侧的 Gradle 选中相应树双击即可，也可以运行 <code>./gradlew uploadArchivesG</code>即可。</p><p>到此基本基本记录已经完毕，更加深入的了解可以查看如下文章。</p><p><a href="http://ifeve.com/maven-1/" target="_blank" rel="external">http://ifeve.com/maven-1/</a><br><a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">https://www.sonatype.com/download-oss-sonatype</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里面主要介绍 Android Studio 通过 gradle 上传库到私有 Maven 服务器 Nexus 的配置文件如何配置。&lt;br&gt;简单的介绍一些基础知识，详细的可以看文章结尾处的链接。&lt;/p&gt;
&lt;h2 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://chunyang1988.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Fragment基础知识</title>
    <link href="https://chunyang1988.github.io/2017/11/19/Fragment-Base/"/>
    <id>https://chunyang1988.github.io/2017/11/19/Fragment-Base/</id>
    <published>2017-11-19T09:54:34.000Z</published>
    <updated>2018-01-19T09:59:37.515Z</updated>
    
    <content type="html"><![CDATA[<p>Fragment不能独立存在，它必须嵌入到activity中，而且Fragment的生命周期直接受所在的activity的影响。例如：当activity暂停时，它拥有的所有的Fragment们都暂停了，当activity销毁时，它拥有的所有Fragment们都被销毁。</p><p><img src="https://upload-images.jianshu.io/upload_images/2210217-8d748ff4a0e8a124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p><p>此文章没有任何讲解，只是纯粹的代码文档，列举几种方法，忘记的时候方便查看巩固使用的。</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在activity的layoutxml文件中声明fragment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayoutxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line"> android:layout_width=&quot;match_parent&quot;</div><div class="line"> android:layout_height=&quot;match_parent&quot;</div><div class="line"> android:baselineAligned=&quot;false&quot;&gt;</div><div class="line"></div><div class="line">   &lt;fragment</div><div class="line">     android:id=&quot;@+id/titles&quot;</div><div class="line">     android:layout_width=&quot;match_parent&quot;</div><div class="line">     android:layout_height=&quot;match_parent&quot;</div><div class="line">     android:layout_weight=&quot;4&quot;</div><div class="line">     class=&quot;cn.eoe.first.fragment.LeftFragment&quot;/&gt;</div><div class="line"></div><div class="line">   &lt;fragment</div><div class="line">     android:id=&quot;@+id/details&quot;</div><div class="line">     android:layout_width=&quot;match_parent&quot;</div><div class="line">     android:layout_height=&quot;match_parent&quot;</div><div class="line">     android:layout_weight=&quot;1&quot;</div><div class="line">     class=&quot;cn.eoe.first.fragment.RightFragment&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">class= &quot;cn.eoe.first.fragment.LeftFragment&quot; 换成</div><div class="line">android:name=&quot;cn.eoe.first.fragment.LeftFragment&quot;也可以</div></pre></td></tr></table></figure><h3 id="方法二：在代码中添加fragment到一个ViewGroup"><a href="#方法二：在代码中添加fragment到一个ViewGroup" class="headerlink" title="方法二：在代码中添加fragment到一个ViewGroup"></a>方法二：在代码中添加fragment到一个ViewGroup</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//先获得Fragment的管理</div><div class="line"> FragmentManager fragmentManager = getFragmentManager();</div><div class="line">//所有Fragment的事务都是通过FragmentTransaction来完成，在通过管理者获取事务对象</div><div class="line"> FragmentTransaction fragmentTransaction = fragmentManager</div><div class="line">                  .beginTransaction();</div><div class="line">//实例化要添加的Fragment</div><div class="line"> MyFragment fragment =  new  MyFragment();</div><div class="line">//添加Fragment通过layout中的id，实例对象，还有tag标签</div><div class="line">  fragmentTransaction.add(R.id.fragment_container1, fragment,&quot;fragment&quot;);</div><div class="line"> //提交</div><div class="line"> fragmentTransaction.commit();</div></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FragmentTransaction tx =getSupportFragmentManager().beginTransaction();</div><div class="line">tx.replace(R.id.main, Fragment.instantiate(MyHomeSlidingActivity.**this**,</div><div class="line">           &quot;com.joymis.audio.FragmentmyhomeInfo&quot;));</div><div class="line">tx.commit();</div></pre></td></tr></table></figure><p>其中 “com.joymis.audio.FragmentmyhomeInfo”的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    public   class  FragmentmyhomeInfo  extends  Fragment &#123;</div><div class="line"></div><div class="line">   @Override</div><div class="line">     public  View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">              Bundle savedInstanceState) &#123;</div><div class="line">         View view = inflater.inflate(R.layout.layout_myhome_fragment, container,**false**);</div><div class="line"></div><div class="line">           return  view;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Override</div><div class="line">     public    void  onDestroyView() &#123;</div><div class="line"></div><div class="line">           super.onDestroyView();</div><div class="line">     &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>layout中的布局为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;FrameLayout</div><div class="line">   android:id=&quot;@+id/fragment_container1&quot;</div><div class="line">   android:layout_width=&quot;match_parent&quot;</div><div class="line">   android:layout_height=&quot;wrap_content&quot; /&gt;</div></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>要管理fragment们，需使用FragmentManager，要获取它，需在activity中调用方法getFragmentManager()。<br>你可以用FragmentManager来做以上事情：<br>1使用方法findFragmentById()或findFragmentByTag()，获取activity中已存在的fragment们。<br>2使用方法popBackStack()从activity的后退栈中弹出fragment们（这可以模拟后退键引发的动作）。<br>3用方法addOnBackStackChangedListerner()注册一个侦听器以监视后退栈的变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Fragment不能独立存在，它必须嵌入到activity中，而且Fragment的生命周期直接受所在的activity的影响。例如：当activity暂停时，它拥有的所有的Fragment们都暂停了，当activity销毁时，它拥有的所有Fragment们都被销毁。&lt;/p
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android各种SdkVersion理解</title>
    <link href="https://chunyang1988.github.io/2017/11/09/Android-SdkVersion/"/>
    <id>https://chunyang1988.github.io/2017/11/09/Android-SdkVersion/</id>
    <published>2017-11-09T08:26:33.000Z</published>
    <updated>2018-01-19T08:30:14.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li>minSdkVersion</li><li>compileSdkVersion</li><li>targetSdkVersion</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>了解各种sdkVersion具体意思。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Google 官方发布<a href="https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd#.egywqatjg" target="_blank" rel="external">文章</a> 解析compileSdkVersion、minSdkVersion 以及 targetSdkVersion 的含义，以及合理设置各个值的意义，还有<a href="https://chinagdg.org/2016/01/picking-your-compilesdkversion-minsdkversion-targetsdkversion/" target="_blank" rel="external">翻译</a></p><h3 id="minSdkVersion"><a href="#minSdkVersion" class="headerlink" title="minSdkVersion"></a>minSdkVersion</h3><p>设置应用可运行最低版本，如果系统的 API 高于该值，则系统会阻止程序安装。</p><h3 id="compileSdkVersion"><a href="#compileSdkVersion" class="headerlink" title="compileSdkVersion"></a>compileSdkVersion</h3><p>设置编辑版本，也就是告诉 Gradle 用哪个 Android SDK 版本编译你的应用，一般都是选择最新的SDK。</p><p>当你修改了 compileSdkVersion 的时候，可能会出现新的编译警告、编译错误，但新的 compileSdkVersion 不会被包含到 APK 中：它纯粹只是在编译的时候使用。（你真的应该修复这些警告，他们的出现一定是有原因的）。</p><p>在这里需要注意的是，编译报错的时候，一定要得到注意，根据提示来做兼容设置，例如判断Build.VERSION_SDK_INT常量表示当前Android设备的版本号来比对，使用不同的兼容方案。</p><h3 id="targetSdkVersion"><a href="#targetSdkVersion" class="headerlink" title="targetSdkVersion"></a>targetSdkVersion</h3><p>targetSdkVersion 是 Android 提供向前兼容的主要依据，<strong>在应用的 targetSdkVersion 没有更新之前系统不会应用最新的行为变化</strong>。</p><p>怎么理解这句话呢？如果设备API等于 targetSdkVersion 就是告知当前项目已经兼容新的行为变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;minSdkVersion&lt;/li&gt;
&lt;li&gt;compileSdkVersion&lt;/li&gt;
&lt;li&gt;targetSdkV
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 屏幕适配</title>
    <link href="https://chunyang1988.github.io/2017/10/30/Android-SmartScale/"/>
    <id>https://chunyang1988.github.io/2017/10/30/Android-SmartScale/</id>
    <published>2017-10-30T10:07:31.000Z</published>
    <updated>2018-01-18T10:19:11.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>版权声明：本文转载自Android大牛<a href="http://stormzhang.com/android/2014/05/16/android-screen-adaptation/" target="_blank" rel="external">stormzhang</a> 原创文章，可以随意转载，但请必须在明确位置注明出处！！！</strong></p></blockquote><p>众所周知，Android机型尺寸各种各样，于是屏幕适配就成了Android开发中很重要的一环。Android屏幕适配可能一些开发者都会遇到这样的问题，今天就来分享下屏幕适配，你会发现其实Android屏幕适配也可以很简单。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Android屏幕适配必须要理解的一些概念，这部分可能比较枯燥，但是俗话说的好“工欲善其事，必先利器”，翻译过来就是“有什么样的枪，决定你打什么样的鸟”，一旦这些概念你理解掌握了，屏幕适配你自然而然就觉得简单多了。</p><ul><li>px</li></ul><p>是英文单词pixel的缩写，意为像素，屏幕上的点。我们通常所说的分辨率如480X800就是指的像素。</p><p>在设计领域中，像素是用来计算数码影像的最小单位。计算机中显示的图像并非连续的线条组成，而是由许多肉眼看不见的小点组成。如果把影像放大数倍，会发现这些连续色调其实是由许多色彩相近的小点所组成，这些小点就是构成影像的最小单位“像素”。由于是最小的独立显示单位，px均为整数，不会出现0.5px的情况。如：</p><p>看这个色彩鲜艳的LED灯（原图大小）</p><p><img src="http://stormzhang.com/image/pixel_origin.png" alt=""></p><p>你能想象这才是他的本来面目吗？（放大之后）</p><p><img src="http://stormzhang.com/image/pixel_scale.jpeg" alt=""></p><ul><li>in</li></ul><p>表示英寸，是屏幕的物理尺寸。每英寸等于2.54厘米。例如我们经常说的手机屏幕大小有，5（英）寸、4（英）寸就是指这个单位。这些尺寸是屏幕的对角线长度。如果手机的屏幕是4英寸，表示手机的屏幕（可视区域）对角线长度是4 X 2.54 = 10.16厘米。</p><ul><li>dpi</li></ul><p>dpi是Dots Per Inch的缩写, 每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。</p><ul><li>density</li></ul><p>屏幕密度，density和dpi的关系为 density = dpi/160</p><ul><li>dp</li></ul><p>也即dip，设备独立像素，device independent pixels的缩写，Android特有的单位，在屏幕密度dpi = 160屏幕上，1dp = 1px。</p><ul><li>sp</li></ul><p>和dp很类似，一般用来设置字体大小，和dp的区别是它可以根据用户的字体大小偏好来缩放。</p><h2 id="Android-Drawable"><a href="#Android-Drawable" class="headerlink" title="Android Drawable"></a>Android Drawable</h2><p>我们新建一个Android项目后应该可以看到很多drawable文件夹，分别对应不同的dpi</p><ul><li><p>drawable-ldpi (dpi=120, density=0.75)</p></li><li><p>drawable-mdpi (dpi=160, density=1)</p></li><li><p>drawable-hdpi (dpi=240, density=1.5)</p></li><li><p>drawable-xhdpi (dpi=320, density=2)</p></li><li><p>drawable-xxhdpi (dpi=480, density=3)</p></li></ul><p>市面上的一些Android教程大多都是教的是为每种dpi都出一套图片资源，这个固然是一种解决办法，但同时也是一种非常笨的方法，为美工或者设计增加了不少的工作量不说，同时也会让你的apk包变的很大。那么有没有什么好的方法既能保证屏幕适配，又可以最小占用设计资源，同时最好又只使用一套dpi的图片资源呢？下面就来讲解下项目中总结出来的这个方法。</p><p>首先必须清楚一个自动渲染的概念，Android SDK会自动屏幕尺寸选择对应的资源文件进行渲染，如SDK检测到你手机dpi是160的话会优先到drawable-mdpi文件夹下找对应的图片资源，注意只是优先，假设你手机dpi是160，但是你只在xhpdi文件夹下有对应的图片资源文件，程序一样可以正常运行。所以理论上来说只需要提供一种规格的图片资源就ok了，如果只提供ldpi规格的图片，对于大分辨率的手机如果把图片放大就会不清晰，所以需要提供一套你需要支持的最大dpi的图片，这样即使用户的手机分辨率很小，这样图片缩小依然很清晰。</p><h2 id="xhdpi成为首选"><a href="#xhdpi成为首选" class="headerlink" title="xhdpi成为首选"></a>xhdpi成为首选</h2><p>上面说了只需要提供一套大的dpi的图片就ok了，现在市面手机分辨率最大可达到1080X1920的分辨率，如Nexus5，dpi属于xxhdpi，但是毕竟还没普及，目前市面上最普遍的高端机的分辨率还多集中在720X1080范围，也就是多集中在xhdpi，所以目前来看xhpdi规格的图片成为了首选。当然随着技术规格的提高以后发展，以后可能市场上xxdpi的手机会越来越普遍，但这是后话。</p><h2 id="设计资源紧张怎么办？"><a href="#设计资源紧张怎么办？" class="headerlink" title="设计资源紧张怎么办？"></a>设计资源紧张怎么办？</h2><p>在现在的App开发中，基本都会有iOS和Android版本，有些公司为了保持App不同版本的体验交互一致，还有些公司的设计资源可能比较紧张，这些情况下iOS和Android版本基本是一个设计师主导，而大多数情况下设计师可能更会以iPhone手机为基础进行设计，包括后期的切图之类的。这个时候身为Android开发人员你是否还要求设计师单独为Android端切一套图片资源呢？这会让你们的设计师崩溃的，下面就来告诉一个项目中总结的更棒的方法。</p><p>相信设计师们一般都会用最新的iPhone5（5s和5的尺寸以及分辨率都一样）来做原型设计，而iPhone5的屏幕分辨率为640X1164, 屏幕尺寸为4英寸，根据勾股定理(a^2 + b^2 = c^2)640^2+1164^2=1764496, 然后再对其开根号可求出屏幕对角线的分辨率为：1328，除以4可得出iphone5的dpi：1328/4≈332 可以看出iPhone5的屏幕的dpi约等于320, 刚好属于xhdpi，所以你可以很自豪的像你们的设计师说不用专门为Android端切图，直接把iPhone的那一套切好的图片资源放入drawable-xhdpi文件夹里就ok了。</p><h2 id="wrap-content-VS-dp"><a href="#wrap-content-VS-dp" class="headerlink" title="wrap_content VS dp"></a>wrap_content VS dp</h2><p>wrap_content和dp都是在Android开发中应该经常用到的，然后它们冥冥中是有关系的。</p><p>假设你看了这篇文章后都是统一有xhdpi的资源，那么你用wrap_content完全没有问题，Android会自动为其他规格的dpi屏幕适配,比如你在xhdpi放了一张120X120px大小的图片，那么在在hdpi屏幕上显示的就只有120/2*1.5=90px大小，但是如果你不小心同样把这张图片也放入了mdpi了，这个时候用wrap_content显示就会有问题，具体看下面的例子：</p><p>例如假设你只在drawable_xhdpi文件夹下放了test图片，xhdpi的设备会去xhdpi文件夹下找到test图片并直接显示，而mdpi的设备优先会去mdpi文件夹里查找test图片，但是没找到，最后在xhdpi文件夹下找到，然后会自动根据density计算并缩放显示出来，实际显示出来的大小是120/2=60px, 所以整体的显示比例才会看起来比较正常</p><ul><li>mdpi</li></ul><p><img src="http://stormzhang.com/image/mdpi_test.png" alt=""></p><ul><li>xhdpi</li></ul><p><img src="http://stormzhang.com/image/xhdpi_test.png" alt=""></p><p>但是如果你在mdpi文件夹里也放入了同样的图片，那么mdpi的设备会直接去mdpi文件夹里寻找到test图片，并直接显示，而这时候显示不会缩放，实际显示大小就是120X120,在mdpi的屏幕上看起来就会比较大，如图：</p><p><img src="http://stormzhang.com/image/mdpi_test2.png" alt=""></p><p>通过上面整个过程，大家应该理解了Android加载资源的整个过程, wrap_content同样可以用dp来代替，就拿上面这个例子，在xhdpi文件夹内放入了一张120X120像素的test图片，宽高直接除density就得出dp的数值，即这种情况下以下代码是等同的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:src=&quot;@drawable/test&quot; /&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">    android:layout_width=&quot;60dp&quot;</div><div class="line">    android:layout_height=&quot;60dp&quot;</div><div class="line">    android:src=&quot;@drawable/test&quot; /&gt;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>相信通过以上的讲解，对Android UI中的一些基本概念有个很好的理解，实际开发工作中也有一些高效的方法可以参考，应该可以应对大部分的屏幕适配工作。但是项目中仍然有一些比较特殊的适配需求满足不了，以后会针对一些特殊的需求进行示例讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;版权声明：本文转载自Android大牛&lt;a href=&quot;http://stormzhang.com/android/2014/05/16/android-screen-adaptation/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ADB 常用命令</title>
    <link href="https://chunyang1988.github.io/2017/10/18/adb-command/"/>
    <id>https://chunyang1988.github.io/2017/10/18/adb-command/</id>
    <published>2017-10-18T09:43:34.000Z</published>
    <updated>2018-01-18T09:51:07.084Z</updated>
    
    <content type="html"><![CDATA[<p>重启机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure><p>重启机器到bootloader刷机模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot bootloader</div></pre></td></tr></table></figure><p>重启机器到recovery恢复模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure><p>查看设备应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">adb shell pm ls packages //查看设备所有应用</div><div class="line">adb shell pm list packages -s //查看系统应用</div><div class="line">adb shell pm list packages -3 //查看第三方应用</div><div class="line">adb shell pm list packages &lt;name&gt; //查看包含&lt;name&gt;列表</div><div class="line">或者</div><div class="line">adb shell pm list packages | grep &lt;name&gt;</div></pre></td></tr></table></figure><p>查看应用详情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys package &lt;packagename&gt;</div></pre></td></tr></table></figure><p>查看设备分辨率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell wm size</div><div class="line">adb shell wm size 480x1024 //修改分辨率</div><div class="line">adb shell wm size reset //恢复分辨率</div></pre></td></tr></table></figure><p>查看屏幕密度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell wm density</div><div class="line">adb shell wm density 160 //修改屏幕密度</div><div class="line">adb shell wm density reset //回复屏幕密度</div></pre></td></tr></table></figure><p>查看系统版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell getprop ro.build.version.release</div></pre></td></tr></table></figure><p>强制停止应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am force-stop &lt;packagename&gt;</div></pre></td></tr></table></figure><p>复制设备文件到电脑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</div></pre></td></tr></table></figure></p><p>复制电脑文件到设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</div></pre></td></tr></table></figure><p>查看log日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat</div></pre></td></tr></table></figure><p>查看内核日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dmesg</div></pre></td></tr></table></figure><p>安装APk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb install [-lrtsdg] &lt;path_to_apk&gt;// adb install x.apk</div></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 /mnt/asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr></tbody></table><p>常见安装失败输出代码、含义及可能的解决办法如下：</p><table><thead><tr><th>输出</th><th>含义</th><th>解决办法</th></tr></thead><tbody><tr><td>INSTALL_FAILED_ALREADY_EXISTS</td><td>应用已经存在，或卸载了但没卸载干净</td><td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td></tr><tr><td>INSTALL_FAILED_INVALID_APK</td><td>无效的 APK 文件</td><td></td></tr><tr><td>INSTALL_FAILED_INVALID_URI</td><td>无效的 APK 文件名</td><td>确保 APK 文件名里无中文</td></tr><tr><td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td><td>空间不足</td><td>清理空间</td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PACKAGE</td><td>已经存在同名程序</td><td></td></tr><tr><td>INSTALL_FAILED_NO_SHARED_USER</td><td>请求的共享用户不存在</td><td></td></tr><tr><td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td><td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td><td>先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td></tr><tr><td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td><td>请求的共享用户存在但签名不一致</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td><td>安装包使用了设备上不可用的共享库</td><td></td></tr><tr><td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td><td>替换时无法删除</td><td></td></tr><tr><td>INSTALL_FAILED_DEXOPT</td><td>dex 优化验证失败或空间不足</td><td></td></tr><tr><td>INSTALL_FAILED_OLDER_SDK</td><td>设备系统版本低于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_CONFLICTING_PROVIDER</td><td>设备里已经存在与应用里同名的 content provider</td><td></td></tr><tr><td>INSTALL_FAILED_NEWER_SDK</td><td>设备系统版本高于应用要求</td><td></td></tr><tr><td>INSTALL_FAILED_TEST_ONLY</td><td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td><td></td></tr><tr><td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td><td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td><td></td></tr><tr><td>INSTALL_FAILED_MISSING_FEATURE</td><td>应用使用了设备不可用的功能</td><td></td></tr><tr><td>INSTALL_FAILED_CONTAINER_ERROR</td><td>1. sdcard 访问失败;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 确认 sdcard 可用，或者安装到内置存储;<br>2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_INVALID_INSTALL_LOCATION</td><td>1. 不能安装到指定位置;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td><td>1. 切换安装位置，添加或删除 <code>-s</code> 参数;<br>2. 打包时不与 ROM 使用相同签名。</td></tr><tr><td>INSTALL_FAILED_MEDIA_UNAVAILABLE</td><td>安装位置不可用</td><td>一般为 sdcard，确认 sdcard 可用或安装到内置存储</td></tr><tr><td>INSTALL_FAILED_VERIFICATION_TIMEOUT</td><td>验证安装包超时</td><td></td></tr><tr><td>INSTALL_FAILED_VERIFICATION_FAILURE</td><td>验证安装包失败</td><td></td></tr><tr><td>INSTALL_FAILED_PACKAGE_CHANGED</td><td>应用与调用程序期望的不一致</td><td></td></tr><tr><td>INSTALL_FAILED_UID_CHANGED</td><td>以前安装过该应用，与本次分配的 UID 不一致</td><td>清除以前安装过的残留文件</td></tr><tr><td>INSTALL_FAILED_VERSION_DOWNGRADE</td><td>已经安装了该应用更高版本</td><td>使用 <code>-d</code> 参数</td></tr><tr><td>INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</td><td>已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NOT_APK</td><td>指定路径不是文件，或不是以 <code>.apk</code> 结尾</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_MANIFEST</td><td>无法解析的 AndroidManifest.xml 文件</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</td><td>解析器遇到异常</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_NO_CERTIFICATES</td><td>安装包没有签名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</td><td>已安装该应用，且签名与 APK 文件不一致</td><td>先卸载设备上的该应用，再安装</td></tr><tr><td>INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</td><td>解析 APK 文件时遇到 <code>CertificateEncodingException</code></td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</td><td>manifest 文件里没有或者使用了无效的包名</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</td><td>manifest 文件里指定了无效的共享用户 ID</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</td><td>解析 manifest 文件时遇到结构性错误</td><td></td></tr><tr><td>INSTALL_PARSE_FAILED_MANIFEST_EMPTY</td><td>在 manifest 文件里找不到找可操作标签（instrumentation 或 application）</td><td></td></tr><tr><td>INSTALL_FAILED_INTERNAL_ERROR</td><td>因系统问题安装失败</td><td></td></tr><tr><td>INSTALL_FAILED_USER_RESTRICTED</td><td>用户被限制安装应用</td><td></td></tr><tr><td>INSTALL_FAILED_DUPLICATE_PERMISSION</td><td>应用尝试定义一个已经存在的权限名称</td><td></td></tr><tr><td>INSTALL_FAILED_NO_MATCHING_ABIS</td><td>应用包含设备的应用程序二进制接口不支持的 native code</td><td></td></tr><tr><td>INSTALL_CANCELED_BY_USER</td><td>应用安装需要在设备上确认，但未操作设备或点了取消</td><td>在设备上同意安装</td></tr><tr><td>INSTALL_FAILED_ACWF_INCOMPATIBLE</td><td>应用程序与设备不兼容</td><td></td></tr><tr><td>does not contain AndroidManifest.xml</td><td>无效的 APK 文件</td><td></td></tr><tr><td>is not a valid zip file</td><td>无效的 APK 文件</td><td></td></tr><tr><td>Offline</td><td>设备未连接成功</td><td>先将设备与 adb 连接成功</td></tr><tr><td>unauthorized</td><td>设备未授权允许调试</td><td></td></tr><tr><td>error: device not found</td><td>没有连接成功的设备</td><td>先将设备与 adb 连接成功</td></tr><tr><td>protocol failure</td><td>设备已断开连接</td><td>先将设备与 adb 连接成功</td></tr><tr><td>Unknown option: -s</td><td>Android 2.2 以下不支持安装到 sdcard</td><td>不使用 <code>-s</code> 参数</td></tr><tr><td>No space left on device</td><td>空间不足</td><td>清理空间</td></tr><tr><td>Permission denied … sdcard …</td><td>sdcard 不可用</td><td></td></tr><tr><td>signatures do not match the previously installed version; ignoring!</td><td>已安装该应用且签名不一致</td><td>先卸载设备上的该应用，再安装</td></tr></tbody></table><p>卸载apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb uninstall [-k] &lt;packagename&gt;</div></pre></td></tr></table></figure><p>清除应用数据与缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell pm clear &lt;packagename&gt;</div><div class="line">//&lt;packagename&gt; 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据</div></pre></td></tr></table></figure><p>还有部分功能是需要root的以及更多命令可以查看<a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="external">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重启机器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;di
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Service</title>
    <link href="https://chunyang1988.github.io/2017/10/05/Android-Service/"/>
    <id>https://chunyang1988.github.io/2017/10/05/Android-Service/</id>
    <published>2017-10-05T05:07:20.000Z</published>
    <updated>2018-01-18T10:19:26.954Z</updated>
    
    <content type="html"><![CDATA[<p>Service 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。</p><p>服务基本上分为两种形式：</p><ol><li><p>启动<br>通过调用 <code>startService()</code> 启动服务时，服务即处于“启动”状态。<br>核心在 <code>onStartCommand()</code>（允许组件启动服务）</p></li><li><p>绑定<br>当应用组件通过调用 <code>bindService()</code> 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。<br>核心在 <code>onBind()</code>（允许绑定服务）</p></li></ol><p>注意：</p><ol><li>使用服务的话，默认情况下，它仍会在应用的主线程中运行，因此，如果服务执行的是密集型或阻止性操作，则你仍应在服务内创建新线程。</li><li>通过添加 android:exported 属性并将其设置为 “false”，确保服务仅适用于您的应用。这可以有效阻止其他应用启动您的服务，即便在使用显式 Intent 时也如此。</li><li>android:process：是否需要在单独的进程中运行,当设置为android:process=”:remote”时，代表Service在单独的进程中运行。注意“：”很重要，它的意思是指要在当前进程名称前面附加上当前的包名</li></ol><h2 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h2><p><strong>onStartCommand()</strong><br>通过调用 <code>startService()</code> 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。</p><p><strong>onBind()</strong><br>通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 <code>null</code>。</p><p><strong>onCreate()</strong><br>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 <code>onStartCommand()</code> 或 <code>onBind()</code> 之前）。如果服务已在运行，则不会调用此方法。</p><p><strong>onDestroy()</strong><br>当服务不再使用且将被销毁时，系统将调用此方法。</p><h2 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h2><p>在这里面会介绍两种方式介绍，主要讲解的是绑定方式，因为绑定服务可以有很多交互方式。</p><h3 id="A-启动服务"><a href="#A-启动服务" class="headerlink" title="A.启动服务"></a>A.启动服务</h3><p>通过调用<code>startService()</code> 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。</p><h3 id="B-绑定服务"><a href="#B-绑定服务" class="headerlink" title="B.绑定服务"></a>B.绑定服务</h3><p>通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 <code>null</code>。</p><p>创建绑定服务时，必须提供<code>IBinder</code>接口，这里面可以通过三种方式定义：</p><h4 id="1-扩展Binder类"><a href="#1-扩展Binder类" class="headerlink" title="1.扩展Binder类"></a>1.扩展Binder类</h4><p>如果服务是供您的自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 返回它的一个实例来创建接口。客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。也就是说如果服务仅供本地应用使用，不需要跨进程工作，则可以实现自有 Binder 类，让你的客户端通过该类直接访问服务中的公共方法。</p><p>服务端代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class LocalService extends Service &#123;</div><div class="line">    // Binder given to clients</div><div class="line">    private final IBinder mBinder = new LocalBinder();</div><div class="line">    // Random number generator</div><div class="line">    private final Random mGenerator = new Random();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Class used for the client Binder.  Because we know this service always</div><div class="line">     * runs in the same process as its clients, we don&apos;t need to deal with IPC.</div><div class="line">     */</div><div class="line">    public class LocalBinder extends Binder &#123;</div><div class="line">        LocalService getService() &#123;</div><div class="line">            // Return this instance of LocalService so clients can call public methods</div><div class="line">            return LocalService.this;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        return mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** method for clients */</div><div class="line">    public int getRandomNumber() &#123;</div><div class="line">      return mGenerator.nextInt(100);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>客户端代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class BindingActivity extends Activity &#123;</div><div class="line">    LocalService mService;</div><div class="line">    boolean mBound = false;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">        // Bind to LocalService</div><div class="line">        Intent intent = new Intent(this, LocalService.class);</div><div class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStop() &#123;</div><div class="line">        super.onStop();</div><div class="line">        // Unbind from the service</div><div class="line">        if (mBound) &#123;</div><div class="line">            unbindService(mConnection);</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Called when a button is clicked (the button in the layout file attaches to</div><div class="line">      * this method with the android:onClick attribute) */</div><div class="line">    public void onButtonClick(View v) &#123;</div><div class="line">        if (mBound) &#123;</div><div class="line">            // Call a method from the LocalService.</div><div class="line">            // However, if this call were something that might hang, then this request should</div><div class="line">            // occur in a separate thread to avoid slowing down the activity performance.</div><div class="line">            int num = mService.getRandomNumber();</div><div class="line">            Toast.makeText(this, &quot;number: &quot; + num, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** Defines callbacks for service binding, passed to bindService() */</div><div class="line">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceConnected(ComponentName className,</div><div class="line">                IBinder service) &#123;</div><div class="line">            // We&apos;ve bound to LocalService, cast the IBinder and get LocalService instance</div><div class="line">            LocalBinder binder = (LocalBinder) service;</div><div class="line">            mService = binder.getService();</div><div class="line">            mBound = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceDisconnected(ComponentName arg0) &#123;</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面方式就能是实现简单通信。</p><h4 id="2-Messenger"><a href="#2-Messenger" class="headerlink" title="2.Messenger"></a>2.Messenger</h4><p>如需让服务与远程进程通信，则可使用 Messenger 为您的服务提供接口。利用此方法，您无需使用 AIDL 便可执行进程间通信 (IPC)。</p><p>服务端代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MessengerService extends Service &#123;</div><div class="line">    /** Command to the service to display a message */</div><div class="line">    static final int MSG_SAY_HELLO = 1;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Handler of incoming messages from clients.</div><div class="line">     */</div><div class="line">    class IncomingHandler extends Handler &#123;</div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            switch (msg.what) &#123;</div><div class="line">                case MSG_SAY_HELLO:</div><div class="line">                    Toast.makeText(getApplicationContext(), &quot;hello!&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                    break;</div><div class="line">                default:</div><div class="line">                    super.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Target we publish for clients to send messages to IncomingHandler.</div><div class="line">     */</div><div class="line">    final Messenger mMessenger = new Messenger(new IncomingHandler());</div><div class="line"></div><div class="line">    /**</div><div class="line">     * When binding to the service, we return an interface to our messenger</div><div class="line">     * for sending messages to the service.</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        Toast.makeText(getApplicationContext(), &quot;binding&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">        return mMessenger.getBinder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>客户端代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">public class ActivityMessenger extends Activity &#123;</div><div class="line">    /** Messenger for communicating with the service. */</div><div class="line">    Messenger mService = null;</div><div class="line"></div><div class="line">    /** Flag indicating whether we have called bind on the service. */</div><div class="line">    boolean mBound;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Class for interacting with the main interface of the service.</div><div class="line">     */</div><div class="line">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class="line">        public void onServiceConnected(ComponentName className, IBinder service) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // established, giving us the object we can use to</div><div class="line">            // interact with the service.  We are communicating with the</div><div class="line">            // service using a Messenger, so here we get a client-side</div><div class="line">            // representation of that from the raw IBinder object.</div><div class="line">            mService = new Messenger(service);</div><div class="line">            mBound = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onServiceDisconnected(ComponentName className) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // unexpectedly disconnected -- that is, its process crashed.</div><div class="line">            mService = null;</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    public void sayHello(View v) &#123;</div><div class="line">        if (!mBound) return;</div><div class="line">        // Create and send a message to the service, using a supported &apos;what&apos; value</div><div class="line">        Message msg = Message.obtain(null, MessengerService.MSG_SAY_HELLO, 0, 0);</div><div class="line">        try &#123;</div><div class="line">            mService.send(msg);</div><div class="line">        &#125; catch (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">        // Bind to the service</div><div class="line">        bindService(new Intent(this, MessengerService.class), mConnection,</div><div class="line">            Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onStop() &#123;</div><div class="line">        super.onStop();</div><div class="line">        // Unbind from the service</div><div class="line">        if (mBound) &#123;</div><div class="line">            unbindService(mConnection);</div><div class="line">            mBound = false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-使用AIDL"><a href="#3-使用AIDL" class="headerlink" title="3.使用AIDL"></a>3.使用AIDL</h4><p>AIDL（Android 接口定义语言）执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，以便服务一次接收一个请求。 不过，如果想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，服务必须具备多线程处理能力，并采用线程安全式设计。</p><p>如需直接使用 AIDL，您必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，您随后可在服务内对其进行扩展。</p><p>此文就不着重介绍，后续会单独有篇文章介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Service 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。&lt;/p&gt;
&lt;p&gt;服务基本上分为两种形式：
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2简单使用</title>
    <link href="https://chunyang1988.github.io/2017/09/24/Dagger2Simple/"/>
    <id>https://chunyang1988.github.io/2017/09/24/Dagger2Simple/</id>
    <published>2017-09-24T04:38:59.000Z</published>
    <updated>2018-01-18T09:49:43.925Z</updated>
    
    <content type="html"><![CDATA[<p>Dagger2是基于JSR—330标准的依赖注入框架，也就是在编译期间自动生成代码，来创建相应的对象。</p><h2 id="Dagger2相应注释讲解"><a href="#Dagger2相应注释讲解" class="headerlink" title="Dagger2相应注释讲解"></a>Dagger2相应注释讲解</h2><p>此文讲解案例使用<code>Retrofit</code>讲解，讲解前先把常规写法写出来大家根据此对比，来发现Dagger2的便利之处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//创建OkHttpClient</div><div class="line">OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class="line">client.connectTimeout(15, TimeUnit.SECONDS);</div><div class="line">client.writeTimeout(30, TimeUnit.SECONDS);</div><div class="line">client.readTimeout(30, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">//添加Interceptor</div><div class="line">HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class="line">    @Override</div><div class="line">    public void log(String message) &#123;</div><div class="line">        LogUtil.i(TAG, message);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">client.addInterceptor(logging);</div><div class="line">client.addNetworkInterceptor(new StethoInterceptor());</div><div class="line">client.addNetworkInterceptor(new NetworkInterceptor());</div><div class="line"></div><div class="line">//创建Retrofit，传递OkHttpClient、HostUrl</div><div class="line">Retrofit retrofit = new Retrofit.Builder().client(client.build())</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">        .baseUrl(HOST_URL).build();</div><div class="line">        </div><div class="line">//创建ApiService</div><div class="line">mService = retrofit.create(ApiService.class);</div></pre></td></tr></table></figure><p>大家都知道<code>Retrofit</code>中Api的调用都会放在<code>ApiService</code>中，那么使用<code>Dagger2</code>如何来获取到<code>ApiService</code>？如何创建<code>Retrofit</code>对象？如何传递<code>OkHttpClient</code>对象？大家先带着这样的问题来看此文。</p><h3 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h3><p><code>@Inject</code>负责标记那些需要被依赖注入自动创建出来，说白一点就是看见<code>@Inject</code>就代表这个对象在依赖注入中被引用或者被new出来。</p><p>在<code>ApiModule</code>中代码如下，先不用看非<code>@Inject</code>地方，后续会讲到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Module</div><div class="line">public class ApiModule &#123;</div><div class="line">    String host;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    public ApiModule(String host) &#123;</div><div class="line">        this.host = host;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>ApiManager</code>属性中添加<code>@Inject ApiService</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class ApiManager &#123;</div><div class="line"></div><div class="line">    private static class Holder &#123;</div><div class="line">        private static ApiManager IN = new ApiManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static ApiManager getInstance() &#123;</div><div class="line">        return Holder.IN;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    ApiService apiService;</div><div class="line"></div><div class="line">    public ApiManager() &#123;</div><div class="line">        DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="@Module"></a>@Module</h3><p>通过<code>@Module</code>注解，Dagger才知道怎么去依赖注入，也就是上文中的<code>@Inject</code>的对象在此处查找并构造出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">@Module</div><div class="line">public class ApiModule &#123;</div><div class="line">    String host;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    public ApiModule(String host) &#123;</div><div class="line">        this.host = host;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Provides</div><div class="line">    @SoApp</div><div class="line">    public OkHttpClient okHttpClient() &#123;</div><div class="line">          //创建OkHttpClient</div><div class="line">        OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class="line">        client.connectTimeout(15, TimeUnit.SECONDS);</div><div class="line">        client.writeTimeout(30, TimeUnit.SECONDS);</div><div class="line">        client.readTimeout(30, TimeUnit.SECONDS);</div><div class="line">        </div><div class="line">        //添加Interceptor</div><div class="line">        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class="line">            @Override</div><div class="line">            public void log(String message) &#123;</div><div class="line">                LogUtil.i(TAG, message);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">        client.addInterceptor(logging);</div><div class="line">        client.addNetworkInterceptor(new StethoInterceptor());</div><div class="line">        client.addNetworkInterceptor(new NetworkInterceptor());</div><div class="line">        return client.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Provides</div><div class="line">    @SoApp</div><div class="line">    public ApiService apiService(String host, OkHttpClient client) &#123;</div><div class="line">     //创建Retrofit，传递OkHttpClient、HostUrl</div><div class="line">        Retrofit retrofit = new Retrofit.Builder().client(client)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">                .baseUrl(host)</div><div class="line">                .build();</div><div class="line">        return retrofit.create(ApiService.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Provides</div><div class="line">    String providesHost() &#123;</div><div class="line">        return host;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Provides"><a href="#Provides" class="headerlink" title="@Provides"></a>@Provides</h3><p><code>@Provides</code>会标记Module中那些返回依赖的方法，通过此注解查找依赖引用，尤其是有些构造器会有很多参数，而这些参数必须在Module中添加<code>@Provides</code>的依赖方法，否则无法编译通过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">@Module</div><div class="line">public class ApiModule &#123;</div><div class="line">    String host;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    public ApiModule(String host) &#123;</div><div class="line">        this.host = host;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Provides</div><div class="line">    @SoApp</div><div class="line">    public OkHttpClient okHttpClient() &#123;</div><div class="line">          //创建OkHttpClient</div><div class="line">        OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class="line">        client.connectTimeout(15, TimeUnit.SECONDS);</div><div class="line">        client.writeTimeout(30, TimeUnit.SECONDS);</div><div class="line">        client.readTimeout(30, TimeUnit.SECONDS);</div><div class="line">        </div><div class="line">        //添加Interceptor</div><div class="line">        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class="line">            @Override</div><div class="line">            public void log(String message) &#123;</div><div class="line">                LogUtil.i(TAG, message);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">        client.addInterceptor(logging);</div><div class="line">        client.addNetworkInterceptor(new StethoInterceptor());</div><div class="line">        client.addNetworkInterceptor(new NetworkInterceptor());</div><div class="line">        return client.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Provides</div><div class="line">    @SoApp</div><div class="line">    public ApiService apiService(String host, OkHttpClient client) &#123;</div><div class="line">     //创建Retrofit，传递OkHttpClient、HostUrl</div><div class="line">        Retrofit retrofit = new Retrofit.Builder().client(client)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">                .baseUrl(host)</div><div class="line">                .build();</div><div class="line">        return retrofit.create(ApiService.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Provides</div><div class="line">    String providesHost() &#123;</div><div class="line">        return host;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>在<code>@Component</code>里面定义了在哪些Module中去依赖注入，<code>@Component</code>通常是<code>@Module</code>和<code>@Inject</code>之间的桥梁。<code>@Component</code>也可以依赖其它的component，在此处先不讲解，后续讲解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@SoApp</div><div class="line">@Component(modules = &#123;ApiModule.class&#125;)</div><div class="line">public interface ApiComponent &#123;</div><div class="line"></div><div class="line">    void inject(ApiManager manager);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在<code>ApiManager</code>属性中需要依赖注入的对象例如添加<code>@Inject ApiService</code>，Build Make Module 一下即可编译生成<code>DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class ApiManager &#123;</div><div class="line"></div><div class="line">    private static class Holder &#123;</div><div class="line">        private static ApiManager IN = new ApiManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static ApiManager getInstance() &#123;</div><div class="line">        return Holder.IN;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    ApiService apiService;</div><div class="line"></div><div class="line">    public ApiManager() &#123;</div><div class="line">        DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>到此基本的Dagger也就讲解完成了，文中还有<code>@SoApp</code>注解在下一个文章中讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dagger2是基于JSR—330标准的依赖注入框架，也就是在编译期间自动生成代码，来创建相应的对象。&lt;/p&gt;
&lt;h2 id=&quot;Dagger2相应注释讲解&quot;&gt;&lt;a href=&quot;#Dagger2相应注释讲解&quot; class=&quot;headerlink&quot; title=&quot;Dagger2
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3在Mac中安装步骤</title>
    <link href="https://chunyang1988.github.io/2017/09/13/RaspberryPIInstallStep/"/>
    <id>https://chunyang1988.github.io/2017/09/13/RaspberryPIInstallStep/</id>
    <published>2017-09-13T11:13:01.000Z</published>
    <updated>2018-01-18T09:49:17.048Z</updated>
    
    <content type="html"><![CDATA[<p>1.格式TF卡<br>磁盘工具-&gt;抹掉TAB-&gt;MS_DOS(FAT)</p><p>2.查看挂载信息<br>命令行中输入 <code>df -h</code> 查看相对应的TF卡路径如：<code>/dev/disk2s1</code></p><p>3.卸载分区<br>命令行输入<code>diskutil numount</code> </p><p>4.确定设备<br>命令行输入<code>diskutil list</code> 主要目的是查看对应的路径名如：<code>/dev/disk2</code></p><p>5.写入系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dd bs=4m if=固件名称.img of=上面确定的路径名</div></pre></td></tr></table></figure></p><p>例如：<br><code>sudo dd bs=4m if=LCD35-2016-03-18-raspbian-jessie.img of=/dev/rdisk2</code></p><p>6.卸载设备<br>使用磁盘工具进行卸载即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.格式TF卡&lt;br&gt;磁盘工具-&amp;gt;抹掉TAB-&amp;gt;MS_DOS(FAT)&lt;/p&gt;
&lt;p&gt;2.查看挂载信息&lt;br&gt;命令行中输入 &lt;code&gt;df -h&lt;/code&gt; 查看相对应的TF卡路径如：&lt;code&gt;/dev/disk2s1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.卸载
      
    
    </summary>
    
    
      <category term="Raspberry PI" scheme="https://chunyang1988.github.io/tags/Raspberry-PI/"/>
    
      <category term="树莓派" scheme="https://chunyang1988.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>DataBinding</title>
    <link href="https://chunyang1988.github.io/2017/09/09/DataBinding/"/>
    <id>https://chunyang1988.github.io/2017/09/09/DataBinding/</id>
    <published>2017-09-09T14:36:30.000Z</published>
    <updated>2018-01-18T09:48:42.221Z</updated>
    
    <content type="html"><![CDATA[<p>此文讲解的是MVVM中的Data Binding数据绑定</p><h2 id="打开数据绑定"><a href="#打开数据绑定" class="headerlink" title="打开数据绑定"></a>打开数据绑定</h2><p>在Model的gradle中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ....</div><div class="line">    dataBinding &#123;</div><div class="line">        enabled = true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Data-Binding-Layout说明"><a href="#Data-Binding-Layout说明" class="headerlink" title="Data Binding Layout说明"></a>Data Binding Layout说明</h2><p>使用Data Binding后，可以将UI代码放到xml中，布局和数据更加紧密。</p><p>xml文件中，根节点为layout，之后data标签，在下面就是常用界面布局文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">   &lt;data&gt;</div><div class="line">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class="line">   &lt;/data&gt;</div><div class="line">   &lt;LinearLayout</div><div class="line">       android:orientation=&quot;vertical&quot;</div><div class="line">       android:layout_width=&quot;match_parent&quot;</div><div class="line">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class="line">           android:layout_height=&quot;wrap_content&quot;</div><div class="line">           android:text=&quot;@&#123;user.firstName&#125;&quot;/&gt;</div><div class="line">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class="line">           android:layout_height=&quot;wrap_content&quot;</div><div class="line">           android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div><div class="line">   &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure><h3 id="data标签常用属性"><a href="#data标签常用属性" class="headerlink" title="data标签常用属性"></a>data标签常用属性</h3><p><strong>class属性</strong><br><code>class</code> 自定义Binding名称，如果不写则默认是驼峰xml文件名+Binding，例如activity_main.xml则为ActivityMainBinding。如果有<code>class = &quot;MainViewBinding&quot;</code> 则直接这这个名字。</p><p><strong>variable标签</strong><br>用于描述一个对象，之后在布局中引用使用，使用<code>name</code>表示对象引用时使用名称，<code>type</code>为要引用的对象。在View中用<code>@{}</code>来引用。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;variable name = &quot;user&quot; type = &quot;com.example.User&quot;/&gt;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&lt;TextView </div><div class="line">    android:layout_width = &quot;warp_content&quot;</div><div class="line">    android:layout_hight = &quot;warp_content&quot;</div><div class="line">    android:text = &quot;@&#123;user.name&#125;&quot;/&gt;</div></pre></td></tr></table></figure><p><strong>import标签</strong><br>导入跟Java用法一样，只要导入了当前类，后面引用的时候，就可以直接使用，不需要在制定路径例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;android.view.View&quot;/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">...</div><div class="line">&lt;TextView</div><div class="line">   android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class="line">   android:layout_width=&quot;wrap_content&quot;</div><div class="line">   android:layout_height=&quot;wrap_content&quot;</div><div class="line">   android:visibility=&quot;@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;&quot;/&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;com.example.MyStringUtils&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">…</div><div class="line">&lt;TextView</div><div class="line">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;</div><div class="line">   android:layout_width=&quot;wrap_content&quot;</div><div class="line">   android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure><h2 id="Binding-数据对象"><a href="#Binding-数据对象" class="headerlink" title="Binding 数据对象"></a>Binding 数据对象</h2><p>创建正确的数据对象才能在xml文件中引用，反之则会报错。<br>主要就是对属性进行getXX、isXX等。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算术 + - / * %</li><li>字符串合并 +</li><li>逻辑 &amp;&amp; ||</li><li>二元 &amp; | ^</li><li>一元 + - ! ~</li><li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li><li>比较 == &gt; &lt; &gt;= &lt;=</li><li>Instanceof</li><li>Grouping ()</li><li>文字 - character, String, numeric, null</li><li>Cast</li><li>方法调用</li><li>Field 访问</li><li>Array 访问 []</li><li>三元 ?:</li></ul><p>尚且不支持this,super,new,以及显示的泛型，还支持一种空合并运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text = &quot;@&#123;user.displayName ?? user.lastName&#125;&quot;</div></pre></td></tr></table></figure><p>还可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:text=&quot;@&#123;@string/nameFormat(firstName, lastName)&#125;&quot;</div><div class="line"></div><div class="line">&lt;string name=&quot;nameFormat&quot;&gt;%s, %s&lt;/string&gt;</div></pre></td></tr></table></figure><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>事件监听两种实现方式</p><ol><li><p>方法引用<br> 主要是使用<code>名称::方法名</code>格式，而Binding类中方法必须有View参数，要不然编译不通过。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Handlers &#123;</div><div class="line">    public void onClickFriend(View view) &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">····</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">   &lt;data&gt;</div><div class="line">       &lt;variable name=&quot;handlers&quot; type=&quot;com.example.Handlers&quot;/&gt;</div><div class="line">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class="line">   &lt;/data&gt;</div><div class="line">   &lt;LinearLayout</div><div class="line">       android:orientation=&quot;vertical&quot;</div><div class="line">       android:layout_width=&quot;match_parent&quot;</div><div class="line">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class="line">           android:layout_height=&quot;wrap_content&quot;</div><div class="line">           android:text=&quot;@&#123;user.firstName&#125;&quot;</div><div class="line">           android:onClick=&quot;@&#123;handlers::onClickFriend&#125;&quot;/&gt;</div><div class="line">   &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure></li><li><p>监听器绑定<br>使用<code>() -&gt; 名称.方法(参数...)</code></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Presenter &#123;</div><div class="line">    public void onSaveClick(Task task)&#123;&#125;</div><div class="line">&#125;</div><div class="line">···</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;data&gt;</div><div class="line">        &lt;variable name=&quot;task&quot; type=&quot;com.android.example.Task&quot; /&gt;</div><div class="line">        &lt;variable name=&quot;presenter&quot; type=&quot;com.android.example.Presenter&quot; /&gt;</div><div class="line">    &lt;/data&gt;</div><div class="line">    &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">        &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:onClick=&quot;@&#123;() -&gt; presenter.onSaveClick(task)&#125;&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure><h2 id="ID-Views"><a href="#ID-Views" class="headerlink" title="ID Views"></a>ID Views</h2><p>只要是在xml中，带有id的View都会在Binding中通过public final 来修饰。直接调用也可以达到findViewById效果。</p><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p>动态更新数据</p><p><a href="http://www.jianshu.com/p/b1df61a4df77" target="_blank" rel="external">http://www.jianshu.com/p/b1df61a4df77</a><br><a href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/" target="_blank" rel="external">http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/</a><br><a href="http://www.jianshu.com/p/87d4b9f30960" target="_blank" rel="external">http://www.jianshu.com/p/87d4b9f30960</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文讲解的是MVVM中的Data Binding数据绑定&lt;/p&gt;
&lt;h2 id=&quot;打开数据绑定&quot;&gt;&lt;a href=&quot;#打开数据绑定&quot; class=&quot;headerlink&quot; title=&quot;打开数据绑定&quot;&gt;&lt;/a&gt;打开数据绑定&lt;/h2&gt;&lt;p&gt;在Model的gradle中添加：&lt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Gradle Wrapper 常用方法讲解</title>
    <link href="https://chunyang1988.github.io/2017/08/31/Gradlew/"/>
    <id>https://chunyang1988.github.io/2017/08/31/Gradlew/</id>
    <published>2017-08-31T06:44:13.000Z</published>
    <updated>2018-03-20T06:38:35.733Z</updated>
    
    <content type="html"><![CDATA[<p>Gradle是一个基于Groovy强大的构建系统，此文讲解的是Android Studio所使用的一些常用命令。至于以后慢慢学习在讲解一些Gradle基础知识。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>以下命令都是在Mac系统下的常用命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./gradlew -v # 版本号</div><div class="line">./gradlew clean# 清理项目build文件夹</div><div class="line">./gradlew build# 检查依赖并编译打包,同时把debug、release环境的包都打出来。与上文build相对应，一个是清理，一个是生成。</div><div class="line">./gradlew assembleDebug# 编译并打Debug包</div><div class="line">./gradlew assembleXxxRelease# 编译并打Release的包</div></pre></td></tr></table></figure><p>这里面在讲解一下<code>assemble</code>的其他使用方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./gradlew assembleXxxRelease# 生成Xxx渠道的Release版本包</div><div class="line">./gradlew assembleXxx# 生成Xxx渠道的Release和Debug版本包</div><div class="line">./gradlew assembleRelease# 生成全部渠道的Release版本包。</div></pre></td></tr></table></figure><p>Xxx为渠道名称写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">...</div><div class="line">   productFlavors &#123;</div><div class="line">        tencent&#123;</div><div class="line">        ...</div><div class="line">        ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">   &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完整版本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 友盟多渠道打包</div><div class="line">productFlavors &#123;</div><div class="line">    tencent &#123;&#125;</div><div class="line">    wandoujia &#123;&#125;</div><div class="line">    host &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">productFlavors.all &#123; flavor -&gt;</div><div class="line">    flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// AndroidManifest.xml清单中如下</div><div class="line"></div><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class="line">    android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; /&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Gradle是一个基于Groovy强大的构建系统，此文讲解的是Android Studio所使用的一些常用命令。至于以后慢慢学习在讲解一些Gradle基础知识。&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Android" scheme="https://chunyang1988.github.io/categories/Android/"/>
    
      <category term="Gradle" scheme="https://chunyang1988.github.io/categories/Android/Gradle/"/>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
      <category term="Gradle" scheme="https://chunyang1988.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Toolbar基本使用</title>
    <link href="https://chunyang1988.github.io/2017/08/18/ToolBar/"/>
    <id>https://chunyang1988.github.io/2017/08/18/ToolBar/</id>
    <published>2017-08-18T14:26:05.000Z</published>
    <updated>2018-01-18T09:47:25.847Z</updated>
    
    <content type="html"><![CDATA[<p>此文讲解的Toolbar为V7包中的Toolbar。此文会有很多不成熟地方，请大家指正。</p><h2 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h2><p>首先使用Toolbar需要先更改Style样式，主要是将样式设置成无Actionbar的样式，当然网上也有很多其他方式，本人使用的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</div><div class="line">       &lt;!-- Customize your theme here. --&gt;</div><div class="line">       &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</div><div class="line">       &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line">       &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">   &lt;/style&gt;</div><div class="line"></div><div class="line"></div><div class="line">   &lt;style name=&quot;AppTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class="line"></div><div class="line">   &lt;/style&gt;</div></pre></td></tr></table></figure><h2 id="官方文档中XML资源"><a href="#官方文档中XML资源" class="headerlink" title="官方文档中XML资源"></a>官方文档中XML资源</h2><p><img src="http://upload-images.jianshu.io/upload_images/2210217-8f81e990effdea5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/2210217-e3f8039a8db02bf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="常用参数以及方法说明"><a href="#常用参数以及方法说明" class="headerlink" title="常用参数以及方法说明"></a>常用参数以及方法说明</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.Toolbar</div><div class="line">    android:id=&quot;@+id/toolbar&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:background=&quot;?attr/colorPrimary&quot;</div><div class="line">    tools:logo=&quot;@mipmap/ic_launcher&quot;</div><div class="line">    tools:navigationIcon=&quot;@drawable/ic_acb_list&quot;</div><div class="line">    tools:subtitle=&quot;@string/app_name&quot;</div><div class="line">    tools:subtitleTextColor=&quot;@color/colorAccent&quot;</div><div class="line">    tools:title=&quot;@string/app_name&quot;</div><div class="line">    tools:titleTextColor=&quot;@android:color/white&quot;&gt;</div><div class="line"></div><div class="line">&lt;/android.support.v7.widget.Toolbar&gt;</div></pre></td></tr></table></figure><p>tools中的参数如下图解释<br><img src="http://upload-images.jianshu.io/upload_images/2210217-8a2737cb975ed701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"></div><div class="line">toolbar.setNavigationIcon(R.drawable.ic_acb_list);//设置导航栏图标</div><div class="line">toolbar.setLogo(R.mipmap.ic_launcher);//设置app logo</div><div class="line">toolbar.setTitle(&quot;Toolbar&quot;);//设置主标题</div><div class="line">toolbar.setTitleTextColor(ContextCompat.getColor(this, android.R.color.white));</div><div class="line">toolbar.setSubtitle(&quot;Subtitle&quot;);//设置子标题</div><div class="line">toolbar.setSubtitleTextColor(ContextCompat.getColor(this, R.color.colorAccent));</div></pre></td></tr></table></figure><h3 id="2-菜单使用"><a href="#2-菜单使用" class="headerlink" title="2.菜单使用"></a>2.菜单使用</h3><p>主代码部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">toolbar.setOverflowIcon(ContextCompat.getDrawable(this, R.drawable.ic_acb_list));//设置更多图标</div><div class="line"></div><div class="line">toolbar.inflateMenu(R.menu.main_menu);</div><div class="line">toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public boolean onMenuItemClick(MenuItem item) &#123;</div><div class="line">        int id = item.getItemId();</div><div class="line">        Toast.makeText(MainActivity.this, String.valueOf(id), Toast.LENGTH_SHORT).show();</div><div class="line">        switch (id) &#123;</div><div class="line">            case R.id.action_1:</div><div class="line">                break;</div><div class="line">            case R.id.action_2:</div><div class="line">                break;</div><div class="line">            case R.id.action_3:</div><div class="line">                break;</div><div class="line">            case R.id.action_4:</div><div class="line">                break;</div><div class="line">            case R.id.action_5:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>menu部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">   xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</div><div class="line"></div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/action_1&quot;</div><div class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">        android:title=&quot;@string/app_name&quot;</div><div class="line">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class="line"></div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/action_2&quot;</div><div class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">        android:title=&quot;@string/app_name&quot;</div><div class="line">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/action_3&quot;</div><div class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">        android:title=&quot;@string/app_name&quot;</div><div class="line">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/action_4&quot;</div><div class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">        android:title=&quot;@string/app_name&quot;</div><div class="line">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/action_5&quot;</div><div class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">        android:title=&quot;@string/app_name&quot;</div><div class="line">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2210217-51f9e6ee5319c0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/2210217-e2a29d76964f995b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="3-特殊说明"><a href="#3-特殊说明" class="headerlink" title="3.特殊说明"></a>3.特殊说明</h3><p>A.TextAppearnce</p><p>Toolbar当然也可以自定义样式，例如自定义Title字体大小,字体颜色等等基本信息，这时候会使用到一个属性<code>TextAppearance</code></p><p>TextAppearance：可以从新定义Style，接着看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;Toolbar.Title&quot; parent=&quot;@style/TextAppearance.Widget.AppCompat.Toolbar.Title&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:textSize&quot;&gt;22sp&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>其中上面中将字体大小已经字体颜色都改变。<br>特别说明，如果你前面已经定义了颜色后面又调用了TextAppearance，那面你之前设置都按照你新定义的Appearance来实现.</p><p>B.PopupStyle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;Toolbar.Popup&quot; parent=&quot;@style/Widget.AppCompat.PopupMenu.Overflow&quot;&gt;</div><div class="line">    &lt;item name=&quot;overlapAnchor&quot;&gt;false&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>默认情况overlapAnchor为true，而这样在弹出更多菜单的时候，会覆盖标题栏弹出，如果这是false则不会覆盖标题栏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文讲解的Toolbar为V7包中的Toolbar。此文会有很多不成熟地方，请大家指正。&lt;/p&gt;
&lt;h2 id=&quot;设置样式&quot;&gt;&lt;a href=&quot;#设置样式&quot; class=&quot;headerlink&quot; title=&quot;设置样式&quot;&gt;&lt;/a&gt;设置样式&lt;/h2&gt;&lt;p&gt;首先使用Toolba
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>App启动优化</title>
    <link href="https://chunyang1988.github.io/2017/08/11/AppStartup/"/>
    <id>https://chunyang1988.github.io/2017/08/11/AppStartup/</id>
    <published>2017-08-11T14:49:33.000Z</published>
    <updated>2018-01-18T09:46:52.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动白屏"><a href="#启动白屏" class="headerlink" title="启动白屏"></a>启动白屏</h2><p>每次令启动的时候，会出现一个白屏现象<br>引起原因：<br>1.Application的onCreate做了大量初始化操作；<br>建议：可以放到开始使用的地方初始化操作；<br>2.Activity的onCreate中有很多复杂布局与渲染操作；<br>建议：仅初始化自己需要的对象，xml布局减少嵌套布局；</p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>1.关闭启动窗口</p><p>建立style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme.Launcher&quot; parent=&quot;AppTheme&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:windowDisablePreview&quot;&gt;true&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>引用style，只需要在MAIN中引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">   android:theme=&quot;@style/AppTheme.Launcher&quot;</div><div class="line">   /&gt;</div></pre></td></tr></table></figure><p>这样做虽然没有白屏了，但是会出现点击桌面图标不会立即反应的现象。</p><p>2.使用Material Design规范</p><p>建立style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme.Launcher.MD&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/launch_material_design&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>这里面更上面不同的就是使用layer-list方式制作一个简单启动页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;启动白屏&quot;&gt;&lt;a href=&quot;#启动白屏&quot; class=&quot;headerlink&quot; title=&quot;启动白屏&quot;&gt;&lt;/a&gt;启动白屏&lt;/h2&gt;&lt;p&gt;每次令启动的时候，会出现一个白屏现象&lt;br&gt;引起原因：&lt;br&gt;1.Application的onCreate做了大量初始化操作
      
    
    </summary>
    
    
      <category term="Android" scheme="https://chunyang1988.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>炫酷终端</title>
    <link href="https://chunyang1988.github.io/2017/08/03/CoolShell/"/>
    <id>https://chunyang1988.github.io/2017/08/03/CoolShell/</id>
    <published>2017-08-03T07:14:41.000Z</published>
    <updated>2017-08-06T03:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文讲解的是通过<a href="http://ohmyz.sh/" target="_blank" rel="external">oh_my_zsh</a>来打造个性界面。<br>建议Mac系统使用<a href="https://www.iterm2.com/" target="_blank" rel="external">Iterm2</a> + <a href="http://ohmyz.sh/" target="_blank" rel="external">oh_my_zsh</a>进行打造炫酷终端。</p><h2 id="Installation-安装"><a href="#Installation-安装" class="headerlink" title="Installation 安装"></a>Installation 安装</h2><p>根据需求进行如下操作，如在终端中可以直接输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure><p>即可安装。</p><p>via curl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure><p>via wget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure><p>安装完成后，在用户目录有个隐藏文件夹<code>.oh-my-zsh</code>可以使用命令行查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.oh-my-zsh</div></pre></td></tr></table></figure><h2 id="Updates-升级"><a href="#Updates-升级" class="headerlink" title="Updates 升级"></a>Updates 升级</h2><p>默认情况下，系统会每隔几周检测升级，发现更新后提示用户进行更新。当然我们也可以关闭提示自动升级，还可以直接关闭自动升级功能。</p><ul><li>开关提示升级<br><code>DISABLE_UPDATE_PROMPT = true</code></li><li>开关自动升级<br><code>DISABLE_AUTO_UPDATE = true</code></li></ul><p>对<code>~/.zshrc</code>进行编辑。建议使用vi或者vim进行编辑更改。</p><p>手动升级<br>在终端中输入<code>upgrade_oh_my_zsh</code></p><h2 id="Edit-Themes-更换主题"><a href="#Edit-Themes-更换主题" class="headerlink" title="Edit Themes 更换主题"></a>Edit Themes 更换主题</h2><p>所有主题都在<code>~/.oh-my-zsh/themes</code>目录中，想要预览可以看<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="external">官网地址</a></p><p>更换主题以及操作升级开关，都是在<code>~/.zshrc</code>中进行编辑。</p><p>使用vi或者vim对<code>~/.zshrc</code>进行编辑 <code>ZSH_THEME=&quot;robbyrussell&quot;</code>等于号后面写上你要替换的主题名称即可。例如<code>ZSH_THEME=&quot;af-magic&quot;</code>。</p><h2 id="Uninstall-卸载"><a href="#Uninstall-卸载" class="headerlink" title="Uninstall 卸载"></a>Uninstall 卸载</h2><p>卸载oh_my_zsh只需要运行<code>uninstall_oh_my_zsh</code>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文讲解的是通过&lt;a href=&quot;http://ohmyz.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oh_my_zsh&lt;/a&gt;来打造个性界面。&lt;br&gt;建议Mac系统使用&lt;a href=&quot;https://www.iterm2.com/&quot; tar
      
    
    </summary>
    
      <category term="Tools" scheme="https://chunyang1988.github.io/categories/Tools/"/>
    
    
      <category term="Shell" scheme="https://chunyang1988.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客</title>
    <link href="https://chunyang1988.github.io/2017/08/01/Blog/"/>
    <id>https://chunyang1988.github.io/2017/08/01/Blog/</id>
    <published>2017-08-01T08:46:50.000Z</published>
    <updated>2017-08-07T13:51:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文讲解的搭建个人博客是通过<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> + <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>进行搭建。</p><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h2><p>安装前需要需要确定是否安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>以及<a href="https://git-scm.com/" target="_blank" rel="external">Git</a>，在此文我会重头一步一步安装操作。</p><h4 id="a-安装-Homebrew"><a href="#a-安装-Homebrew" class="headerlink" title="a.安装 Homebrew"></a>a.安装 Homebrew</h4><p>Homebrew是 macOS 缺失的软件包管理器，具体哪些好处问什么要安装还是自行搜索吧。</p><p>安装只需要在终端中输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure><p>安装成功后，直接就可以使用brew进行安装Node以及Git了，当然可以安装的还有很多东西，就不列举了。</p><h4 id="b-安装Node"><a href="#b-安装Node" class="headerlink" title="b.安装Node"></a>b.安装Node</h4><p>官网安装Node也可以，但是此文讲解的是通过brew进行安装，大家一起看看Homebrew的优点。</p><p>同样只需要在终端中输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure><h4 id="c-安装Git"><a href="#c-安装Git" class="headerlink" title="c.安装Git"></a>c.安装Git</h4><p>此处就不多说了直接上代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install git</div></pre></td></tr></table></figure><h4 id="d-安装Hexo"><a href="#d-安装Hexo" class="headerlink" title="d.安装Hexo"></a>d.安装Hexo</h4><p>至此准备工作都已经完成可以，开始安装Hex代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure><h2 id="2-建站"><a href="#2-建站" class="headerlink" title="2.建站"></a>2.建站</h2><p>初步环境都已经完成，剩下的就是建站了，运行一下命令即可完成建站操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure><p>并不一定非要按照上述代码去写，也可以这样写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">hexo init</div><div class="line">npm install</div></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir Blogs</div><div class="line">cd Blogs</div><div class="line">hexo init </div><div class="line">npm install</div></pre></td></tr></table></figure><p>完成后目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure><p>具体什么意思，这里面就不废话了，可以看<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="external">官网</a></p><h2 id="3-简单写作"><a href="#3-简单写作" class="headerlink" title="3.简单写作"></a>3.简单写作</h2><p>此处不会过度介绍，详情还是去看官网，在这里面只是简单介绍几种常用命令。</p><h4 id="a-新建文章"><a href="#a-新建文章" class="headerlink" title="a.新建文章"></a>a.新建文章</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure><p>其中<code>[layout]</code>有三种默认布局：<code>post</code>、<code>page</code>、<code>draft</code>，分别对应不同路径。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new blogs</div></pre></td></tr></table></figure><h4 id="b-更改主题"><a href="#b-更改主题" class="headerlink" title="b.更改主题"></a>b.更改主题</h4><p>使用maupassant主题为介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line">npm install hexo-renderer-jade@0.3.0 --save</div><div class="line">npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure><p>将主题下载到指定目录，更改配置文件<code>_config.ym</code>里面的theme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: maupassant</div></pre></td></tr></table></figure><p>每个主题安装方式不一样，具体的说明看官网更加详细。</p><h2 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h2><h4 id="a-创建Github-Pages"><a href="#a-创建Github-Pages" class="headerlink" title="a.创建Github Pages"></a>a.创建Github Pages</h4><p>这里面不多说，主要是创建一个yourName.github.io仓库</p><h4 id="b-部署Hexo到Github"><a href="#b-部署Hexo到Github" class="headerlink" title="b.部署Hexo到Github"></a>b.部署Hexo到Github</h4><p>这里面主要介绍使用hexo deploy部署到git上面</p><p>在配置文件<code>_config.yml</code>中配置deploy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:yuserName/yuserName.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:Chunyang1988/chunyang1988.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure><p>之后一件部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure><h4 id="c-添加SSH密钥"><a href="#c-添加SSH密钥" class="headerlink" title="c.添加SSH密钥"></a>c.添加SSH密钥</h4><p>生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;chunyang1988.cn@gmail.com&quot;</div></pre></td></tr></table></figure><p>为了方便在后面提示信息中，直接按回车，一直回车下来。</p><h4 id="d-部署"><a href="#d-部署" class="headerlink" title="d.部署"></a>d.部署</h4><p>部署前还需要安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><p>一般现在本地写好文章，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure><p>本地查看一下，如果可以，可以直接部署到git上面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这时候你输入自己的xxx.github.io即可查看自己的博客了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文讲解的搭建个人博客是通过&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;https://hexo.io/zh-cn/&quot; targ
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://chunyang1988.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
