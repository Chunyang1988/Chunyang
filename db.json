{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/weipayimg.png","path":"images/donate/weipayimg.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1516154311145},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1516154311145},{"_id":"themes/pure/README.cn.md","hash":"0506cfc397e98c2b027c710122b580dae09907a5","modified":1516154311146},{"_id":"themes/pure/README.md","hash":"89dd898e3bd98f063d1b9a2d6449d2692f1278fa","modified":1516154311146},{"_id":"themes/pure/_config.yml","hash":"b3479401a491758058d28ba6aeecd80fba41ce5e","modified":1516167148842},{"_id":"themes/pure/_config.yml.example","hash":"f76edf7878e3209d51dd4cf3d7972c231de8ce6a","modified":1516154311147},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1516154311171},{"_id":"source/.DS_Store","hash":"571b4e76e240ce4a441ed98c7e836751c29c9c2f","modified":1501945320000},{"_id":"source/CNAME","hash":"9179a02edf493c0e5c84c1f1977ca05604cebc45","modified":1502113571000},{"_id":"themes/pure/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1516154311138},{"_id":"themes/pure/.git/config","hash":"7ec6421043b0f1135362e6c04e1f42251478e733","modified":1516154311140},{"_id":"themes/pure/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1516154239031},{"_id":"themes/pure/.git/index","hash":"7fffe36ff290093bde4cd4bc9abc408410d7260c","modified":1516157394950},{"_id":"themes/pure/.git/packed-refs","hash":"ea7ef207f87ed9f62468657b5f79d7b9213ba967","modified":1516154311136},{"_id":"themes/pure/languages/default.yml","hash":"d911ec1d372ca8007a3c8afa30261bce162eeb82","modified":1516154311150},{"_id":"themes/pure/languages/en.yml","hash":"d911ec1d372ca8007a3c8afa30261bce162eeb82","modified":1516154311150},{"_id":"themes/pure/languages/zh-CN.yml","hash":"cbfc400d1d6fbab2e66e8f62667a5613725d3ccd","modified":1516154311151},{"_id":"themes/pure/languages/zh-TW.yml","hash":"5a33882faaedbbd1a8e631bc77597f8c2cf272c7","modified":1516154311151},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1516154311168},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1516154311168},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1516154311168},{"_id":"themes/pure/layout/categories.ejs","hash":"2084974ba68f799216a8b216752f7fc87c693cc0","modified":1516154311168},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1516154311169},{"_id":"themes/pure/layout/layout.ejs","hash":"1cde63939b8370addb37b4f1be96e6dad258ed0d","modified":1516154311169},{"_id":"themes/pure/layout/category.ejs","hash":"68632e8ac45088a929ca82b6cca8ba60323d6aac","modified":1516154311168},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1516154311169},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1516154311170},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1516154311170},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1516154311170},{"_id":"themes/pure/layout/tag.ejs","hash":"6e4e6660cf58beb3e5e2e52b59c51393e4796c36","modified":1516154311170},{"_id":"themes/pure/layout/tags.ejs","hash":"4c0b797a45cf238be367932927edc88599aa3255","modified":1516154311170},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1516154311191},{"_id":"themes/pure/source/favicon.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1516154311192},{"_id":"source/_posts/.DS_Store","hash":"1e8f0bd213cf5fa7459ca78d305beaec554dc720","modified":1507720362000},{"_id":"source/_posts/Android-SdkVersion.md","hash":"3565b8fbcd1fe8f7e8aa02b7aa5d1f9c204664ed","modified":1516350614698},{"_id":"source/_posts/Android-Service.md","hash":"ea4edb0eb002003dd658c408e1f7da05f26e784e","modified":1516270766954},{"_id":"source/_posts/Android-SmartScale.md","hash":"8ad0869d74afb36913edd4a1cf4fbf5637260a3f","modified":1516270751548},{"_id":"source/_posts/AppStartup.md","hash":"298cea76a74ee575d40aaa2355303cc61e14689a","modified":1516268812116},{"_id":"source/_posts/Blog.md","hash":"d4582e28474e1d6ac46c1378306ebba04ff6f1cc","modified":1502113873000},{"_id":"source/_posts/CoolShell.md","hash":"9616854169a33a0863015d162dd2fa7b58209f8b","modified":1501988882000},{"_id":"source/_posts/DataBinding.md","hash":"6954eed0cff7b795cbba74b5a9a36b9999c82b5f","modified":1516268922221},{"_id":"source/_posts/Dagger2Simple.md","hash":"9bcfd3ec9258b380ef76c0eb428bf11941a74f08","modified":1516268983925},{"_id":"source/_posts/Fragment-Base.md","hash":"1b1756553c11a03da02ee602f39c5fdd9843937a","modified":1516355734438},{"_id":"source/_posts/Gradlew.md","hash":"a993e5f6b1e103f4b932cad828455bfeb0391a09","modified":1516268896148},{"_id":"source/_posts/RaspberryPIInstallStep.md","hash":"e4385869d0a08d4e8281ab25677ac07cc5b95098","modified":1516268957048},{"_id":"source/_posts/ToolBar.md","hash":"1d1e03662e9d98108ef7cb6635deba3818f03ad3","modified":1516268845847},{"_id":"source/_posts/SelfPermission.md","hash":"943887e46f391321a942d7a3b9f8fefc82f78877","modified":1516268873803},{"_id":"source/_posts/adb-command.md","hash":"ee9a1d9c3a6ae846a57dc1e20b077ed14704dc80","modified":1516269067084},{"_id":"source/about/index.md","hash":"7bf12143f0085325e13047030f6918c89c328ac5","modified":1501772654000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1516154311172},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1516154311173},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1516154311174},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1516154311175},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1516154311177},{"_id":"themes/pure/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1516154239033},{"_id":"themes/pure/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1516154239032},{"_id":"themes/pure/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1516154239034},{"_id":"themes/pure/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1516154239034},{"_id":"themes/pure/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1516154239032},{"_id":"themes/pure/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1516154239034},{"_id":"themes/pure/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1516154239032},{"_id":"themes/pure/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1516154239033},{"_id":"themes/pure/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1516154239033},{"_id":"themes/pure/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1516154239034},{"_id":"themes/pure/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1516154239031},{"_id":"themes/pure/.git/logs/HEAD","hash":"be5931a664e1c2ec5e7b10c0527d82fcaaf76ddb","modified":1516154311139},{"_id":"themes/pure/_source/404/index.md","hash":"d18cc3c0de0f8333c78239bbeecba816f08e0692","modified":1516154311147},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1516154311148},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1516154311148},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1516154311148},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1516154311149},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1516154311149},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1516154311149},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1516154311149},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1516154311150},{"_id":"themes/pure/layout/_common/header.ejs","hash":"595c60cce58ee0ac08c805ef2b822ba835926d2c","modified":1516154311152},{"_id":"themes/pure/layout/_common/head.ejs","hash":"edf1798f619f247d49e260da7d67492bf59bd2c2","modified":1516154311151},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1516154311151},{"_id":"themes/pure/layout/_common/plugin.ejs","hash":"90b50b052daf24394e84f747c5ebc639752e9731","modified":1516154311152},{"_id":"themes/pure/layout/_common/script.ejs","hash":"5963fdc39a925c6961c7c360776f09be7ba81c43","modified":1516154311152},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"420dd18d8ea730065d20fee2bf7a7a9879a847cb","modified":1516154311153},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1516154311152},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1516154311154},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1516154311154},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1516154311153},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1516154311153},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1516154311154},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1516154311155},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1516154311155},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1516154311155},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"11b36cdc807ec20470828385b4a590ffbf7ae1d9","modified":1516154311155},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"e2126d1cf62861b67c3a9946e2e3e47c84174a87","modified":1516154311156},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"ce1492c39a9d73c6dbcc3993e705a2526bbab79b","modified":1516154311156},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1516154311160},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1516154311160},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1516154311160},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1516154311164},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1516154311164},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1516154311165},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1516154311164},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"bd5dbd41017286379c6549405b450227ee4645bc","modified":1516154311164},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1516154311165},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1516154311165},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1516154311165},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1516154311166},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1516154311166},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9d8ade7163bf6c7059e67b3320a33d64fcc5afde","modified":1516154311166},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1516154311166},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1516154311167},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1516154311167},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1516154311167},{"_id":"themes/pure/source/images/.DS_Store","hash":"fbd5a049c0f2f38e2a66300a03a33b6440205e8a","modified":1516155934465},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1516154311197},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1516154311199},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1516154311193},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1516154311193},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1516154311196},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1516154311197},{"_id":"themes/pure/source/js/application.js","hash":"cd1b8d06880ab1b80d45c8f53b53a23b6b8fb7ac","modified":1516154311200},{"_id":"themes/pure/source/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1516154311200},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1516154311200},{"_id":"themes/pure/source/js/plugin.min.js","hash":"7970a38501066965aae8272299ccd0bcb1614d30","modified":1516154311202},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1516154311201},{"_id":"themes/pure/.git/refs/heads/master","hash":"ce8151129b242b983f344bc4fcb3c72330a9fcc5","modified":1516154311139},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1516154311156},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1516154311157},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"78136b1fa31e2be32beddfc308f6b90f85cdacbf","modified":1516154311157},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"a4f8b53225265b0370824eda6b44d4427c98006d","modified":1516154311157},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1516154311157},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1516154311158},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"2146cc9fcb2e135815acf0d0b5ad2c183f8ad58f","modified":1516154311158},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"7d63de4625310f9f619ac31ddd492c79d6d02cff","modified":1516154311158},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1516154311159},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1516154311159},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1516154311159},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1516154311159},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1516154311161},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1516154311161},{"_id":"themes/pure/layout/_script/_analytics/script.ejs","hash":"c5aa37346d973437d0a693f8dd345a0b87edfe6f","modified":1516154311161},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"dee9c2adc0df37c7e1edb617ba92983eee3f3c8e","modified":1516154311161},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"09e66c8bfd1cc0507a0da619f56101423b9e653a","modified":1516154311162},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"c951b2fac4e143c0a2fb4fd3369307f23cfe2687","modified":1516154311162},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"b30ced7d02e63c64227139aa4b99286400d7bcea","modified":1516154311162},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1516154311163},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"92d897be24e8c520c5a3f8903c542892e2b30a9a","modified":1516154311163},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1516154311163},{"_id":"themes/pure/layout/_script/_comment/script.ejs","hash":"ee1cf9c35e51d21a170a7ac5f43e63c2bf777448","modified":1516154311162},{"_id":"themes/pure/source/css/style.css","hash":"75aa14bc1efb820db46c3eb0b9a33811cbd4f024","modified":1516154311192},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1516154311199},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1516154311199},{"_id":"themes/pure/source/images/donate/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516156673981},{"_id":"themes/pure/source/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1516154311197},{"_id":"themes/pure/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1516154311198},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"cfb4b76ae705fcc3e279104bec956f9a398f8518","modified":1516154311196},{"_id":"themes/pure/.git/objects/pack/pack-b9a32d2bdd2da09f1d7bf2044756e3d441e2bd53.idx","hash":"285620e02b51a7a76aa7622c082c9e52c0983bee","modified":1516154311124},{"_id":"themes/pure/.git/logs/refs/heads/master","hash":"be5931a664e1c2ec5e7b10c0527d82fcaaf76ddb","modified":1516154311139},{"_id":"themes/pure/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1516154311138},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"770efee0d6412e65e8bfa8d4fc50d0a32b3b931e","modified":1516156739541},{"_id":"themes/pure/source/images/donate/weipayimg.png","hash":"88bcf90bf5c596b16d70e6b880dd6fee7ece5eb5","modified":1516156513134},{"_id":"themes/pure/.git/logs/refs/remotes/origin/HEAD","hash":"be5931a664e1c2ec5e7b10c0527d82fcaaf76ddb","modified":1516154311137},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1516154311190},{"_id":"themes/pure/.git/objects/pack/pack-b9a32d2bdd2da09f1d7bf2044756e3d441e2bd53.pack","hash":"22013d94aef7cd1aa2060d16a5110bd80e8a5db4","modified":1516154311122}],"Category":[{"name":"Tools","_id":"cjclr21dj000dj0fyxhhsiu99"},{"name":"Android","_id":"cjclr21dr000rj0fywbtan4je"}],"Data":[],"Page":[{"title":"关于","type":"about","comments":0,"_content":"\n<h3 id=\"toc_0\">chunyang1988，一个98年出生的小伙</h3>\n\n<ul>\n<li>只是想弄一个博客，写写日记，写写技术而已</li>\n<li>让自己有件事情做，不停的思考与进步</li>\n<li>没有太多功底，一步一步开始学习</li>\n<li>不想说太多，希望能够进步</li>\n<li>一切皆有可能</li>\n<li>相信自己</li>\n</ul>\n\n\n\n","source":"about/index.md","raw":"title: 关于\ntype: \"about\"\ncomments: false\n---\n\n<h3 id=\"toc_0\">chunyang1988，一个98年出生的小伙</h3>\n\n<ul>\n<li>只是想弄一个博客，写写日记，写写技术而已</li>\n<li>让自己有件事情做，不停的思考与进步</li>\n<li>没有太多功底，一步一步开始学习</li>\n<li>不想说太多，希望能够进步</li>\n<li>一切皆有可能</li>\n<li>相信自己</li>\n</ul>\n\n\n\n","date":"2017-08-03T15:04:14.000Z","updated":"2017-08-03T15:04:14.000Z","path":"about/index.html","layout":"page","_id":"cjclr21cx0001j0fyqls16i3u","content":"<h3 id=\"toc_0\">chunyang1988，一个98年出生的小伙</h3>\n\n<ul><br><li>只是想弄一个博客，写写日记，写写技术而已</li><br><li>让自己有件事情做，不停的思考与进步</li><br><li>没有太多功底，一步一步开始学习</li><br><li>不想说太多，希望能够进步</li><br><li>一切皆有可能</li><br><li>相信自己</li><br></ul>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"toc_0\">chunyang1988，一个98年出生的小伙</h3>\n\n<ul><br><li>只是想弄一个博客，写写日记，写写技术而已</li><br><li>让自己有件事情做，不停的思考与进步</li><br><li>没有太多功底，一步一步开始学习</li><br><li>不想说太多，希望能够进步</li><br><li>一切皆有可能</li><br><li>相信自己</li><br></ul>\n\n\n\n"}],"Post":[{"title":"Android各种SdkVersion理解","date":"2017-11-09T08:26:33.000Z","_content":"\n\n## 关键字\n* minSdkVersion\n* compileSdkVersion\n* targetSdkVersion\n\n## 学习目标\n了解各种sdkVersion具体意思。\n## 正文\nGoogle 官方发布[文章](https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd#.egywqatjg) 解析compileSdkVersion、minSdkVersion 以及 targetSdkVersion 的含义，以及合理设置各个值的意义，还有[翻译](https://chinagdg.org/2016/01/picking-your-compilesdkversion-minsdkversion-targetsdkversion/)\n### minSdkVersion\n设置应用可运行最低版本，如果系统的 API 高于该值，则系统会阻止程序安装。\n### compileSdkVersion\n设置编辑版本，也就是告诉 Gradle 用哪个 Android SDK 版本编译你的应用，一般都是选择最新的SDK。\n\n当你修改了 compileSdkVersion 的时候，可能会出现新的编译警告、编译错误，但新的 compileSdkVersion 不会被包含到 APK 中：它纯粹只是在编译的时候使用。（你真的应该修复这些警告，他们的出现一定是有原因的）。\n\n在这里需要注意的是，编译报错的时候，一定要得到注意，根据提示来做兼容设置，例如判断Build.VERSION_SDK_INT常量表示当前Android设备的版本号来比对，使用不同的兼容方案。\n### targetSdkVersion\ntargetSdkVersion 是 Android 提供向前兼容的主要依据，**在应用的 targetSdkVersion 没有更新之前系统不会应用最新的行为变化**。\n\n怎么理解这句话呢？如果设备API等于 targetSdkVersion 就是告知当前项目已经兼容新的行为变化。\n","source":"_posts/Android-SdkVersion.md","raw":"---\ntitle: Android各种SdkVersion理解\ndate: 2017-11-9 16:26:33\ntags: [Android]\n---\n\n\n## 关键字\n* minSdkVersion\n* compileSdkVersion\n* targetSdkVersion\n\n## 学习目标\n了解各种sdkVersion具体意思。\n## 正文\nGoogle 官方发布[文章](https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd#.egywqatjg) 解析compileSdkVersion、minSdkVersion 以及 targetSdkVersion 的含义，以及合理设置各个值的意义，还有[翻译](https://chinagdg.org/2016/01/picking-your-compilesdkversion-minsdkversion-targetsdkversion/)\n### minSdkVersion\n设置应用可运行最低版本，如果系统的 API 高于该值，则系统会阻止程序安装。\n### compileSdkVersion\n设置编辑版本，也就是告诉 Gradle 用哪个 Android SDK 版本编译你的应用，一般都是选择最新的SDK。\n\n当你修改了 compileSdkVersion 的时候，可能会出现新的编译警告、编译错误，但新的 compileSdkVersion 不会被包含到 APK 中：它纯粹只是在编译的时候使用。（你真的应该修复这些警告，他们的出现一定是有原因的）。\n\n在这里需要注意的是，编译报错的时候，一定要得到注意，根据提示来做兼容设置，例如判断Build.VERSION_SDK_INT常量表示当前Android设备的版本号来比对，使用不同的兼容方案。\n### targetSdkVersion\ntargetSdkVersion 是 Android 提供向前兼容的主要依据，**在应用的 targetSdkVersion 没有更新之前系统不会应用最新的行为变化**。\n\n怎么理解这句话呢？如果设备API等于 targetSdkVersion 就是告知当前项目已经兼容新的行为变化。\n","slug":"Android-SdkVersion","published":1,"updated":"2018-01-19T08:30:14.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21cu0000j0fybmsks97a","content":"<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><ul>\n<li>minSdkVersion</li>\n<li>compileSdkVersion</li>\n<li>targetSdkVersion</li>\n</ul>\n<h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><p>了解各种sdkVersion具体意思。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>Google 官方发布<a href=\"https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd#.egywqatjg\" target=\"_blank\" rel=\"external\">文章</a> 解析compileSdkVersion、minSdkVersion 以及 targetSdkVersion 的含义，以及合理设置各个值的意义，还有<a href=\"https://chinagdg.org/2016/01/picking-your-compilesdkversion-minsdkversion-targetsdkversion/\" target=\"_blank\" rel=\"external\">翻译</a></p>\n<h3 id=\"minSdkVersion\"><a href=\"#minSdkVersion\" class=\"headerlink\" title=\"minSdkVersion\"></a>minSdkVersion</h3><p>设置应用可运行最低版本，如果系统的 API 高于该值，则系统会阻止程序安装。</p>\n<h3 id=\"compileSdkVersion\"><a href=\"#compileSdkVersion\" class=\"headerlink\" title=\"compileSdkVersion\"></a>compileSdkVersion</h3><p>设置编辑版本，也就是告诉 Gradle 用哪个 Android SDK 版本编译你的应用，一般都是选择最新的SDK。</p>\n<p>当你修改了 compileSdkVersion 的时候，可能会出现新的编译警告、编译错误，但新的 compileSdkVersion 不会被包含到 APK 中：它纯粹只是在编译的时候使用。（你真的应该修复这些警告，他们的出现一定是有原因的）。</p>\n<p>在这里需要注意的是，编译报错的时候，一定要得到注意，根据提示来做兼容设置，例如判断Build.VERSION_SDK_INT常量表示当前Android设备的版本号来比对，使用不同的兼容方案。</p>\n<h3 id=\"targetSdkVersion\"><a href=\"#targetSdkVersion\" class=\"headerlink\" title=\"targetSdkVersion\"></a>targetSdkVersion</h3><p>targetSdkVersion 是 Android 提供向前兼容的主要依据，<strong>在应用的 targetSdkVersion 没有更新之前系统不会应用最新的行为变化</strong>。</p>\n<p>怎么理解这句话呢？如果设备API等于 targetSdkVersion 就是告知当前项目已经兼容新的行为变化。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><ul>\n<li>minSdkVersion</li>\n<li>compileSdkVersion</li>\n<li>targetSdkVersion</li>\n</ul>\n<h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><p>了解各种sdkVersion具体意思。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>Google 官方发布<a href=\"https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd#.egywqatjg\" target=\"_blank\" rel=\"external\">文章</a> 解析compileSdkVersion、minSdkVersion 以及 targetSdkVersion 的含义，以及合理设置各个值的意义，还有<a href=\"https://chinagdg.org/2016/01/picking-your-compilesdkversion-minsdkversion-targetsdkversion/\" target=\"_blank\" rel=\"external\">翻译</a></p>\n<h3 id=\"minSdkVersion\"><a href=\"#minSdkVersion\" class=\"headerlink\" title=\"minSdkVersion\"></a>minSdkVersion</h3><p>设置应用可运行最低版本，如果系统的 API 高于该值，则系统会阻止程序安装。</p>\n<h3 id=\"compileSdkVersion\"><a href=\"#compileSdkVersion\" class=\"headerlink\" title=\"compileSdkVersion\"></a>compileSdkVersion</h3><p>设置编辑版本，也就是告诉 Gradle 用哪个 Android SDK 版本编译你的应用，一般都是选择最新的SDK。</p>\n<p>当你修改了 compileSdkVersion 的时候，可能会出现新的编译警告、编译错误，但新的 compileSdkVersion 不会被包含到 APK 中：它纯粹只是在编译的时候使用。（你真的应该修复这些警告，他们的出现一定是有原因的）。</p>\n<p>在这里需要注意的是，编译报错的时候，一定要得到注意，根据提示来做兼容设置，例如判断Build.VERSION_SDK_INT常量表示当前Android设备的版本号来比对，使用不同的兼容方案。</p>\n<h3 id=\"targetSdkVersion\"><a href=\"#targetSdkVersion\" class=\"headerlink\" title=\"targetSdkVersion\"></a>targetSdkVersion</h3><p>targetSdkVersion 是 Android 提供向前兼容的主要依据，<strong>在应用的 targetSdkVersion 没有更新之前系统不会应用最新的行为变化</strong>。</p>\n<p>怎么理解这句话呢？如果设备API等于 targetSdkVersion 就是告知当前项目已经兼容新的行为变化。</p>\n"},{"title":"Android 屏幕适配","date":"2017-10-30T10:07:31.000Z","_content":" \n> **版权声明：本文转载自Android大牛[stormzhang](http://stormzhang.com/android/2014/05/16/android-screen-adaptation/) 原创文章，可以随意转载，但请必须在明确位置注明出处！！！**\n\n众所周知，Android机型尺寸各种各样，于是屏幕适配就成了Android开发中很重要的一环。Android屏幕适配可能一些开发者都会遇到这样的问题，今天就来分享下屏幕适配，你会发现其实Android屏幕适配也可以很简单。\n\n## 基本概念\n\nAndroid屏幕适配必须要理解的一些概念，这部分可能比较枯燥，但是俗话说的好“工欲善其事，必先利器”，翻译过来就是“有什么样的枪，决定你打什么样的鸟”，一旦这些概念你理解掌握了，屏幕适配你自然而然就觉得简单多了。\n\n* px\n\n是英文单词pixel的缩写，意为像素，屏幕上的点。我们通常所说的分辨率如480X800就是指的像素。\n\n在设计领域中，像素是用来计算数码影像的最小单位。计算机中显示的图像并非连续的线条组成，而是由许多肉眼看不见的小点组成。如果把影像放大数倍，会发现这些连续色调其实是由许多色彩相近的小点所组成，这些小点就是构成影像的最小单位“像素”。由于是最小的独立显示单位，px均为整数，不会出现0.5px的情况。如：\n\n看这个色彩鲜艳的LED灯（原图大小）\n\n![](http://stormzhang.com/image/pixel_origin.png)\n\n你能想象这才是他的本来面目吗？（放大之后）\n\n![](http://stormzhang.com/image/pixel_scale.jpeg)\n\n* in\n\n表示英寸，是屏幕的物理尺寸。每英寸等于2.54厘米。例如我们经常说的手机屏幕大小有，5（英）寸、4（英）寸就是指这个单位。这些尺寸是屏幕的对角线长度。如果手机的屏幕是4英寸，表示手机的屏幕（可视区域）对角线长度是4 X 2.54 = 10.16厘米。\n\n* dpi\n\ndpi是Dots Per Inch的缩写, 每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。\n\n* density\n\n屏幕密度，density和dpi的关系为 density = dpi/160\n\n* dp\n\n也即dip，设备独立像素，device independent pixels的缩写，Android特有的单位，在屏幕密度dpi = 160屏幕上，1dp = 1px。\n\n* sp\n\n和dp很类似，一般用来设置字体大小，和dp的区别是它可以根据用户的字体大小偏好来缩放。\n\n## Android Drawable\n\n我们新建一个Android项目后应该可以看到很多drawable文件夹，分别对应不同的dpi\n\n* drawable-ldpi (dpi=120, density=0.75)\n\n* drawable-mdpi (dpi=160, density=1)\n\n* drawable-hdpi (dpi=240, density=1.5)\n\n* drawable-xhdpi (dpi=320, density=2)\n\n* drawable-xxhdpi (dpi=480, density=3)\n\n市面上的一些Android教程大多都是教的是为每种dpi都出一套图片资源，这个固然是一种解决办法，但同时也是一种非常笨的方法，为美工或者设计增加了不少的工作量不说，同时也会让你的apk包变的很大。那么有没有什么好的方法既能保证屏幕适配，又可以最小占用设计资源，同时最好又只使用一套dpi的图片资源呢？下面就来讲解下项目中总结出来的这个方法。\n\n首先必须清楚一个自动渲染的概念，Android SDK会自动屏幕尺寸选择对应的资源文件进行渲染，如SDK检测到你手机dpi是160的话会优先到drawable-mdpi文件夹下找对应的图片资源，注意只是优先，假设你手机dpi是160，但是你只在xhpdi文件夹下有对应的图片资源文件，程序一样可以正常运行。所以理论上来说只需要提供一种规格的图片资源就ok了，如果只提供ldpi规格的图片，对于大分辨率的手机如果把图片放大就会不清晰，所以需要提供一套你需要支持的最大dpi的图片，这样即使用户的手机分辨率很小，这样图片缩小依然很清晰。\n\n## xhdpi成为首选\n\n上面说了只需要提供一套大的dpi的图片就ok了，现在市面手机分辨率最大可达到1080X1920的分辨率，如Nexus5，dpi属于xxhdpi，但是毕竟还没普及，目前市面上最普遍的高端机的分辨率还多集中在720X1080范围，也就是多集中在xhdpi，所以目前来看xhpdi规格的图片成为了首选。当然随着技术规格的提高以后发展，以后可能市场上xxdpi的手机会越来越普遍，但这是后话。\n\n## 设计资源紧张怎么办？\n\n在现在的App开发中，基本都会有iOS和Android版本，有些公司为了保持App不同版本的体验交互一致，还有些公司的设计资源可能比较紧张，这些情况下iOS和Android版本基本是一个设计师主导，而大多数情况下设计师可能更会以iPhone手机为基础进行设计，包括后期的切图之类的。这个时候身为Android开发人员你是否还要求设计师单独为Android端切一套图片资源呢？这会让你们的设计师崩溃的，下面就来告诉一个项目中总结的更棒的方法。\n\n相信设计师们一般都会用最新的iPhone5（5s和5的尺寸以及分辨率都一样）来做原型设计，而iPhone5的屏幕分辨率为640X1164, 屏幕尺寸为4英寸，根据勾股定理(a^2 + b^2 = c^2)640^2+1164^2=1764496, 然后再对其开根号可求出屏幕对角线的分辨率为：1328，除以4可得出iphone5的dpi：1328/4≈332 可以看出iPhone5的屏幕的dpi约等于320, 刚好属于xhdpi，所以你可以很自豪的像你们的设计师说不用专门为Android端切图，直接把iPhone的那一套切好的图片资源放入drawable-xhdpi文件夹里就ok了。\n\n## wrap_content VS dp\n\nwrap_content和dp都是在Android开发中应该经常用到的，然后它们冥冥中是有关系的。\n\n假设你看了这篇文章后都是统一有xhdpi的资源，那么你用wrap_content完全没有问题，Android会自动为其他规格的dpi屏幕适配,比如你在xhdpi放了一张120X120px大小的图片，那么在在hdpi屏幕上显示的就只有120/2*1.5=90px大小，但是如果你不小心同样把这张图片也放入了mdpi了，这个时候用wrap_content显示就会有问题，具体看下面的例子：\n\n例如假设你只在drawable_xhdpi文件夹下放了test图片，xhdpi的设备会去xhdpi文件夹下找到test图片并直接显示，而mdpi的设备优先会去mdpi文件夹里查找test图片，但是没找到，最后在xhdpi文件夹下找到，然后会自动根据density计算并缩放显示出来，实际显示出来的大小是120/2=60px, 所以整体的显示比例才会看起来比较正常\n\n* mdpi\n\n![](http://stormzhang.com/image/mdpi_test.png)\n\n* xhdpi\n\n![](http://stormzhang.com/image/xhdpi_test.png)\n\n但是如果你在mdpi文件夹里也放入了同样的图片，那么mdpi的设备会直接去mdpi文件夹里寻找到test图片，并直接显示，而这时候显示不会缩放，实际显示大小就是120X120,在mdpi的屏幕上看起来就会比较大，如图：\n\n![](http://stormzhang.com/image/mdpi_test2.png)\n\n通过上面整个过程，大家应该理解了Android加载资源的整个过程, wrap_content同样可以用dp来代替，就拿上面这个例子，在xhdpi文件夹内放入了一张120X120像素的test图片，宽高直接除density就得出dp的数值，即这种情况下以下代码是等同的.\n\n\n\n```\n<ImageView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:src=\"@drawable/test\" />\n```\n\n\n\n\n\n```\n<ImageView\n    android:layout_width=\"60dp\"\n    android:layout_height=\"60dp\"\n    android:src=\"@drawable/test\" />\n```\n\n\n\n## 总结\n\n相信通过以上的讲解，对Android UI中的一些基本概念有个很好的理解，实际开发工作中也有一些高效的方法可以参考，应该可以应对大部分的屏幕适配工作。但是项目中仍然有一些比较特殊的适配需求满足不了，以后会针对一些特殊的需求进行示例讲解。\n","source":"_posts/Android-SmartScale.md","raw":"---\ntitle: Android 屏幕适配\ndate: 2017-10-30 18:07:31\ntags: [Android]\n---\n \n> **版权声明：本文转载自Android大牛[stormzhang](http://stormzhang.com/android/2014/05/16/android-screen-adaptation/) 原创文章，可以随意转载，但请必须在明确位置注明出处！！！**\n\n众所周知，Android机型尺寸各种各样，于是屏幕适配就成了Android开发中很重要的一环。Android屏幕适配可能一些开发者都会遇到这样的问题，今天就来分享下屏幕适配，你会发现其实Android屏幕适配也可以很简单。\n\n## 基本概念\n\nAndroid屏幕适配必须要理解的一些概念，这部分可能比较枯燥，但是俗话说的好“工欲善其事，必先利器”，翻译过来就是“有什么样的枪，决定你打什么样的鸟”，一旦这些概念你理解掌握了，屏幕适配你自然而然就觉得简单多了。\n\n* px\n\n是英文单词pixel的缩写，意为像素，屏幕上的点。我们通常所说的分辨率如480X800就是指的像素。\n\n在设计领域中，像素是用来计算数码影像的最小单位。计算机中显示的图像并非连续的线条组成，而是由许多肉眼看不见的小点组成。如果把影像放大数倍，会发现这些连续色调其实是由许多色彩相近的小点所组成，这些小点就是构成影像的最小单位“像素”。由于是最小的独立显示单位，px均为整数，不会出现0.5px的情况。如：\n\n看这个色彩鲜艳的LED灯（原图大小）\n\n![](http://stormzhang.com/image/pixel_origin.png)\n\n你能想象这才是他的本来面目吗？（放大之后）\n\n![](http://stormzhang.com/image/pixel_scale.jpeg)\n\n* in\n\n表示英寸，是屏幕的物理尺寸。每英寸等于2.54厘米。例如我们经常说的手机屏幕大小有，5（英）寸、4（英）寸就是指这个单位。这些尺寸是屏幕的对角线长度。如果手机的屏幕是4英寸，表示手机的屏幕（可视区域）对角线长度是4 X 2.54 = 10.16厘米。\n\n* dpi\n\ndpi是Dots Per Inch的缩写, 每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。\n\n* density\n\n屏幕密度，density和dpi的关系为 density = dpi/160\n\n* dp\n\n也即dip，设备独立像素，device independent pixels的缩写，Android特有的单位，在屏幕密度dpi = 160屏幕上，1dp = 1px。\n\n* sp\n\n和dp很类似，一般用来设置字体大小，和dp的区别是它可以根据用户的字体大小偏好来缩放。\n\n## Android Drawable\n\n我们新建一个Android项目后应该可以看到很多drawable文件夹，分别对应不同的dpi\n\n* drawable-ldpi (dpi=120, density=0.75)\n\n* drawable-mdpi (dpi=160, density=1)\n\n* drawable-hdpi (dpi=240, density=1.5)\n\n* drawable-xhdpi (dpi=320, density=2)\n\n* drawable-xxhdpi (dpi=480, density=3)\n\n市面上的一些Android教程大多都是教的是为每种dpi都出一套图片资源，这个固然是一种解决办法，但同时也是一种非常笨的方法，为美工或者设计增加了不少的工作量不说，同时也会让你的apk包变的很大。那么有没有什么好的方法既能保证屏幕适配，又可以最小占用设计资源，同时最好又只使用一套dpi的图片资源呢？下面就来讲解下项目中总结出来的这个方法。\n\n首先必须清楚一个自动渲染的概念，Android SDK会自动屏幕尺寸选择对应的资源文件进行渲染，如SDK检测到你手机dpi是160的话会优先到drawable-mdpi文件夹下找对应的图片资源，注意只是优先，假设你手机dpi是160，但是你只在xhpdi文件夹下有对应的图片资源文件，程序一样可以正常运行。所以理论上来说只需要提供一种规格的图片资源就ok了，如果只提供ldpi规格的图片，对于大分辨率的手机如果把图片放大就会不清晰，所以需要提供一套你需要支持的最大dpi的图片，这样即使用户的手机分辨率很小，这样图片缩小依然很清晰。\n\n## xhdpi成为首选\n\n上面说了只需要提供一套大的dpi的图片就ok了，现在市面手机分辨率最大可达到1080X1920的分辨率，如Nexus5，dpi属于xxhdpi，但是毕竟还没普及，目前市面上最普遍的高端机的分辨率还多集中在720X1080范围，也就是多集中在xhdpi，所以目前来看xhpdi规格的图片成为了首选。当然随着技术规格的提高以后发展，以后可能市场上xxdpi的手机会越来越普遍，但这是后话。\n\n## 设计资源紧张怎么办？\n\n在现在的App开发中，基本都会有iOS和Android版本，有些公司为了保持App不同版本的体验交互一致，还有些公司的设计资源可能比较紧张，这些情况下iOS和Android版本基本是一个设计师主导，而大多数情况下设计师可能更会以iPhone手机为基础进行设计，包括后期的切图之类的。这个时候身为Android开发人员你是否还要求设计师单独为Android端切一套图片资源呢？这会让你们的设计师崩溃的，下面就来告诉一个项目中总结的更棒的方法。\n\n相信设计师们一般都会用最新的iPhone5（5s和5的尺寸以及分辨率都一样）来做原型设计，而iPhone5的屏幕分辨率为640X1164, 屏幕尺寸为4英寸，根据勾股定理(a^2 + b^2 = c^2)640^2+1164^2=1764496, 然后再对其开根号可求出屏幕对角线的分辨率为：1328，除以4可得出iphone5的dpi：1328/4≈332 可以看出iPhone5的屏幕的dpi约等于320, 刚好属于xhdpi，所以你可以很自豪的像你们的设计师说不用专门为Android端切图，直接把iPhone的那一套切好的图片资源放入drawable-xhdpi文件夹里就ok了。\n\n## wrap_content VS dp\n\nwrap_content和dp都是在Android开发中应该经常用到的，然后它们冥冥中是有关系的。\n\n假设你看了这篇文章后都是统一有xhdpi的资源，那么你用wrap_content完全没有问题，Android会自动为其他规格的dpi屏幕适配,比如你在xhdpi放了一张120X120px大小的图片，那么在在hdpi屏幕上显示的就只有120/2*1.5=90px大小，但是如果你不小心同样把这张图片也放入了mdpi了，这个时候用wrap_content显示就会有问题，具体看下面的例子：\n\n例如假设你只在drawable_xhdpi文件夹下放了test图片，xhdpi的设备会去xhdpi文件夹下找到test图片并直接显示，而mdpi的设备优先会去mdpi文件夹里查找test图片，但是没找到，最后在xhdpi文件夹下找到，然后会自动根据density计算并缩放显示出来，实际显示出来的大小是120/2=60px, 所以整体的显示比例才会看起来比较正常\n\n* mdpi\n\n![](http://stormzhang.com/image/mdpi_test.png)\n\n* xhdpi\n\n![](http://stormzhang.com/image/xhdpi_test.png)\n\n但是如果你在mdpi文件夹里也放入了同样的图片，那么mdpi的设备会直接去mdpi文件夹里寻找到test图片，并直接显示，而这时候显示不会缩放，实际显示大小就是120X120,在mdpi的屏幕上看起来就会比较大，如图：\n\n![](http://stormzhang.com/image/mdpi_test2.png)\n\n通过上面整个过程，大家应该理解了Android加载资源的整个过程, wrap_content同样可以用dp来代替，就拿上面这个例子，在xhdpi文件夹内放入了一张120X120像素的test图片，宽高直接除density就得出dp的数值，即这种情况下以下代码是等同的.\n\n\n\n```\n<ImageView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:src=\"@drawable/test\" />\n```\n\n\n\n\n\n```\n<ImageView\n    android:layout_width=\"60dp\"\n    android:layout_height=\"60dp\"\n    android:src=\"@drawable/test\" />\n```\n\n\n\n## 总结\n\n相信通过以上的讲解，对Android UI中的一些基本概念有个很好的理解，实际开发工作中也有一些高效的方法可以参考，应该可以应对大部分的屏幕适配工作。但是项目中仍然有一些比较特殊的适配需求满足不了，以后会针对一些特殊的需求进行示例讲解。\n","slug":"Android-SmartScale","published":1,"updated":"2018-01-18T10:19:11.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21cz0002j0fyhea6crli","content":"<blockquote>\n<p><strong>版权声明：本文转载自Android大牛<a href=\"http://stormzhang.com/android/2014/05/16/android-screen-adaptation/\" target=\"_blank\" rel=\"external\">stormzhang</a> 原创文章，可以随意转载，但请必须在明确位置注明出处！！！</strong></p>\n</blockquote>\n<p>众所周知，Android机型尺寸各种各样，于是屏幕适配就成了Android开发中很重要的一环。Android屏幕适配可能一些开发者都会遇到这样的问题，今天就来分享下屏幕适配，你会发现其实Android屏幕适配也可以很简单。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Android屏幕适配必须要理解的一些概念，这部分可能比较枯燥，但是俗话说的好“工欲善其事，必先利器”，翻译过来就是“有什么样的枪，决定你打什么样的鸟”，一旦这些概念你理解掌握了，屏幕适配你自然而然就觉得简单多了。</p>\n<ul>\n<li>px</li>\n</ul>\n<p>是英文单词pixel的缩写，意为像素，屏幕上的点。我们通常所说的分辨率如480X800就是指的像素。</p>\n<p>在设计领域中，像素是用来计算数码影像的最小单位。计算机中显示的图像并非连续的线条组成，而是由许多肉眼看不见的小点组成。如果把影像放大数倍，会发现这些连续色调其实是由许多色彩相近的小点所组成，这些小点就是构成影像的最小单位“像素”。由于是最小的独立显示单位，px均为整数，不会出现0.5px的情况。如：</p>\n<p>看这个色彩鲜艳的LED灯（原图大小）</p>\n<p><img src=\"http://stormzhang.com/image/pixel_origin.png\" alt=\"\"></p>\n<p>你能想象这才是他的本来面目吗？（放大之后）</p>\n<p><img src=\"http://stormzhang.com/image/pixel_scale.jpeg\" alt=\"\"></p>\n<ul>\n<li>in</li>\n</ul>\n<p>表示英寸，是屏幕的物理尺寸。每英寸等于2.54厘米。例如我们经常说的手机屏幕大小有，5（英）寸、4（英）寸就是指这个单位。这些尺寸是屏幕的对角线长度。如果手机的屏幕是4英寸，表示手机的屏幕（可视区域）对角线长度是4 X 2.54 = 10.16厘米。</p>\n<ul>\n<li>dpi</li>\n</ul>\n<p>dpi是Dots Per Inch的缩写, 每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。</p>\n<ul>\n<li>density</li>\n</ul>\n<p>屏幕密度，density和dpi的关系为 density = dpi/160</p>\n<ul>\n<li>dp</li>\n</ul>\n<p>也即dip，设备独立像素，device independent pixels的缩写，Android特有的单位，在屏幕密度dpi = 160屏幕上，1dp = 1px。</p>\n<ul>\n<li>sp</li>\n</ul>\n<p>和dp很类似，一般用来设置字体大小，和dp的区别是它可以根据用户的字体大小偏好来缩放。</p>\n<h2 id=\"Android-Drawable\"><a href=\"#Android-Drawable\" class=\"headerlink\" title=\"Android Drawable\"></a>Android Drawable</h2><p>我们新建一个Android项目后应该可以看到很多drawable文件夹，分别对应不同的dpi</p>\n<ul>\n<li><p>drawable-ldpi (dpi=120, density=0.75)</p>\n</li>\n<li><p>drawable-mdpi (dpi=160, density=1)</p>\n</li>\n<li><p>drawable-hdpi (dpi=240, density=1.5)</p>\n</li>\n<li><p>drawable-xhdpi (dpi=320, density=2)</p>\n</li>\n<li><p>drawable-xxhdpi (dpi=480, density=3)</p>\n</li>\n</ul>\n<p>市面上的一些Android教程大多都是教的是为每种dpi都出一套图片资源，这个固然是一种解决办法，但同时也是一种非常笨的方法，为美工或者设计增加了不少的工作量不说，同时也会让你的apk包变的很大。那么有没有什么好的方法既能保证屏幕适配，又可以最小占用设计资源，同时最好又只使用一套dpi的图片资源呢？下面就来讲解下项目中总结出来的这个方法。</p>\n<p>首先必须清楚一个自动渲染的概念，Android SDK会自动屏幕尺寸选择对应的资源文件进行渲染，如SDK检测到你手机dpi是160的话会优先到drawable-mdpi文件夹下找对应的图片资源，注意只是优先，假设你手机dpi是160，但是你只在xhpdi文件夹下有对应的图片资源文件，程序一样可以正常运行。所以理论上来说只需要提供一种规格的图片资源就ok了，如果只提供ldpi规格的图片，对于大分辨率的手机如果把图片放大就会不清晰，所以需要提供一套你需要支持的最大dpi的图片，这样即使用户的手机分辨率很小，这样图片缩小依然很清晰。</p>\n<h2 id=\"xhdpi成为首选\"><a href=\"#xhdpi成为首选\" class=\"headerlink\" title=\"xhdpi成为首选\"></a>xhdpi成为首选</h2><p>上面说了只需要提供一套大的dpi的图片就ok了，现在市面手机分辨率最大可达到1080X1920的分辨率，如Nexus5，dpi属于xxhdpi，但是毕竟还没普及，目前市面上最普遍的高端机的分辨率还多集中在720X1080范围，也就是多集中在xhdpi，所以目前来看xhpdi规格的图片成为了首选。当然随着技术规格的提高以后发展，以后可能市场上xxdpi的手机会越来越普遍，但这是后话。</p>\n<h2 id=\"设计资源紧张怎么办？\"><a href=\"#设计资源紧张怎么办？\" class=\"headerlink\" title=\"设计资源紧张怎么办？\"></a>设计资源紧张怎么办？</h2><p>在现在的App开发中，基本都会有iOS和Android版本，有些公司为了保持App不同版本的体验交互一致，还有些公司的设计资源可能比较紧张，这些情况下iOS和Android版本基本是一个设计师主导，而大多数情况下设计师可能更会以iPhone手机为基础进行设计，包括后期的切图之类的。这个时候身为Android开发人员你是否还要求设计师单独为Android端切一套图片资源呢？这会让你们的设计师崩溃的，下面就来告诉一个项目中总结的更棒的方法。</p>\n<p>相信设计师们一般都会用最新的iPhone5（5s和5的尺寸以及分辨率都一样）来做原型设计，而iPhone5的屏幕分辨率为640X1164, 屏幕尺寸为4英寸，根据勾股定理(a^2 + b^2 = c^2)640^2+1164^2=1764496, 然后再对其开根号可求出屏幕对角线的分辨率为：1328，除以4可得出iphone5的dpi：1328/4≈332 可以看出iPhone5的屏幕的dpi约等于320, 刚好属于xhdpi，所以你可以很自豪的像你们的设计师说不用专门为Android端切图，直接把iPhone的那一套切好的图片资源放入drawable-xhdpi文件夹里就ok了。</p>\n<h2 id=\"wrap-content-VS-dp\"><a href=\"#wrap-content-VS-dp\" class=\"headerlink\" title=\"wrap_content VS dp\"></a>wrap_content VS dp</h2><p>wrap_content和dp都是在Android开发中应该经常用到的，然后它们冥冥中是有关系的。</p>\n<p>假设你看了这篇文章后都是统一有xhdpi的资源，那么你用wrap_content完全没有问题，Android会自动为其他规格的dpi屏幕适配,比如你在xhdpi放了一张120X120px大小的图片，那么在在hdpi屏幕上显示的就只有120/2*1.5=90px大小，但是如果你不小心同样把这张图片也放入了mdpi了，这个时候用wrap_content显示就会有问题，具体看下面的例子：</p>\n<p>例如假设你只在drawable_xhdpi文件夹下放了test图片，xhdpi的设备会去xhdpi文件夹下找到test图片并直接显示，而mdpi的设备优先会去mdpi文件夹里查找test图片，但是没找到，最后在xhdpi文件夹下找到，然后会自动根据density计算并缩放显示出来，实际显示出来的大小是120/2=60px, 所以整体的显示比例才会看起来比较正常</p>\n<ul>\n<li>mdpi</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/mdpi_test.png\" alt=\"\"></p>\n<ul>\n<li>xhdpi</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/xhdpi_test.png\" alt=\"\"></p>\n<p>但是如果你在mdpi文件夹里也放入了同样的图片，那么mdpi的设备会直接去mdpi文件夹里寻找到test图片，并直接显示，而这时候显示不会缩放，实际显示大小就是120X120,在mdpi的屏幕上看起来就会比较大，如图：</p>\n<p><img src=\"http://stormzhang.com/image/mdpi_test2.png\" alt=\"\"></p>\n<p>通过上面整个过程，大家应该理解了Android加载资源的整个过程, wrap_content同样可以用dp来代替，就拿上面这个例子，在xhdpi文件夹内放入了一张120X120像素的test图片，宽高直接除density就得出dp的数值，即这种情况下以下代码是等同的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ImageView</div><div class=\"line\">    android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">    android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">    android:src=&quot;@drawable/test&quot; /&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ImageView</div><div class=\"line\">    android:layout_width=&quot;60dp&quot;</div><div class=\"line\">    android:layout_height=&quot;60dp&quot;</div><div class=\"line\">    android:src=&quot;@drawable/test&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相信通过以上的讲解，对Android UI中的一些基本概念有个很好的理解，实际开发工作中也有一些高效的方法可以参考，应该可以应对大部分的屏幕适配工作。但是项目中仍然有一些比较特殊的适配需求满足不了，以后会针对一些特殊的需求进行示例讲解。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><strong>版权声明：本文转载自Android大牛<a href=\"http://stormzhang.com/android/2014/05/16/android-screen-adaptation/\" target=\"_blank\" rel=\"external\">stormzhang</a> 原创文章，可以随意转载，但请必须在明确位置注明出处！！！</strong></p>\n</blockquote>\n<p>众所周知，Android机型尺寸各种各样，于是屏幕适配就成了Android开发中很重要的一环。Android屏幕适配可能一些开发者都会遇到这样的问题，今天就来分享下屏幕适配，你会发现其实Android屏幕适配也可以很简单。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Android屏幕适配必须要理解的一些概念，这部分可能比较枯燥，但是俗话说的好“工欲善其事，必先利器”，翻译过来就是“有什么样的枪，决定你打什么样的鸟”，一旦这些概念你理解掌握了，屏幕适配你自然而然就觉得简单多了。</p>\n<ul>\n<li>px</li>\n</ul>\n<p>是英文单词pixel的缩写，意为像素，屏幕上的点。我们通常所说的分辨率如480X800就是指的像素。</p>\n<p>在设计领域中，像素是用来计算数码影像的最小单位。计算机中显示的图像并非连续的线条组成，而是由许多肉眼看不见的小点组成。如果把影像放大数倍，会发现这些连续色调其实是由许多色彩相近的小点所组成，这些小点就是构成影像的最小单位“像素”。由于是最小的独立显示单位，px均为整数，不会出现0.5px的情况。如：</p>\n<p>看这个色彩鲜艳的LED灯（原图大小）</p>\n<p><img src=\"http://stormzhang.com/image/pixel_origin.png\" alt=\"\"></p>\n<p>你能想象这才是他的本来面目吗？（放大之后）</p>\n<p><img src=\"http://stormzhang.com/image/pixel_scale.jpeg\" alt=\"\"></p>\n<ul>\n<li>in</li>\n</ul>\n<p>表示英寸，是屏幕的物理尺寸。每英寸等于2.54厘米。例如我们经常说的手机屏幕大小有，5（英）寸、4（英）寸就是指这个单位。这些尺寸是屏幕的对角线长度。如果手机的屏幕是4英寸，表示手机的屏幕（可视区域）对角线长度是4 X 2.54 = 10.16厘米。</p>\n<ul>\n<li>dpi</li>\n</ul>\n<p>dpi是Dots Per Inch的缩写, 每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。</p>\n<ul>\n<li>density</li>\n</ul>\n<p>屏幕密度，density和dpi的关系为 density = dpi/160</p>\n<ul>\n<li>dp</li>\n</ul>\n<p>也即dip，设备独立像素，device independent pixels的缩写，Android特有的单位，在屏幕密度dpi = 160屏幕上，1dp = 1px。</p>\n<ul>\n<li>sp</li>\n</ul>\n<p>和dp很类似，一般用来设置字体大小，和dp的区别是它可以根据用户的字体大小偏好来缩放。</p>\n<h2 id=\"Android-Drawable\"><a href=\"#Android-Drawable\" class=\"headerlink\" title=\"Android Drawable\"></a>Android Drawable</h2><p>我们新建一个Android项目后应该可以看到很多drawable文件夹，分别对应不同的dpi</p>\n<ul>\n<li><p>drawable-ldpi (dpi=120, density=0.75)</p>\n</li>\n<li><p>drawable-mdpi (dpi=160, density=1)</p>\n</li>\n<li><p>drawable-hdpi (dpi=240, density=1.5)</p>\n</li>\n<li><p>drawable-xhdpi (dpi=320, density=2)</p>\n</li>\n<li><p>drawable-xxhdpi (dpi=480, density=3)</p>\n</li>\n</ul>\n<p>市面上的一些Android教程大多都是教的是为每种dpi都出一套图片资源，这个固然是一种解决办法，但同时也是一种非常笨的方法，为美工或者设计增加了不少的工作量不说，同时也会让你的apk包变的很大。那么有没有什么好的方法既能保证屏幕适配，又可以最小占用设计资源，同时最好又只使用一套dpi的图片资源呢？下面就来讲解下项目中总结出来的这个方法。</p>\n<p>首先必须清楚一个自动渲染的概念，Android SDK会自动屏幕尺寸选择对应的资源文件进行渲染，如SDK检测到你手机dpi是160的话会优先到drawable-mdpi文件夹下找对应的图片资源，注意只是优先，假设你手机dpi是160，但是你只在xhpdi文件夹下有对应的图片资源文件，程序一样可以正常运行。所以理论上来说只需要提供一种规格的图片资源就ok了，如果只提供ldpi规格的图片，对于大分辨率的手机如果把图片放大就会不清晰，所以需要提供一套你需要支持的最大dpi的图片，这样即使用户的手机分辨率很小，这样图片缩小依然很清晰。</p>\n<h2 id=\"xhdpi成为首选\"><a href=\"#xhdpi成为首选\" class=\"headerlink\" title=\"xhdpi成为首选\"></a>xhdpi成为首选</h2><p>上面说了只需要提供一套大的dpi的图片就ok了，现在市面手机分辨率最大可达到1080X1920的分辨率，如Nexus5，dpi属于xxhdpi，但是毕竟还没普及，目前市面上最普遍的高端机的分辨率还多集中在720X1080范围，也就是多集中在xhdpi，所以目前来看xhpdi规格的图片成为了首选。当然随着技术规格的提高以后发展，以后可能市场上xxdpi的手机会越来越普遍，但这是后话。</p>\n<h2 id=\"设计资源紧张怎么办？\"><a href=\"#设计资源紧张怎么办？\" class=\"headerlink\" title=\"设计资源紧张怎么办？\"></a>设计资源紧张怎么办？</h2><p>在现在的App开发中，基本都会有iOS和Android版本，有些公司为了保持App不同版本的体验交互一致，还有些公司的设计资源可能比较紧张，这些情况下iOS和Android版本基本是一个设计师主导，而大多数情况下设计师可能更会以iPhone手机为基础进行设计，包括后期的切图之类的。这个时候身为Android开发人员你是否还要求设计师单独为Android端切一套图片资源呢？这会让你们的设计师崩溃的，下面就来告诉一个项目中总结的更棒的方法。</p>\n<p>相信设计师们一般都会用最新的iPhone5（5s和5的尺寸以及分辨率都一样）来做原型设计，而iPhone5的屏幕分辨率为640X1164, 屏幕尺寸为4英寸，根据勾股定理(a^2 + b^2 = c^2)640^2+1164^2=1764496, 然后再对其开根号可求出屏幕对角线的分辨率为：1328，除以4可得出iphone5的dpi：1328/4≈332 可以看出iPhone5的屏幕的dpi约等于320, 刚好属于xhdpi，所以你可以很自豪的像你们的设计师说不用专门为Android端切图，直接把iPhone的那一套切好的图片资源放入drawable-xhdpi文件夹里就ok了。</p>\n<h2 id=\"wrap-content-VS-dp\"><a href=\"#wrap-content-VS-dp\" class=\"headerlink\" title=\"wrap_content VS dp\"></a>wrap_content VS dp</h2><p>wrap_content和dp都是在Android开发中应该经常用到的，然后它们冥冥中是有关系的。</p>\n<p>假设你看了这篇文章后都是统一有xhdpi的资源，那么你用wrap_content完全没有问题，Android会自动为其他规格的dpi屏幕适配,比如你在xhdpi放了一张120X120px大小的图片，那么在在hdpi屏幕上显示的就只有120/2*1.5=90px大小，但是如果你不小心同样把这张图片也放入了mdpi了，这个时候用wrap_content显示就会有问题，具体看下面的例子：</p>\n<p>例如假设你只在drawable_xhdpi文件夹下放了test图片，xhdpi的设备会去xhdpi文件夹下找到test图片并直接显示，而mdpi的设备优先会去mdpi文件夹里查找test图片，但是没找到，最后在xhdpi文件夹下找到，然后会自动根据density计算并缩放显示出来，实际显示出来的大小是120/2=60px, 所以整体的显示比例才会看起来比较正常</p>\n<ul>\n<li>mdpi</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/mdpi_test.png\" alt=\"\"></p>\n<ul>\n<li>xhdpi</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/xhdpi_test.png\" alt=\"\"></p>\n<p>但是如果你在mdpi文件夹里也放入了同样的图片，那么mdpi的设备会直接去mdpi文件夹里寻找到test图片，并直接显示，而这时候显示不会缩放，实际显示大小就是120X120,在mdpi的屏幕上看起来就会比较大，如图：</p>\n<p><img src=\"http://stormzhang.com/image/mdpi_test2.png\" alt=\"\"></p>\n<p>通过上面整个过程，大家应该理解了Android加载资源的整个过程, wrap_content同样可以用dp来代替，就拿上面这个例子，在xhdpi文件夹内放入了一张120X120像素的test图片，宽高直接除density就得出dp的数值，即这种情况下以下代码是等同的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ImageView</div><div class=\"line\">    android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">    android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">    android:src=&quot;@drawable/test&quot; /&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ImageView</div><div class=\"line\">    android:layout_width=&quot;60dp&quot;</div><div class=\"line\">    android:layout_height=&quot;60dp&quot;</div><div class=\"line\">    android:src=&quot;@drawable/test&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>相信通过以上的讲解，对Android UI中的一些基本概念有个很好的理解，实际开发工作中也有一些高效的方法可以参考，应该可以应对大部分的屏幕适配工作。但是项目中仍然有一些比较特殊的适配需求满足不了，以后会针对一些特殊的需求进行示例讲解。</p>\n"},{"title":"Android Service","date":"2017-10-05T05:07:20.000Z","_content":"\nService 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。\n\n服务基本上分为两种形式：\n\n1. 启动\n通过调用 `startService()` 启动服务时，服务即处于“启动”状态。\n核心在 `onStartCommand()`（允许组件启动服务）\n\n2. 绑定\n当应用组件通过调用 `bindService()` 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。\n核心在 `onBind()`（允许绑定服务）\n\n注意：\n1. 使用服务的话，默认情况下，它仍会在应用的主线程中运行，因此，如果服务执行的是密集型或阻止性操作，则你仍应在服务内创建新线程。\n2. 通过添加 android:exported 属性并将其设置为 \"false\"，确保服务仅适用于您的应用。这可以有效阻止其他应用启动您的服务，即便在使用显式 Intent 时也如此。\n3. android:process：是否需要在单独的进程中运行,当设置为android:process=”:remote”时，代表Service在单独的进程中运行。注意“：”很重要，它的意思是指要在当前进程名称前面附加上当前的包名\n\n\n\n\n## 方法介绍\n\n**onStartCommand()**\n通过调用 `startService()` 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 `stopSelf()` 或 `stopService()` 来停止服务。\n\n**onBind()**\n通过调用 `bindService()` 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 `IBinder` 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 `null`。\n\n**onCreate()**\n首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 `onStartCommand()` 或 `onBind()` 之前）。如果服务已在运行，则不会调用此方法。\n\n**onDestroy()**\n当服务不再使用且将被销毁时，系统将调用此方法。\n\n\n## 使用介绍\n在这里面会介绍两种方式介绍，主要讲解的是绑定方式，因为绑定服务可以有很多交互方式。\n\n### A.启动服务\n通过调用`startService()` 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 `stopSelf()` 或 `stopService()` 来停止服务。\n\n### B.绑定服务\n通过调用 `bindService()` 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 `IBinder` 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 `null`。\n\n创建绑定服务时，必须提供`IBinder`接口，这里面可以通过三种方式定义：\n\n#### 1.扩展Binder类\n如果服务是供您的自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 返回它的一个实例来创建接口。客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。也就是说如果服务仅供本地应用使用，不需要跨进程工作，则可以实现自有 Binder 类，让你的客户端通过该类直接访问服务中的公共方法。\n\n服务端代码如下：\n\n```\npublic class LocalService extends Service {\n    // Binder given to clients\n    private final IBinder mBinder = new LocalBinder();\n    // Random number generator\n    private final Random mGenerator = new Random();\n\n    /**\n     * Class used for the client Binder.  Because we know this service always\n     * runs in the same process as its clients, we don't need to deal with IPC.\n     */\n    public class LocalBinder extends Binder {\n        LocalService getService() {\n            // Return this instance of LocalService so clients can call public methods\n            return LocalService.this;\n        }\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n\n    /** method for clients */\n    public int getRandomNumber() {\n      return mGenerator.nextInt(100);\n    }\n}\n```\n\n客户端代码如下：\n\n```\npublic class BindingActivity extends Activity {\n    LocalService mService;\n    boolean mBound = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        // Bind to LocalService\n        Intent intent = new Intent(this, LocalService.class);\n        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        // Unbind from the service\n        if (mBound) {\n            unbindService(mConnection);\n            mBound = false;\n        }\n    }\n\n    /** Called when a button is clicked (the button in the layout file attaches to\n      * this method with the android:onClick attribute) */\n    public void onButtonClick(View v) {\n        if (mBound) {\n            // Call a method from the LocalService.\n            // However, if this call were something that might hang, then this request should\n            // occur in a separate thread to avoid slowing down the activity performance.\n            int num = mService.getRandomNumber();\n            Toast.makeText(this, \"number: \" + num, Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    /** Defines callbacks for service binding, passed to bindService() */\n    private ServiceConnection mConnection = new ServiceConnection() {\n\n        @Override\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // We've bound to LocalService, cast the IBinder and get LocalService instance\n            LocalBinder binder = (LocalBinder) service;\n            mService = binder.getService();\n            mBound = true;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName arg0) {\n            mBound = false;\n        }\n    };\n}\n```\n\n通过上面方式就能是实现简单通信。\n\n\n#### 2.Messenger\n如需让服务与远程进程通信，则可使用 Messenger 为您的服务提供接口。利用此方法，您无需使用 AIDL 便可执行进程间通信 (IPC)。\n\n服务端代码如下：\n\n```\npublic class MessengerService extends Service {\n    /** Command to the service to display a message */\n    static final int MSG_SAY_HELLO = 1;\n\n    /**\n     * Handler of incoming messages from clients.\n     */\n    class IncomingHandler extends Handler {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_SAY_HELLO:\n                    Toast.makeText(getApplicationContext(), \"hello!\", Toast.LENGTH_SHORT).show();\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n    }\n\n    /**\n     * Target we publish for clients to send messages to IncomingHandler.\n     */\n    final Messenger mMessenger = new Messenger(new IncomingHandler());\n\n    /**\n     * When binding to the service, we return an interface to our messenger\n     * for sending messages to the service.\n     */\n    @Override\n    public IBinder onBind(Intent intent) {\n        Toast.makeText(getApplicationContext(), \"binding\", Toast.LENGTH_SHORT).show();\n        return mMessenger.getBinder();\n    }\n}\n```\n\n客户端代码如下：\n\n```\npublic class ActivityMessenger extends Activity {\n    /** Messenger for communicating with the service. */\n    Messenger mService = null;\n\n    /** Flag indicating whether we have called bind on the service. */\n    boolean mBound;\n\n    /**\n     * Class for interacting with the main interface of the service.\n     */\n    private ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            // This is called when the connection with the service has been\n            // established, giving us the object we can use to\n            // interact with the service.  We are communicating with the\n            // service using a Messenger, so here we get a client-side\n            // representation of that from the raw IBinder object.\n            mService = new Messenger(service);\n            mBound = true;\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            // This is called when the connection with the service has been\n            // unexpectedly disconnected -- that is, its process crashed.\n            mService = null;\n            mBound = false;\n        }\n    };\n\n    public void sayHello(View v) {\n        if (!mBound) return;\n        // Create and send a message to the service, using a supported 'what' value\n        Message msg = Message.obtain(null, MessengerService.MSG_SAY_HELLO, 0, 0);\n        try {\n            mService.send(msg);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        // Bind to the service\n        bindService(new Intent(this, MessengerService.class), mConnection,\n            Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        // Unbind from the service\n        if (mBound) {\n            unbindService(mConnection);\n            mBound = false;\n        }\n    }\n}\n```\n\n#### 3.使用AIDL\nAIDL（Android 接口定义语言）执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，以便服务一次接收一个请求。 不过，如果想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，服务必须具备多线程处理能力，并采用线程安全式设计。\n\n如需直接使用 AIDL，您必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，您随后可在服务内对其进行扩展。\n\n此文就不着重介绍，后续会单独有篇文章介绍。\n\n\n\n\n","source":"_posts/Android-Service.md","raw":"---\ntitle: Android Service\ndate: 2017-10-5 13:07:20\ntags: [Android]\n---\n\nService 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。\n\n服务基本上分为两种形式：\n\n1. 启动\n通过调用 `startService()` 启动服务时，服务即处于“启动”状态。\n核心在 `onStartCommand()`（允许组件启动服务）\n\n2. 绑定\n当应用组件通过调用 `bindService()` 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。\n核心在 `onBind()`（允许绑定服务）\n\n注意：\n1. 使用服务的话，默认情况下，它仍会在应用的主线程中运行，因此，如果服务执行的是密集型或阻止性操作，则你仍应在服务内创建新线程。\n2. 通过添加 android:exported 属性并将其设置为 \"false\"，确保服务仅适用于您的应用。这可以有效阻止其他应用启动您的服务，即便在使用显式 Intent 时也如此。\n3. android:process：是否需要在单独的进程中运行,当设置为android:process=”:remote”时，代表Service在单独的进程中运行。注意“：”很重要，它的意思是指要在当前进程名称前面附加上当前的包名\n\n\n\n\n## 方法介绍\n\n**onStartCommand()**\n通过调用 `startService()` 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 `stopSelf()` 或 `stopService()` 来停止服务。\n\n**onBind()**\n通过调用 `bindService()` 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 `IBinder` 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 `null`。\n\n**onCreate()**\n首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 `onStartCommand()` 或 `onBind()` 之前）。如果服务已在运行，则不会调用此方法。\n\n**onDestroy()**\n当服务不再使用且将被销毁时，系统将调用此方法。\n\n\n## 使用介绍\n在这里面会介绍两种方式介绍，主要讲解的是绑定方式，因为绑定服务可以有很多交互方式。\n\n### A.启动服务\n通过调用`startService()` 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 `stopSelf()` 或 `stopService()` 来停止服务。\n\n### B.绑定服务\n通过调用 `bindService()` 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 `IBinder` 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 `null`。\n\n创建绑定服务时，必须提供`IBinder`接口，这里面可以通过三种方式定义：\n\n#### 1.扩展Binder类\n如果服务是供您的自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 返回它的一个实例来创建接口。客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。也就是说如果服务仅供本地应用使用，不需要跨进程工作，则可以实现自有 Binder 类，让你的客户端通过该类直接访问服务中的公共方法。\n\n服务端代码如下：\n\n```\npublic class LocalService extends Service {\n    // Binder given to clients\n    private final IBinder mBinder = new LocalBinder();\n    // Random number generator\n    private final Random mGenerator = new Random();\n\n    /**\n     * Class used for the client Binder.  Because we know this service always\n     * runs in the same process as its clients, we don't need to deal with IPC.\n     */\n    public class LocalBinder extends Binder {\n        LocalService getService() {\n            // Return this instance of LocalService so clients can call public methods\n            return LocalService.this;\n        }\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n\n    /** method for clients */\n    public int getRandomNumber() {\n      return mGenerator.nextInt(100);\n    }\n}\n```\n\n客户端代码如下：\n\n```\npublic class BindingActivity extends Activity {\n    LocalService mService;\n    boolean mBound = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        // Bind to LocalService\n        Intent intent = new Intent(this, LocalService.class);\n        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        // Unbind from the service\n        if (mBound) {\n            unbindService(mConnection);\n            mBound = false;\n        }\n    }\n\n    /** Called when a button is clicked (the button in the layout file attaches to\n      * this method with the android:onClick attribute) */\n    public void onButtonClick(View v) {\n        if (mBound) {\n            // Call a method from the LocalService.\n            // However, if this call were something that might hang, then this request should\n            // occur in a separate thread to avoid slowing down the activity performance.\n            int num = mService.getRandomNumber();\n            Toast.makeText(this, \"number: \" + num, Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    /** Defines callbacks for service binding, passed to bindService() */\n    private ServiceConnection mConnection = new ServiceConnection() {\n\n        @Override\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // We've bound to LocalService, cast the IBinder and get LocalService instance\n            LocalBinder binder = (LocalBinder) service;\n            mService = binder.getService();\n            mBound = true;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName arg0) {\n            mBound = false;\n        }\n    };\n}\n```\n\n通过上面方式就能是实现简单通信。\n\n\n#### 2.Messenger\n如需让服务与远程进程通信，则可使用 Messenger 为您的服务提供接口。利用此方法，您无需使用 AIDL 便可执行进程间通信 (IPC)。\n\n服务端代码如下：\n\n```\npublic class MessengerService extends Service {\n    /** Command to the service to display a message */\n    static final int MSG_SAY_HELLO = 1;\n\n    /**\n     * Handler of incoming messages from clients.\n     */\n    class IncomingHandler extends Handler {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_SAY_HELLO:\n                    Toast.makeText(getApplicationContext(), \"hello!\", Toast.LENGTH_SHORT).show();\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n    }\n\n    /**\n     * Target we publish for clients to send messages to IncomingHandler.\n     */\n    final Messenger mMessenger = new Messenger(new IncomingHandler());\n\n    /**\n     * When binding to the service, we return an interface to our messenger\n     * for sending messages to the service.\n     */\n    @Override\n    public IBinder onBind(Intent intent) {\n        Toast.makeText(getApplicationContext(), \"binding\", Toast.LENGTH_SHORT).show();\n        return mMessenger.getBinder();\n    }\n}\n```\n\n客户端代码如下：\n\n```\npublic class ActivityMessenger extends Activity {\n    /** Messenger for communicating with the service. */\n    Messenger mService = null;\n\n    /** Flag indicating whether we have called bind on the service. */\n    boolean mBound;\n\n    /**\n     * Class for interacting with the main interface of the service.\n     */\n    private ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            // This is called when the connection with the service has been\n            // established, giving us the object we can use to\n            // interact with the service.  We are communicating with the\n            // service using a Messenger, so here we get a client-side\n            // representation of that from the raw IBinder object.\n            mService = new Messenger(service);\n            mBound = true;\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            // This is called when the connection with the service has been\n            // unexpectedly disconnected -- that is, its process crashed.\n            mService = null;\n            mBound = false;\n        }\n    };\n\n    public void sayHello(View v) {\n        if (!mBound) return;\n        // Create and send a message to the service, using a supported 'what' value\n        Message msg = Message.obtain(null, MessengerService.MSG_SAY_HELLO, 0, 0);\n        try {\n            mService.send(msg);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        // Bind to the service\n        bindService(new Intent(this, MessengerService.class), mConnection,\n            Context.BIND_AUTO_CREATE);\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        // Unbind from the service\n        if (mBound) {\n            unbindService(mConnection);\n            mBound = false;\n        }\n    }\n}\n```\n\n#### 3.使用AIDL\nAIDL（Android 接口定义语言）执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，以便服务一次接收一个请求。 不过，如果想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，服务必须具备多线程处理能力，并采用线程安全式设计。\n\n如需直接使用 AIDL，您必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，您随后可在服务内对其进行扩展。\n\n此文就不着重介绍，后续会单独有篇文章介绍。\n\n\n\n\n","slug":"Android-Service","published":1,"updated":"2018-01-18T10:19:26.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21d30004j0fywnqovbq2","content":"<p>Service 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。</p>\n<p>服务基本上分为两种形式：</p>\n<ol>\n<li><p>启动<br>通过调用 <code>startService()</code> 启动服务时，服务即处于“启动”状态。<br>核心在 <code>onStartCommand()</code>（允许组件启动服务）</p>\n</li>\n<li><p>绑定<br>当应用组件通过调用 <code>bindService()</code> 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。<br>核心在 <code>onBind()</code>（允许绑定服务）</p>\n</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>使用服务的话，默认情况下，它仍会在应用的主线程中运行，因此，如果服务执行的是密集型或阻止性操作，则你仍应在服务内创建新线程。</li>\n<li>通过添加 android:exported 属性并将其设置为 “false”，确保服务仅适用于您的应用。这可以有效阻止其他应用启动您的服务，即便在使用显式 Intent 时也如此。</li>\n<li>android:process：是否需要在单独的进程中运行,当设置为android:process=”:remote”时，代表Service在单独的进程中运行。注意“：”很重要，它的意思是指要在当前进程名称前面附加上当前的包名</li>\n</ol>\n<h2 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h2><p><strong>onStartCommand()</strong><br>通过调用 <code>startService()</code> 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。</p>\n<p><strong>onBind()</strong><br>通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 <code>null</code>。</p>\n<p><strong>onCreate()</strong><br>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 <code>onStartCommand()</code> 或 <code>onBind()</code> 之前）。如果服务已在运行，则不会调用此方法。</p>\n<p><strong>onDestroy()</strong><br>当服务不再使用且将被销毁时，系统将调用此方法。</p>\n<h2 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h2><p>在这里面会介绍两种方式介绍，主要讲解的是绑定方式，因为绑定服务可以有很多交互方式。</p>\n<h3 id=\"A-启动服务\"><a href=\"#A-启动服务\" class=\"headerlink\" title=\"A.启动服务\"></a>A.启动服务</h3><p>通过调用<code>startService()</code> 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。</p>\n<h3 id=\"B-绑定服务\"><a href=\"#B-绑定服务\" class=\"headerlink\" title=\"B.绑定服务\"></a>B.绑定服务</h3><p>通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 <code>null</code>。</p>\n<p>创建绑定服务时，必须提供<code>IBinder</code>接口，这里面可以通过三种方式定义：</p>\n<h4 id=\"1-扩展Binder类\"><a href=\"#1-扩展Binder类\" class=\"headerlink\" title=\"1.扩展Binder类\"></a>1.扩展Binder类</h4><p>如果服务是供您的自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 返回它的一个实例来创建接口。客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。也就是说如果服务仅供本地应用使用，不需要跨进程工作，则可以实现自有 Binder 类，让你的客户端通过该类直接访问服务中的公共方法。</p>\n<p>服务端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LocalService extends Service &#123;</div><div class=\"line\">    // Binder given to clients</div><div class=\"line\">    private final IBinder mBinder = new LocalBinder();</div><div class=\"line\">    // Random number generator</div><div class=\"line\">    private final Random mGenerator = new Random();</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Class used for the client Binder.  Because we know this service always</div><div class=\"line\">     * runs in the same process as its clients, we don&apos;t need to deal with IPC.</div><div class=\"line\">     */</div><div class=\"line\">    public class LocalBinder extends Binder &#123;</div><div class=\"line\">        LocalService getService() &#123;</div><div class=\"line\">            // Return this instance of LocalService so clients can call public methods</div><div class=\"line\">            return LocalService.this;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public IBinder onBind(Intent intent) &#123;</div><div class=\"line\">        return mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** method for clients */</div><div class=\"line\">    public int getRandomNumber() &#123;</div><div class=\"line\">      return mGenerator.nextInt(100);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BindingActivity extends Activity &#123;</div><div class=\"line\">    LocalService mService;</div><div class=\"line\">    boolean mBound = false;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.main);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStart() &#123;</div><div class=\"line\">        super.onStart();</div><div class=\"line\">        // Bind to LocalService</div><div class=\"line\">        Intent intent = new Intent(this, LocalService.class);</div><div class=\"line\">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStop() &#123;</div><div class=\"line\">        super.onStop();</div><div class=\"line\">        // Unbind from the service</div><div class=\"line\">        if (mBound) &#123;</div><div class=\"line\">            unbindService(mConnection);</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** Called when a button is clicked (the button in the layout file attaches to</div><div class=\"line\">      * this method with the android:onClick attribute) */</div><div class=\"line\">    public void onButtonClick(View v) &#123;</div><div class=\"line\">        if (mBound) &#123;</div><div class=\"line\">            // Call a method from the LocalService.</div><div class=\"line\">            // However, if this call were something that might hang, then this request should</div><div class=\"line\">            // occur in a separate thread to avoid slowing down the activity performance.</div><div class=\"line\">            int num = mService.getRandomNumber();</div><div class=\"line\">            Toast.makeText(this, &quot;number: &quot; + num, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** Defines callbacks for service binding, passed to bindService() */</div><div class=\"line\">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void onServiceConnected(ComponentName className,</div><div class=\"line\">                IBinder service) &#123;</div><div class=\"line\">            // We&apos;ve bound to LocalService, cast the IBinder and get LocalService instance</div><div class=\"line\">            LocalBinder binder = (LocalBinder) service;</div><div class=\"line\">            mService = binder.getService();</div><div class=\"line\">            mBound = true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void onServiceDisconnected(ComponentName arg0) &#123;</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过上面方式就能是实现简单通信。</p>\n<h4 id=\"2-Messenger\"><a href=\"#2-Messenger\" class=\"headerlink\" title=\"2.Messenger\"></a>2.Messenger</h4><p>如需让服务与远程进程通信，则可使用 Messenger 为您的服务提供接口。利用此方法，您无需使用 AIDL 便可执行进程间通信 (IPC)。</p>\n<p>服务端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MessengerService extends Service &#123;</div><div class=\"line\">    /** Command to the service to display a message */</div><div class=\"line\">    static final int MSG_SAY_HELLO = 1;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Handler of incoming messages from clients.</div><div class=\"line\">     */</div><div class=\"line\">    class IncomingHandler extends Handler &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public void handleMessage(Message msg) &#123;</div><div class=\"line\">            switch (msg.what) &#123;</div><div class=\"line\">                case MSG_SAY_HELLO:</div><div class=\"line\">                    Toast.makeText(getApplicationContext(), &quot;hello!&quot;, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                    break;</div><div class=\"line\">                default:</div><div class=\"line\">                    super.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Target we publish for clients to send messages to IncomingHandler.</div><div class=\"line\">     */</div><div class=\"line\">    final Messenger mMessenger = new Messenger(new IncomingHandler());</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * When binding to the service, we return an interface to our messenger</div><div class=\"line\">     * for sending messages to the service.</div><div class=\"line\">     */</div><div class=\"line\">    @Override</div><div class=\"line\">    public IBinder onBind(Intent intent) &#123;</div><div class=\"line\">        Toast.makeText(getApplicationContext(), &quot;binding&quot;, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        return mMessenger.getBinder();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ActivityMessenger extends Activity &#123;</div><div class=\"line\">    /** Messenger for communicating with the service. */</div><div class=\"line\">    Messenger mService = null;</div><div class=\"line\"></div><div class=\"line\">    /** Flag indicating whether we have called bind on the service. */</div><div class=\"line\">    boolean mBound;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Class for interacting with the main interface of the service.</div><div class=\"line\">     */</div><div class=\"line\">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class=\"line\">        public void onServiceConnected(ComponentName className, IBinder service) &#123;</div><div class=\"line\">            // This is called when the connection with the service has been</div><div class=\"line\">            // established, giving us the object we can use to</div><div class=\"line\">            // interact with the service.  We are communicating with the</div><div class=\"line\">            // service using a Messenger, so here we get a client-side</div><div class=\"line\">            // representation of that from the raw IBinder object.</div><div class=\"line\">            mService = new Messenger(service);</div><div class=\"line\">            mBound = true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void onServiceDisconnected(ComponentName className) &#123;</div><div class=\"line\">            // This is called when the connection with the service has been</div><div class=\"line\">            // unexpectedly disconnected -- that is, its process crashed.</div><div class=\"line\">            mService = null;</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    public void sayHello(View v) &#123;</div><div class=\"line\">        if (!mBound) return;</div><div class=\"line\">        // Create and send a message to the service, using a supported &apos;what&apos; value</div><div class=\"line\">        Message msg = Message.obtain(null, MessengerService.MSG_SAY_HELLO, 0, 0);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            mService.send(msg);</div><div class=\"line\">        &#125; catch (RemoteException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.main);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStart() &#123;</div><div class=\"line\">        super.onStart();</div><div class=\"line\">        // Bind to the service</div><div class=\"line\">        bindService(new Intent(this, MessengerService.class), mConnection,</div><div class=\"line\">            Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStop() &#123;</div><div class=\"line\">        super.onStop();</div><div class=\"line\">        // Unbind from the service</div><div class=\"line\">        if (mBound) &#123;</div><div class=\"line\">            unbindService(mConnection);</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-使用AIDL\"><a href=\"#3-使用AIDL\" class=\"headerlink\" title=\"3.使用AIDL\"></a>3.使用AIDL</h4><p>AIDL（Android 接口定义语言）执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，以便服务一次接收一个请求。 不过，如果想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，服务必须具备多线程处理能力，并采用线程安全式设计。</p>\n<p>如需直接使用 AIDL，您必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，您随后可在服务内对其进行扩展。</p>\n<p>此文就不着重介绍，后续会单独有篇文章介绍。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Service 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。</p>\n<p>服务基本上分为两种形式：</p>\n<ol>\n<li><p>启动<br>通过调用 <code>startService()</code> 启动服务时，服务即处于“启动”状态。<br>核心在 <code>onStartCommand()</code>（允许组件启动服务）</p>\n</li>\n<li><p>绑定<br>当应用组件通过调用 <code>bindService()</code> 绑定到服务时，服务即处于“绑定”状态。绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。<br>核心在 <code>onBind()</code>（允许绑定服务）</p>\n</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>使用服务的话，默认情况下，它仍会在应用的主线程中运行，因此，如果服务执行的是密集型或阻止性操作，则你仍应在服务内创建新线程。</li>\n<li>通过添加 android:exported 属性并将其设置为 “false”，确保服务仅适用于您的应用。这可以有效阻止其他应用启动您的服务，即便在使用显式 Intent 时也如此。</li>\n<li>android:process：是否需要在单独的进程中运行,当设置为android:process=”:remote”时，代表Service在单独的进程中运行。注意“：”很重要，它的意思是指要在当前进程名称前面附加上当前的包名</li>\n</ol>\n<h2 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h2><p><strong>onStartCommand()</strong><br>通过调用 <code>startService()</code> 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。</p>\n<p><strong>onBind()</strong><br>通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 <code>null</code>。</p>\n<p><strong>onCreate()</strong><br>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 <code>onStartCommand()</code> 或 <code>onBind()</code> 之前）。如果服务已在运行，则不会调用此方法。</p>\n<p><strong>onDestroy()</strong><br>当服务不再使用且将被销毁时，系统将调用此方法。</p>\n<h2 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h2><p>在这里面会介绍两种方式介绍，主要讲解的是绑定方式，因为绑定服务可以有很多交互方式。</p>\n<h3 id=\"A-启动服务\"><a href=\"#A-启动服务\" class=\"headerlink\" title=\"A.启动服务\"></a>A.启动服务</h3><p>通过调用<code>startService()</code> 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。</p>\n<h3 id=\"B-绑定服务\"><a href=\"#B-绑定服务\" class=\"headerlink\" title=\"B.绑定服务\"></a>B.绑定服务</h3><p>通过调用 <code>bindService()</code> 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 <code>null</code>。</p>\n<p>创建绑定服务时，必须提供<code>IBinder</code>接口，这里面可以通过三种方式定义：</p>\n<h4 id=\"1-扩展Binder类\"><a href=\"#1-扩展Binder类\" class=\"headerlink\" title=\"1.扩展Binder类\"></a>1.扩展Binder类</h4><p>如果服务是供您的自有应用专用，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 返回它的一个实例来创建接口。客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。也就是说如果服务仅供本地应用使用，不需要跨进程工作，则可以实现自有 Binder 类，让你的客户端通过该类直接访问服务中的公共方法。</p>\n<p>服务端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LocalService extends Service &#123;</div><div class=\"line\">    // Binder given to clients</div><div class=\"line\">    private final IBinder mBinder = new LocalBinder();</div><div class=\"line\">    // Random number generator</div><div class=\"line\">    private final Random mGenerator = new Random();</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Class used for the client Binder.  Because we know this service always</div><div class=\"line\">     * runs in the same process as its clients, we don&apos;t need to deal with IPC.</div><div class=\"line\">     */</div><div class=\"line\">    public class LocalBinder extends Binder &#123;</div><div class=\"line\">        LocalService getService() &#123;</div><div class=\"line\">            // Return this instance of LocalService so clients can call public methods</div><div class=\"line\">            return LocalService.this;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public IBinder onBind(Intent intent) &#123;</div><div class=\"line\">        return mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** method for clients */</div><div class=\"line\">    public int getRandomNumber() &#123;</div><div class=\"line\">      return mGenerator.nextInt(100);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BindingActivity extends Activity &#123;</div><div class=\"line\">    LocalService mService;</div><div class=\"line\">    boolean mBound = false;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.main);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStart() &#123;</div><div class=\"line\">        super.onStart();</div><div class=\"line\">        // Bind to LocalService</div><div class=\"line\">        Intent intent = new Intent(this, LocalService.class);</div><div class=\"line\">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStop() &#123;</div><div class=\"line\">        super.onStop();</div><div class=\"line\">        // Unbind from the service</div><div class=\"line\">        if (mBound) &#123;</div><div class=\"line\">            unbindService(mConnection);</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** Called when a button is clicked (the button in the layout file attaches to</div><div class=\"line\">      * this method with the android:onClick attribute) */</div><div class=\"line\">    public void onButtonClick(View v) &#123;</div><div class=\"line\">        if (mBound) &#123;</div><div class=\"line\">            // Call a method from the LocalService.</div><div class=\"line\">            // However, if this call were something that might hang, then this request should</div><div class=\"line\">            // occur in a separate thread to avoid slowing down the activity performance.</div><div class=\"line\">            int num = mService.getRandomNumber();</div><div class=\"line\">            Toast.makeText(this, &quot;number: &quot; + num, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** Defines callbacks for service binding, passed to bindService() */</div><div class=\"line\">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void onServiceConnected(ComponentName className,</div><div class=\"line\">                IBinder service) &#123;</div><div class=\"line\">            // We&apos;ve bound to LocalService, cast the IBinder and get LocalService instance</div><div class=\"line\">            LocalBinder binder = (LocalBinder) service;</div><div class=\"line\">            mService = binder.getService();</div><div class=\"line\">            mBound = true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void onServiceDisconnected(ComponentName arg0) &#123;</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过上面方式就能是实现简单通信。</p>\n<h4 id=\"2-Messenger\"><a href=\"#2-Messenger\" class=\"headerlink\" title=\"2.Messenger\"></a>2.Messenger</h4><p>如需让服务与远程进程通信，则可使用 Messenger 为您的服务提供接口。利用此方法，您无需使用 AIDL 便可执行进程间通信 (IPC)。</p>\n<p>服务端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MessengerService extends Service &#123;</div><div class=\"line\">    /** Command to the service to display a message */</div><div class=\"line\">    static final int MSG_SAY_HELLO = 1;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Handler of incoming messages from clients.</div><div class=\"line\">     */</div><div class=\"line\">    class IncomingHandler extends Handler &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public void handleMessage(Message msg) &#123;</div><div class=\"line\">            switch (msg.what) &#123;</div><div class=\"line\">                case MSG_SAY_HELLO:</div><div class=\"line\">                    Toast.makeText(getApplicationContext(), &quot;hello!&quot;, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                    break;</div><div class=\"line\">                default:</div><div class=\"line\">                    super.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Target we publish for clients to send messages to IncomingHandler.</div><div class=\"line\">     */</div><div class=\"line\">    final Messenger mMessenger = new Messenger(new IncomingHandler());</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * When binding to the service, we return an interface to our messenger</div><div class=\"line\">     * for sending messages to the service.</div><div class=\"line\">     */</div><div class=\"line\">    @Override</div><div class=\"line\">    public IBinder onBind(Intent intent) &#123;</div><div class=\"line\">        Toast.makeText(getApplicationContext(), &quot;binding&quot;, Toast.LENGTH_SHORT).show();</div><div class=\"line\">        return mMessenger.getBinder();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ActivityMessenger extends Activity &#123;</div><div class=\"line\">    /** Messenger for communicating with the service. */</div><div class=\"line\">    Messenger mService = null;</div><div class=\"line\"></div><div class=\"line\">    /** Flag indicating whether we have called bind on the service. */</div><div class=\"line\">    boolean mBound;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Class for interacting with the main interface of the service.</div><div class=\"line\">     */</div><div class=\"line\">    private ServiceConnection mConnection = new ServiceConnection() &#123;</div><div class=\"line\">        public void onServiceConnected(ComponentName className, IBinder service) &#123;</div><div class=\"line\">            // This is called when the connection with the service has been</div><div class=\"line\">            // established, giving us the object we can use to</div><div class=\"line\">            // interact with the service.  We are communicating with the</div><div class=\"line\">            // service using a Messenger, so here we get a client-side</div><div class=\"line\">            // representation of that from the raw IBinder object.</div><div class=\"line\">            mService = new Messenger(service);</div><div class=\"line\">            mBound = true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void onServiceDisconnected(ComponentName className) &#123;</div><div class=\"line\">            // This is called when the connection with the service has been</div><div class=\"line\">            // unexpectedly disconnected -- that is, its process crashed.</div><div class=\"line\">            mService = null;</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    public void sayHello(View v) &#123;</div><div class=\"line\">        if (!mBound) return;</div><div class=\"line\">        // Create and send a message to the service, using a supported &apos;what&apos; value</div><div class=\"line\">        Message msg = Message.obtain(null, MessengerService.MSG_SAY_HELLO, 0, 0);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            mService.send(msg);</div><div class=\"line\">        &#125; catch (RemoteException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.main);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStart() &#123;</div><div class=\"line\">        super.onStart();</div><div class=\"line\">        // Bind to the service</div><div class=\"line\">        bindService(new Intent(this, MessengerService.class), mConnection,</div><div class=\"line\">            Context.BIND_AUTO_CREATE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onStop() &#123;</div><div class=\"line\">        super.onStop();</div><div class=\"line\">        // Unbind from the service</div><div class=\"line\">        if (mBound) &#123;</div><div class=\"line\">            unbindService(mConnection);</div><div class=\"line\">            mBound = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-使用AIDL\"><a href=\"#3-使用AIDL\" class=\"headerlink\" title=\"3.使用AIDL\"></a>3.使用AIDL</h4><p>AIDL（Android 接口定义语言）执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，以便服务一次接收一个请求。 不过，如果想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，服务必须具备多线程处理能力，并采用线程安全式设计。</p>\n<p>如需直接使用 AIDL，您必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，您随后可在服务内对其进行扩展。</p>\n<p>此文就不着重介绍，后续会单独有篇文章介绍。</p>\n"},{"title":"App启动优化","date":"2017-08-11T14:49:33.000Z","_content":"\n## 启动白屏\n每次令启动的时候，会出现一个白屏现象\n引起原因：\n1.Application的onCreate做了大量初始化操作；\n建议：可以放到开始使用的地方初始化操作；\n2.Activity的onCreate中有很多复杂布局与渲染操作；\n建议：仅初始化自己需要的对象，xml布局减少嵌套布局；\n\n## 优化方案\n\n1.关闭启动窗口\n\n建立style\n\n```\n    <style name=\"AppTheme.Launcher\" parent=\"AppTheme\">\n        <item name=\"android:windowDisablePreview\">true</item>\n    </style>\n```\n引用style，只需要在MAIN中引用\n\n```\n <activity\n    android:theme=\"@style/AppTheme.Launcher\"\n    />\n```\n\n这样做虽然没有白屏了，但是会出现点击桌面图标不会立即反应的现象。\n\n2.使用Material Design规范\n\n建立style\n\n```\n    <style name=\"AppTheme.Launcher.MD\">\n        <item name=\"android:windowBackground\">@drawable/launch_material_design</item>\n    </style>\n```\n\n这里面更上面不同的就是使用layer-list方式制作一个简单启动页面\n\n\n","source":"_posts/AppStartup.md","raw":"---\ntitle: App启动优化\ndate: 2017-8-11 22:49:33\ntags: [Android]\n---\n\n## 启动白屏\n每次令启动的时候，会出现一个白屏现象\n引起原因：\n1.Application的onCreate做了大量初始化操作；\n建议：可以放到开始使用的地方初始化操作；\n2.Activity的onCreate中有很多复杂布局与渲染操作；\n建议：仅初始化自己需要的对象，xml布局减少嵌套布局；\n\n## 优化方案\n\n1.关闭启动窗口\n\n建立style\n\n```\n    <style name=\"AppTheme.Launcher\" parent=\"AppTheme\">\n        <item name=\"android:windowDisablePreview\">true</item>\n    </style>\n```\n引用style，只需要在MAIN中引用\n\n```\n <activity\n    android:theme=\"@style/AppTheme.Launcher\"\n    />\n```\n\n这样做虽然没有白屏了，但是会出现点击桌面图标不会立即反应的现象。\n\n2.使用Material Design规范\n\n建立style\n\n```\n    <style name=\"AppTheme.Launcher.MD\">\n        <item name=\"android:windowBackground\">@drawable/launch_material_design</item>\n    </style>\n```\n\n这里面更上面不同的就是使用layer-list方式制作一个简单启动页面\n\n\n","slug":"AppStartup","published":1,"updated":"2018-01-18T09:46:52.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21d50005j0fykqw0ibjk","content":"<h2 id=\"启动白屏\"><a href=\"#启动白屏\" class=\"headerlink\" title=\"启动白屏\"></a>启动白屏</h2><p>每次令启动的时候，会出现一个白屏现象<br>引起原因：<br>1.Application的onCreate做了大量初始化操作；<br>建议：可以放到开始使用的地方初始化操作；<br>2.Activity的onCreate中有很多复杂布局与渲染操作；<br>建议：仅初始化自己需要的对象，xml布局减少嵌套布局；</p>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><p>1.关闭启动窗口</p>\n<p>建立style</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppTheme.Launcher&quot; parent=&quot;AppTheme&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;android:windowDisablePreview&quot;&gt;true&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>引用style，只需要在MAIN中引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">   android:theme=&quot;@style/AppTheme.Launcher&quot;</div><div class=\"line\">   /&gt;</div></pre></td></tr></table></figure>\n<p>这样做虽然没有白屏了，但是会出现点击桌面图标不会立即反应的现象。</p>\n<p>2.使用Material Design规范</p>\n<p>建立style</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppTheme.Launcher.MD&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/launch_material_design&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>这里面更上面不同的就是使用layer-list方式制作一个简单启动页面</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"启动白屏\"><a href=\"#启动白屏\" class=\"headerlink\" title=\"启动白屏\"></a>启动白屏</h2><p>每次令启动的时候，会出现一个白屏现象<br>引起原因：<br>1.Application的onCreate做了大量初始化操作；<br>建议：可以放到开始使用的地方初始化操作；<br>2.Activity的onCreate中有很多复杂布局与渲染操作；<br>建议：仅初始化自己需要的对象，xml布局减少嵌套布局；</p>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><p>1.关闭启动窗口</p>\n<p>建立style</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppTheme.Launcher&quot; parent=&quot;AppTheme&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;android:windowDisablePreview&quot;&gt;true&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>引用style，只需要在MAIN中引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;activity</div><div class=\"line\">   android:theme=&quot;@style/AppTheme.Launcher&quot;</div><div class=\"line\">   /&gt;</div></pre></td></tr></table></figure>\n<p>这样做虽然没有白屏了，但是会出现点击桌面图标不会立即反应的现象。</p>\n<p>2.使用Material Design规范</p>\n<p>建立style</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppTheme.Launcher.MD&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/launch_material_design&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>这里面更上面不同的就是使用layer-list方式制作一个简单启动页面</p>\n"},{"title":"搭建个人博客","date":"2017-08-01T08:46:50.000Z","_content":"\n此文讲解的搭建个人博客是通过[GitHub Pages](https://pages.github.com/) + [Hexo](https://hexo.io/zh-cn/)进行搭建。\n\n## 1.安装Hexo\n\n安装前需要需要确定是否安装[Node.js](https://nodejs.org/en/)以及[Git](https://git-scm.com/)，在此文我会重头一步一步安装操作。\n\n#### a.安装 Homebrew\nHomebrew是 macOS 缺失的软件包管理器，具体哪些好处问什么要安装还是自行搜索吧。\n\n安装只需要在终端中输入:\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n安装成功后，直接就可以使用brew进行安装Node以及Git了，当然可以安装的还有很多东西，就不列举了。\n\n#### b.安装Node\n\n官网安装Node也可以，但是此文讲解的是通过brew进行安装，大家一起看看Homebrew的优点。\n\n同样只需要在终端中输入:\n\n```\nbrew install node\n```\n\n\n#### c.安装Git\n\n此处就不多说了直接上代码:\n\n```\nbrew install git\n```\n\n#### d.安装Hexo\n至此准备工作都已经完成可以，开始安装Hex代码如下：\n\n```\n npm install -g hexo-cli\n```\n    \n## 2.建站\n\n初步环境都已经完成，剩下的就是建站了，运行一下命令即可完成建站操作。\n\n```\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n并不一定非要按照上述代码去写，也可以这样写\n\n```\nmkdir <folder>\ncd <folder>\nhexo init\nnpm install\n```\n例如：\n\n```\nmkdir Blogs\ncd Blogs\nhexo init \nnpm install\n```\n\n完成后目录结构如下\n\n```\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n具体什么意思，这里面就不废话了，可以看[官网\n](https://hexo.io/zh-cn/docs/setup.html)\n\n## 3.简单写作\n\n此处不会过度介绍，详情还是去看官网，在这里面只是简单介绍几种常用命令。\n\n#### a.新建文章\n\n```\nhexo new [layout] <title>\n```\n其中`[layout]`有三种默认布局：`post`、`page`、`draft`，分别对应不同路径。\n\n| 布局 | 路径 |\n| --- | --- |\n| post | source/_posts |\n| page | source |\n| draft | source/_drafts |\n\n例如：\n\n```\nhexo new blogs\n```\n\n#### b.更改主题\n\n使用maupassant主题为介绍\n\n```\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-jade@0.3.0 --save\nnpm install hexo-renderer-sass --save\n```\n将主题下载到指定目录，更改配置文件`_config.ym`里面的theme\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: maupassant\n```\n每个主题安装方式不一样，具体的说明看官网更加详细。\n\n## 4.部署\n#### a.创建Github Pages\n\n这里面不多说，主要是创建一个yourName.github.io仓库\n\n#### b.部署Hexo到Github\n\n这里面主要介绍使用hexo deploy部署到git上面\n\n在配置文件`_config.yml`中配置deploy\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:yuserName/yuserName.github.io.git\n  branch: master\n```\n\n例如：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:Chunyang1988/chunyang1988.github.io.git\n  branch: master\n```\n\n之后一件部署\n\n```\nhexo deploy\n```\n#### c.添加SSH密钥\n\n生成密钥\n\n```\nssh-keygen -t rsa -C \"your_email@example.com\"\n```\n例如\n\n```\nssh-keygen -t rsa -C \"chunyang1988.cn@gmail.com\"\n```\n为了方便在后面提示信息中，直接按回车，一直回车下来。\n\n#### d.部署\n\n部署前还需要安装\n\n```\nnpm install hexo-deployer-git --save\n```\n\n一般现在本地写好文章，运行\n\n```\nhexo s\n```\n本地查看一下，如果可以，可以直接部署到git上面\n\n```\nhexo d\n```\n\n## 结束\n\n这时候你输入自己的xxx.github.io即可查看自己的博客了。\n\n","source":"_posts/Blog.md","raw":"---\ntitle: 搭建个人博客\ntags: [Hexo]\ncategories: \ndate: 2017-08-01 16:46:50\n---\n\n此文讲解的搭建个人博客是通过[GitHub Pages](https://pages.github.com/) + [Hexo](https://hexo.io/zh-cn/)进行搭建。\n\n## 1.安装Hexo\n\n安装前需要需要确定是否安装[Node.js](https://nodejs.org/en/)以及[Git](https://git-scm.com/)，在此文我会重头一步一步安装操作。\n\n#### a.安装 Homebrew\nHomebrew是 macOS 缺失的软件包管理器，具体哪些好处问什么要安装还是自行搜索吧。\n\n安装只需要在终端中输入:\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n安装成功后，直接就可以使用brew进行安装Node以及Git了，当然可以安装的还有很多东西，就不列举了。\n\n#### b.安装Node\n\n官网安装Node也可以，但是此文讲解的是通过brew进行安装，大家一起看看Homebrew的优点。\n\n同样只需要在终端中输入:\n\n```\nbrew install node\n```\n\n\n#### c.安装Git\n\n此处就不多说了直接上代码:\n\n```\nbrew install git\n```\n\n#### d.安装Hexo\n至此准备工作都已经完成可以，开始安装Hex代码如下：\n\n```\n npm install -g hexo-cli\n```\n    \n## 2.建站\n\n初步环境都已经完成，剩下的就是建站了，运行一下命令即可完成建站操作。\n\n```\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\n并不一定非要按照上述代码去写，也可以这样写\n\n```\nmkdir <folder>\ncd <folder>\nhexo init\nnpm install\n```\n例如：\n\n```\nmkdir Blogs\ncd Blogs\nhexo init \nnpm install\n```\n\n完成后目录结构如下\n\n```\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n具体什么意思，这里面就不废话了，可以看[官网\n](https://hexo.io/zh-cn/docs/setup.html)\n\n## 3.简单写作\n\n此处不会过度介绍，详情还是去看官网，在这里面只是简单介绍几种常用命令。\n\n#### a.新建文章\n\n```\nhexo new [layout] <title>\n```\n其中`[layout]`有三种默认布局：`post`、`page`、`draft`，分别对应不同路径。\n\n| 布局 | 路径 |\n| --- | --- |\n| post | source/_posts |\n| page | source |\n| draft | source/_drafts |\n\n例如：\n\n```\nhexo new blogs\n```\n\n#### b.更改主题\n\n使用maupassant主题为介绍\n\n```\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-jade@0.3.0 --save\nnpm install hexo-renderer-sass --save\n```\n将主题下载到指定目录，更改配置文件`_config.ym`里面的theme\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: maupassant\n```\n每个主题安装方式不一样，具体的说明看官网更加详细。\n\n## 4.部署\n#### a.创建Github Pages\n\n这里面不多说，主要是创建一个yourName.github.io仓库\n\n#### b.部署Hexo到Github\n\n这里面主要介绍使用hexo deploy部署到git上面\n\n在配置文件`_config.yml`中配置deploy\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:yuserName/yuserName.github.io.git\n  branch: master\n```\n\n例如：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:Chunyang1988/chunyang1988.github.io.git\n  branch: master\n```\n\n之后一件部署\n\n```\nhexo deploy\n```\n#### c.添加SSH密钥\n\n生成密钥\n\n```\nssh-keygen -t rsa -C \"your_email@example.com\"\n```\n例如\n\n```\nssh-keygen -t rsa -C \"chunyang1988.cn@gmail.com\"\n```\n为了方便在后面提示信息中，直接按回车，一直回车下来。\n\n#### d.部署\n\n部署前还需要安装\n\n```\nnpm install hexo-deployer-git --save\n```\n\n一般现在本地写好文章，运行\n\n```\nhexo s\n```\n本地查看一下，如果可以，可以直接部署到git上面\n\n```\nhexo d\n```\n\n## 结束\n\n这时候你输入自己的xxx.github.io即可查看自己的博客了。\n\n","slug":"Blog","published":1,"updated":"2017-08-07T13:51:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21d80006j0fygc1y7d5h","content":"<p>此文讲解的搭建个人博客是通过<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a> + <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo</a>进行搭建。</p>\n<h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1.安装Hexo\"></a>1.安装Hexo</h2><p>安装前需要需要确定是否安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a>以及<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>，在此文我会重头一步一步安装操作。</p>\n<h4 id=\"a-安装-Homebrew\"><a href=\"#a-安装-Homebrew\" class=\"headerlink\" title=\"a.安装 Homebrew\"></a>a.安装 Homebrew</h4><p>Homebrew是 macOS 缺失的软件包管理器，具体哪些好处问什么要安装还是自行搜索吧。</p>\n<p>安装只需要在终端中输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p>安装成功后，直接就可以使用brew进行安装Node以及Git了，当然可以安装的还有很多东西，就不列举了。</p>\n<h4 id=\"b-安装Node\"><a href=\"#b-安装Node\" class=\"headerlink\" title=\"b.安装Node\"></a>b.安装Node</h4><p>官网安装Node也可以，但是此文讲解的是通过brew进行安装，大家一起看看Homebrew的优点。</p>\n<p>同样只需要在终端中输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<h4 id=\"c-安装Git\"><a href=\"#c-安装Git\" class=\"headerlink\" title=\"c.安装Git\"></a>c.安装Git</h4><p>此处就不多说了直接上代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install git</div></pre></td></tr></table></figure>\n<h4 id=\"d-安装Hexo\"><a href=\"#d-安装Hexo\" class=\"headerlink\" title=\"d.安装Hexo\"></a>d.安装Hexo</h4><p>至此准备工作都已经完成可以，开始安装Hex代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h2 id=\"2-建站\"><a href=\"#2-建站\" class=\"headerlink\" title=\"2.建站\"></a>2.建站</h2><p>初步环境都已经完成，剩下的就是建站了，运行一下命令即可完成建站操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init &lt;folder&gt;</div><div class=\"line\">cd &lt;folder&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>并不一定非要按照上述代码去写，也可以这样写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir &lt;folder&gt;</div><div class=\"line\">cd &lt;folder&gt;</div><div class=\"line\">hexo init</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir Blogs</div><div class=\"line\">cd Blogs</div><div class=\"line\">hexo init </div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>完成后目录结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure>\n<p>具体什么意思，这里面就不废话了，可以看<a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"external\">官网\n</a></p>\n<h2 id=\"3-简单写作\"><a href=\"#3-简单写作\" class=\"headerlink\" title=\"3.简单写作\"></a>3.简单写作</h2><p>此处不会过度介绍，详情还是去看官网，在这里面只是简单介绍几种常用命令。</p>\n<h4 id=\"a-新建文章\"><a href=\"#a-新建文章\" class=\"headerlink\" title=\"a.新建文章\"></a>a.新建文章</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>其中<code>[layout]</code>有三种默认布局：<code>post</code>、<code>page</code>、<code>draft</code>，分别对应不同路径。</p>\n<table>\n<thead>\n<tr>\n<th>布局</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>post</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>page</td>\n<td>source</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new blogs</div></pre></td></tr></table></figure>\n<h4 id=\"b-更改主题\"><a href=\"#b-更改主题\" class=\"headerlink\" title=\"b.更改主题\"></a>b.更改主题</h4><p>使用maupassant主题为介绍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class=\"line\">npm install hexo-renderer-jade@0.3.0 --save</div><div class=\"line\">npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure>\n<p>将主题下载到指定目录，更改配置文件<code>_config.ym</code>里面的theme</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: maupassant</div></pre></td></tr></table></figure>\n<p>每个主题安装方式不一样，具体的说明看官网更加详细。</p>\n<h2 id=\"4-部署\"><a href=\"#4-部署\" class=\"headerlink\" title=\"4.部署\"></a>4.部署</h2><h4 id=\"a-创建Github-Pages\"><a href=\"#a-创建Github-Pages\" class=\"headerlink\" title=\"a.创建Github Pages\"></a>a.创建Github Pages</h4><p>这里面不多说，主要是创建一个yourName.github.io仓库</p>\n<h4 id=\"b-部署Hexo到Github\"><a href=\"#b-部署Hexo到Github\" class=\"headerlink\" title=\"b.部署Hexo到Github\"></a>b.部署Hexo到Github</h4><p>这里面主要介绍使用hexo deploy部署到git上面</p>\n<p>在配置文件<code>_config.yml</code>中配置deploy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:yuserName/yuserName.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:Chunyang1988/chunyang1988.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>之后一件部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<h4 id=\"c-添加SSH密钥\"><a href=\"#c-添加SSH密钥\" class=\"headerlink\" title=\"c.添加SSH密钥\"></a>c.添加SSH密钥</h4><p>生成密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;chunyang1988.cn@gmail.com&quot;</div></pre></td></tr></table></figure>\n<p>为了方便在后面提示信息中，直接按回车，一直回车下来。</p>\n<h4 id=\"d-部署\"><a href=\"#d-部署\" class=\"headerlink\" title=\"d.部署\"></a>d.部署</h4><p>部署前还需要安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>一般现在本地写好文章，运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>本地查看一下，如果可以，可以直接部署到git上面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>这时候你输入自己的xxx.github.io即可查看自己的博客了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>此文讲解的搭建个人博客是通过<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a> + <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo</a>进行搭建。</p>\n<h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1.安装Hexo\"></a>1.安装Hexo</h2><p>安装前需要需要确定是否安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a>以及<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a>，在此文我会重头一步一步安装操作。</p>\n<h4 id=\"a-安装-Homebrew\"><a href=\"#a-安装-Homebrew\" class=\"headerlink\" title=\"a.安装 Homebrew\"></a>a.安装 Homebrew</h4><p>Homebrew是 macOS 缺失的软件包管理器，具体哪些好处问什么要安装还是自行搜索吧。</p>\n<p>安装只需要在终端中输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p>安装成功后，直接就可以使用brew进行安装Node以及Git了，当然可以安装的还有很多东西，就不列举了。</p>\n<h4 id=\"b-安装Node\"><a href=\"#b-安装Node\" class=\"headerlink\" title=\"b.安装Node\"></a>b.安装Node</h4><p>官网安装Node也可以，但是此文讲解的是通过brew进行安装，大家一起看看Homebrew的优点。</p>\n<p>同样只需要在终端中输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<h4 id=\"c-安装Git\"><a href=\"#c-安装Git\" class=\"headerlink\" title=\"c.安装Git\"></a>c.安装Git</h4><p>此处就不多说了直接上代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install git</div></pre></td></tr></table></figure>\n<h4 id=\"d-安装Hexo\"><a href=\"#d-安装Hexo\" class=\"headerlink\" title=\"d.安装Hexo\"></a>d.安装Hexo</h4><p>至此准备工作都已经完成可以，开始安装Hex代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h2 id=\"2-建站\"><a href=\"#2-建站\" class=\"headerlink\" title=\"2.建站\"></a>2.建站</h2><p>初步环境都已经完成，剩下的就是建站了，运行一下命令即可完成建站操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init &lt;folder&gt;</div><div class=\"line\">cd &lt;folder&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>并不一定非要按照上述代码去写，也可以这样写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir &lt;folder&gt;</div><div class=\"line\">cd &lt;folder&gt;</div><div class=\"line\">hexo init</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir Blogs</div><div class=\"line\">cd Blogs</div><div class=\"line\">hexo init </div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>完成后目录结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure>\n<p>具体什么意思，这里面就不废话了，可以看<a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"external\">官网\n</a></p>\n<h2 id=\"3-简单写作\"><a href=\"#3-简单写作\" class=\"headerlink\" title=\"3.简单写作\"></a>3.简单写作</h2><p>此处不会过度介绍，详情还是去看官网，在这里面只是简单介绍几种常用命令。</p>\n<h4 id=\"a-新建文章\"><a href=\"#a-新建文章\" class=\"headerlink\" title=\"a.新建文章\"></a>a.新建文章</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>其中<code>[layout]</code>有三种默认布局：<code>post</code>、<code>page</code>、<code>draft</code>，分别对应不同路径。</p>\n<table>\n<thead>\n<tr>\n<th>布局</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>post</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>page</td>\n<td>source</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new blogs</div></pre></td></tr></table></figure>\n<h4 id=\"b-更改主题\"><a href=\"#b-更改主题\" class=\"headerlink\" title=\"b.更改主题\"></a>b.更改主题</h4><p>使用maupassant主题为介绍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class=\"line\">npm install hexo-renderer-jade@0.3.0 --save</div><div class=\"line\">npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure>\n<p>将主题下载到指定目录，更改配置文件<code>_config.ym</code>里面的theme</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: maupassant</div></pre></td></tr></table></figure>\n<p>每个主题安装方式不一样，具体的说明看官网更加详细。</p>\n<h2 id=\"4-部署\"><a href=\"#4-部署\" class=\"headerlink\" title=\"4.部署\"></a>4.部署</h2><h4 id=\"a-创建Github-Pages\"><a href=\"#a-创建Github-Pages\" class=\"headerlink\" title=\"a.创建Github Pages\"></a>a.创建Github Pages</h4><p>这里面不多说，主要是创建一个yourName.github.io仓库</p>\n<h4 id=\"b-部署Hexo到Github\"><a href=\"#b-部署Hexo到Github\" class=\"headerlink\" title=\"b.部署Hexo到Github\"></a>b.部署Hexo到Github</h4><p>这里面主要介绍使用hexo deploy部署到git上面</p>\n<p>在配置文件<code>_config.yml</code>中配置deploy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:yuserName/yuserName.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:Chunyang1988/chunyang1988.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>之后一件部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<h4 id=\"c-添加SSH密钥\"><a href=\"#c-添加SSH密钥\" class=\"headerlink\" title=\"c.添加SSH密钥\"></a>c.添加SSH密钥</h4><p>生成密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C &quot;chunyang1988.cn@gmail.com&quot;</div></pre></td></tr></table></figure>\n<p>为了方便在后面提示信息中，直接按回车，一直回车下来。</p>\n<h4 id=\"d-部署\"><a href=\"#d-部署\" class=\"headerlink\" title=\"d.部署\"></a>d.部署</h4><p>部署前还需要安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>一般现在本地写好文章，运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>本地查看一下，如果可以，可以直接部署到git上面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>这时候你输入自己的xxx.github.io即可查看自己的博客了。</p>\n"},{"title":"炫酷终端","date":"2017-08-03T07:14:41.000Z","_content":"\n此文讲解的是通过[oh_my_zsh](http://ohmyz.sh/)来打造个性界面。\n建议Mac系统使用[Iterm2](https://www.iterm2.com/) + [oh_my_zsh](http://ohmyz.sh/)进行打造炫酷终端。\n\n## Installation 安装\n\n根据需求进行如下操作，如在终端中可以直接输入\n\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n即可安装。\n\nvia curl\n\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\nvia wget\n\n```\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n\n安装完成后，在用户目录有个隐藏文件夹`.oh-my-zsh`可以使用命令行查看\n\n```\ncd ~/.oh-my-zsh\n```\n\n## Updates 升级\n\n默认情况下，系统会每隔几周检测升级，发现更新后提示用户进行更新。当然我们也可以关闭提示自动升级，还可以直接关闭自动升级功能。\n\n* 开关提示升级\n`DISABLE_UPDATE_PROMPT = true`\n* 开关自动升级\n`DISABLE_AUTO_UPDATE = true`\n\n对`~/.zshrc`进行编辑。建议使用vi或者vim进行编辑更改。\n\n手动升级\n在终端中输入`upgrade_oh_my_zsh`\n\n## Edit Themes 更换主题\n\n所有主题都在`~/.oh-my-zsh/themes`目录中，想要预览可以看[官网地址](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n\n更换主题以及操作升级开关，都是在`~/.zshrc`中进行编辑。\n\n使用vi或者vim对`~/.zshrc`进行编辑 `ZSH_THEME=\"robbyrussell\"`等于号后面写上你要替换的主题名称即可。例如`ZSH_THEME=\"af-magic\"`。\n\n## Uninstall 卸载\n\n卸载oh_my_zsh只需要运行`uninstall_oh_my_zsh`即可。\n\n","source":"_posts/CoolShell.md","raw":"---\ntitle: 炫酷终端\ntags: [Shell]\ncategories: [Tools]\ndate: 2017-08-03 15:14:41\n---\n\n此文讲解的是通过[oh_my_zsh](http://ohmyz.sh/)来打造个性界面。\n建议Mac系统使用[Iterm2](https://www.iterm2.com/) + [oh_my_zsh](http://ohmyz.sh/)进行打造炫酷终端。\n\n## Installation 安装\n\n根据需求进行如下操作，如在终端中可以直接输入\n\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n即可安装。\n\nvia curl\n\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\nvia wget\n\n```\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n\n安装完成后，在用户目录有个隐藏文件夹`.oh-my-zsh`可以使用命令行查看\n\n```\ncd ~/.oh-my-zsh\n```\n\n## Updates 升级\n\n默认情况下，系统会每隔几周检测升级，发现更新后提示用户进行更新。当然我们也可以关闭提示自动升级，还可以直接关闭自动升级功能。\n\n* 开关提示升级\n`DISABLE_UPDATE_PROMPT = true`\n* 开关自动升级\n`DISABLE_AUTO_UPDATE = true`\n\n对`~/.zshrc`进行编辑。建议使用vi或者vim进行编辑更改。\n\n手动升级\n在终端中输入`upgrade_oh_my_zsh`\n\n## Edit Themes 更换主题\n\n所有主题都在`~/.oh-my-zsh/themes`目录中，想要预览可以看[官网地址](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n\n更换主题以及操作升级开关，都是在`~/.zshrc`中进行编辑。\n\n使用vi或者vim对`~/.zshrc`进行编辑 `ZSH_THEME=\"robbyrussell\"`等于号后面写上你要替换的主题名称即可。例如`ZSH_THEME=\"af-magic\"`。\n\n## Uninstall 卸载\n\n卸载oh_my_zsh只需要运行`uninstall_oh_my_zsh`即可。\n\n","slug":"CoolShell","published":1,"updated":"2017-08-06T03:08:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21df0009j0fyh9oe8pze","content":"<p>此文讲解的是通过<a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\">oh_my_zsh</a>来打造个性界面。<br>建议Mac系统使用<a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">Iterm2</a> + <a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\">oh_my_zsh</a>进行打造炫酷终端。</p>\n<h2 id=\"Installation-安装\"><a href=\"#Installation-安装\" class=\"headerlink\" title=\"Installation 安装\"></a>Installation 安装</h2><p>根据需求进行如下操作，如在终端中可以直接输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>\n<p>即可安装。</p>\n<p>via curl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>\n<p>via wget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure>\n<p>安装完成后，在用户目录有个隐藏文件夹<code>.oh-my-zsh</code>可以使用命令行查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.oh-my-zsh</div></pre></td></tr></table></figure>\n<h2 id=\"Updates-升级\"><a href=\"#Updates-升级\" class=\"headerlink\" title=\"Updates 升级\"></a>Updates 升级</h2><p>默认情况下，系统会每隔几周检测升级，发现更新后提示用户进行更新。当然我们也可以关闭提示自动升级，还可以直接关闭自动升级功能。</p>\n<ul>\n<li>开关提示升级<br><code>DISABLE_UPDATE_PROMPT = true</code></li>\n<li>开关自动升级<br><code>DISABLE_AUTO_UPDATE = true</code></li>\n</ul>\n<p>对<code>~/.zshrc</code>进行编辑。建议使用vi或者vim进行编辑更改。</p>\n<p>手动升级<br>在终端中输入<code>upgrade_oh_my_zsh</code></p>\n<h2 id=\"Edit-Themes-更换主题\"><a href=\"#Edit-Themes-更换主题\" class=\"headerlink\" title=\"Edit Themes 更换主题\"></a>Edit Themes 更换主题</h2><p>所有主题都在<code>~/.oh-my-zsh/themes</code>目录中，想要预览可以看<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">官网地址</a></p>\n<p>更换主题以及操作升级开关，都是在<code>~/.zshrc</code>中进行编辑。</p>\n<p>使用vi或者vim对<code>~/.zshrc</code>进行编辑 <code>ZSH_THEME=&quot;robbyrussell&quot;</code>等于号后面写上你要替换的主题名称即可。例如<code>ZSH_THEME=&quot;af-magic&quot;</code>。</p>\n<h2 id=\"Uninstall-卸载\"><a href=\"#Uninstall-卸载\" class=\"headerlink\" title=\"Uninstall 卸载\"></a>Uninstall 卸载</h2><p>卸载oh_my_zsh只需要运行<code>uninstall_oh_my_zsh</code>即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>此文讲解的是通过<a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\">oh_my_zsh</a>来打造个性界面。<br>建议Mac系统使用<a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">Iterm2</a> + <a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\">oh_my_zsh</a>进行打造炫酷终端。</p>\n<h2 id=\"Installation-安装\"><a href=\"#Installation-安装\" class=\"headerlink\" title=\"Installation 安装\"></a>Installation 安装</h2><p>根据需求进行如下操作，如在终端中可以直接输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>\n<p>即可安装。</p>\n<p>via curl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>\n<p>via wget</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure>\n<p>安装完成后，在用户目录有个隐藏文件夹<code>.oh-my-zsh</code>可以使用命令行查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.oh-my-zsh</div></pre></td></tr></table></figure>\n<h2 id=\"Updates-升级\"><a href=\"#Updates-升级\" class=\"headerlink\" title=\"Updates 升级\"></a>Updates 升级</h2><p>默认情况下，系统会每隔几周检测升级，发现更新后提示用户进行更新。当然我们也可以关闭提示自动升级，还可以直接关闭自动升级功能。</p>\n<ul>\n<li>开关提示升级<br><code>DISABLE_UPDATE_PROMPT = true</code></li>\n<li>开关自动升级<br><code>DISABLE_AUTO_UPDATE = true</code></li>\n</ul>\n<p>对<code>~/.zshrc</code>进行编辑。建议使用vi或者vim进行编辑更改。</p>\n<p>手动升级<br>在终端中输入<code>upgrade_oh_my_zsh</code></p>\n<h2 id=\"Edit-Themes-更换主题\"><a href=\"#Edit-Themes-更换主题\" class=\"headerlink\" title=\"Edit Themes 更换主题\"></a>Edit Themes 更换主题</h2><p>所有主题都在<code>~/.oh-my-zsh/themes</code>目录中，想要预览可以看<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\" target=\"_blank\" rel=\"external\">官网地址</a></p>\n<p>更换主题以及操作升级开关，都是在<code>~/.zshrc</code>中进行编辑。</p>\n<p>使用vi或者vim对<code>~/.zshrc</code>进行编辑 <code>ZSH_THEME=&quot;robbyrussell&quot;</code>等于号后面写上你要替换的主题名称即可。例如<code>ZSH_THEME=&quot;af-magic&quot;</code>。</p>\n<h2 id=\"Uninstall-卸载\"><a href=\"#Uninstall-卸载\" class=\"headerlink\" title=\"Uninstall 卸载\"></a>Uninstall 卸载</h2><p>卸载oh_my_zsh只需要运行<code>uninstall_oh_my_zsh</code>即可。</p>\n"},{"title":"DataBinding","date":"2017-09-09T14:36:30.000Z","_content":"此文讲解的是MVVM中的Data Binding数据绑定\n\n## 打开数据绑定\n在Model的gradle中添加：\n\n```\nandroid {\n    ....\n    dataBinding {\n        enabled = true\n    }\n}\n```\n\n## Data Binding Layout说明\n\n使用Data Binding后，可以将UI代码放到xml中，布局和数据更加紧密。\n\nxml文件中，根节点为layout，之后data标签，在下面就是常用界面布局文件。\n\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"/>\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.lastName}\"/>\n   </LinearLayout>\n</layout>\n```\n\n### data标签常用属性\n**class属性**\n`class` 自定义Binding名称，如果不写则默认是驼峰xml文件名+Binding，例如activity_main.xml则为ActivityMainBinding。如果有`class = \"MainViewBinding\"` 则直接这这个名字。\n\n**variable标签**\n用于描述一个对象，之后在布局中引用使用，使用`name`表示对象引用时使用名称，`type`为要引用的对象。在View中用`@{}`来引用。例如\n\n```\n<variable name = \"user\" type = \"com.example.User\"/>\n\n...\n\n<TextView \n    android:layout_width = \"warp_content\"\n    android:layout_hight = \"warp_content\"\n    android:text = \"@{user.name}\"/>\n```\n\n**import标签**\n导入跟Java用法一样，只要导入了当前类，后面引用的时候，就可以直接使用，不需要在制定路径例如：\n\n```\n<data>\n    <import type=\"android.view.View\"/>\n</data>\n...\n<TextView\n   android:text=\"@{user.lastName}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\"/>\n```\n\n```\n<data>\n    <import type=\"com.example.MyStringUtils\"/>\n    <variable name=\"user\" type=\"com.example.User\"/>\n</data>\n…\n<TextView\n   android:text=\"@{MyStringUtils.capitalize(user.lastName)}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n   \n```\n\n## Binding 数据对象\n创建正确的数据对象才能在xml文件中引用，反之则会报错。\n主要就是对属性进行getXX、isXX等。\n\n## 运算符\n\n* 算术 + - / * %\n* 字符串合并 +\n* 逻辑 && ||\n* 二元 & | ^\n* 一元 + - ! ~\n* 移位 >> >>> <<\n* 比较 == > < >= <=\n* Instanceof\n* Grouping ()\n* 文字 - character, String, numeric, null\n* Cast\n* 方法调用\n* Field 访问\n* Array 访问 []\n* 三元 ?:\n\n尚且不支持this,super,new,以及显示的泛型，还支持一种空合并运算符\n\n```\nandroid:text = \"@{user.displayName ?? user.lastName}\"\n```\n还可以使用\n\n```\nandroid:text=\"@{@string/nameFormat(firstName, lastName)}\"\n\n<string name=\"nameFormat\">%s, %s</string>\n```\n## 事件监听\n事件监听两种实现方式\n\n1. 方法引用\n    主要是使用`名称::方法名`格式，而Binding类中方法必须有View参数，要不然编译不通过。\n    \n    ```\n    public class Handlers {\n        public void onClickFriend(View view) { ... }\n    }\n    \n    ····\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <data>\n           <variable name=\"handlers\" type=\"com.example.Handlers\"/>\n           <variable name=\"user\" type=\"com.example.User\"/>\n       </data>\n       <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.firstName}\"\n               android:onClick=\"@{handlers::onClickFriend}\"/>\n       </LinearLayout>\n    </layout>\n    ```\n\n2. 监听器绑定\n使用`() -> 名称.方法(参数...)`\n\n```\npublic class Presenter {\n    public void onSaveClick(Task task){}\n}\n···\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <data>\n        <variable name=\"task\" type=\"com.android.example.Task\" />\n        <variable name=\"presenter\" type=\"com.android.example.Presenter\" />\n    </data>\n    <LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\">\n        <Button android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\n        android:onClick=\"@{() -> presenter.onSaveClick(task)}\" />\n    </LinearLayout>\n</layout>\n```\n\n## ID Views\n只要是在xml中，带有id的View都会在Binding中通过public final 来修饰。直接调用也可以达到findViewById效果。\n\n## Observable \n动态更新数据\n    \nhttp://www.jianshu.com/p/b1df61a4df77\nhttp://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/\nhttp://www.jianshu.com/p/87d4b9f30960\n\n\n\n\n\n\n\n\n","source":"_posts/DataBinding.md","raw":"---\ntitle: DataBinding\ndate: 2017-09-09 22:36:30\ntags: [Android]\n---\n此文讲解的是MVVM中的Data Binding数据绑定\n\n## 打开数据绑定\n在Model的gradle中添加：\n\n```\nandroid {\n    ....\n    dataBinding {\n        enabled = true\n    }\n}\n```\n\n## Data Binding Layout说明\n\n使用Data Binding后，可以将UI代码放到xml中，布局和数据更加紧密。\n\nxml文件中，根节点为layout，之后data标签，在下面就是常用界面布局文件。\n\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n   <data>\n       <variable name=\"user\" type=\"com.example.User\"/>\n   </data>\n   <LinearLayout\n       android:orientation=\"vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\">\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.firstName}\"/>\n       <TextView android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@{user.lastName}\"/>\n   </LinearLayout>\n</layout>\n```\n\n### data标签常用属性\n**class属性**\n`class` 自定义Binding名称，如果不写则默认是驼峰xml文件名+Binding，例如activity_main.xml则为ActivityMainBinding。如果有`class = \"MainViewBinding\"` 则直接这这个名字。\n\n**variable标签**\n用于描述一个对象，之后在布局中引用使用，使用`name`表示对象引用时使用名称，`type`为要引用的对象。在View中用`@{}`来引用。例如\n\n```\n<variable name = \"user\" type = \"com.example.User\"/>\n\n...\n\n<TextView \n    android:layout_width = \"warp_content\"\n    android:layout_hight = \"warp_content\"\n    android:text = \"@{user.name}\"/>\n```\n\n**import标签**\n导入跟Java用法一样，只要导入了当前类，后面引用的时候，就可以直接使用，不需要在制定路径例如：\n\n```\n<data>\n    <import type=\"android.view.View\"/>\n</data>\n...\n<TextView\n   android:text=\"@{user.lastName}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"\n   android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\"/>\n```\n\n```\n<data>\n    <import type=\"com.example.MyStringUtils\"/>\n    <variable name=\"user\" type=\"com.example.User\"/>\n</data>\n…\n<TextView\n   android:text=\"@{MyStringUtils.capitalize(user.lastName)}\"\n   android:layout_width=\"wrap_content\"\n   android:layout_height=\"wrap_content\"/>\n   \n```\n\n## Binding 数据对象\n创建正确的数据对象才能在xml文件中引用，反之则会报错。\n主要就是对属性进行getXX、isXX等。\n\n## 运算符\n\n* 算术 + - / * %\n* 字符串合并 +\n* 逻辑 && ||\n* 二元 & | ^\n* 一元 + - ! ~\n* 移位 >> >>> <<\n* 比较 == > < >= <=\n* Instanceof\n* Grouping ()\n* 文字 - character, String, numeric, null\n* Cast\n* 方法调用\n* Field 访问\n* Array 访问 []\n* 三元 ?:\n\n尚且不支持this,super,new,以及显示的泛型，还支持一种空合并运算符\n\n```\nandroid:text = \"@{user.displayName ?? user.lastName}\"\n```\n还可以使用\n\n```\nandroid:text=\"@{@string/nameFormat(firstName, lastName)}\"\n\n<string name=\"nameFormat\">%s, %s</string>\n```\n## 事件监听\n事件监听两种实现方式\n\n1. 方法引用\n    主要是使用`名称::方法名`格式，而Binding类中方法必须有View参数，要不然编译不通过。\n    \n    ```\n    public class Handlers {\n        public void onClickFriend(View view) { ... }\n    }\n    \n    ····\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <data>\n           <variable name=\"handlers\" type=\"com.example.Handlers\"/>\n           <variable name=\"user\" type=\"com.example.User\"/>\n       </data>\n       <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.firstName}\"\n               android:onClick=\"@{handlers::onClickFriend}\"/>\n       </LinearLayout>\n    </layout>\n    ```\n\n2. 监听器绑定\n使用`() -> 名称.方法(参数...)`\n\n```\npublic class Presenter {\n    public void onSaveClick(Task task){}\n}\n···\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <data>\n        <variable name=\"task\" type=\"com.android.example.Task\" />\n        <variable name=\"presenter\" type=\"com.android.example.Presenter\" />\n    </data>\n    <LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\">\n        <Button android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\n        android:onClick=\"@{() -> presenter.onSaveClick(task)}\" />\n    </LinearLayout>\n</layout>\n```\n\n## ID Views\n只要是在xml中，带有id的View都会在Binding中通过public final 来修饰。直接调用也可以达到findViewById效果。\n\n## Observable \n动态更新数据\n    \nhttp://www.jianshu.com/p/b1df61a4df77\nhttp://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/\nhttp://www.jianshu.com/p/87d4b9f30960\n\n\n\n\n\n\n\n\n","slug":"DataBinding","published":1,"updated":"2018-01-18T09:48:42.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21di000bj0fywk21mhye","content":"<p>此文讲解的是MVVM中的Data Binding数据绑定</p>\n<h2 id=\"打开数据绑定\"><a href=\"#打开数据绑定\" class=\"headerlink\" title=\"打开数据绑定\"></a>打开数据绑定</h2><p>在Model的gradle中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    ....</div><div class=\"line\">    dataBinding &#123;</div><div class=\"line\">        enabled = true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Data-Binding-Layout说明\"><a href=\"#Data-Binding-Layout说明\" class=\"headerlink\" title=\"Data Binding Layout说明\"></a>Data Binding Layout说明</h2><p>使用Data Binding后，可以将UI代码放到xml中，布局和数据更加紧密。</p>\n<p>xml文件中，根节点为layout，之后data标签，在下面就是常用界面布局文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;/&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"data标签常用属性\"><a href=\"#data标签常用属性\" class=\"headerlink\" title=\"data标签常用属性\"></a>data标签常用属性</h3><p><strong>class属性</strong><br><code>class</code> 自定义Binding名称，如果不写则默认是驼峰xml文件名+Binding，例如activity_main.xml则为ActivityMainBinding。如果有<code>class = &quot;MainViewBinding&quot;</code> 则直接这这个名字。</p>\n<p><strong>variable标签</strong><br>用于描述一个对象，之后在布局中引用使用，使用<code>name</code>表示对象引用时使用名称，<code>type</code>为要引用的对象。在View中用<code>@{}</code>来引用。例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;variable name = &quot;user&quot; type = &quot;com.example.User&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&lt;TextView </div><div class=\"line\">    android:layout_width = &quot;warp_content&quot;</div><div class=\"line\">    android:layout_hight = &quot;warp_content&quot;</div><div class=\"line\">    android:text = &quot;@&#123;user.name&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>import标签</strong><br>导入跟Java用法一样，只要导入了当前类，后面引用的时候，就可以直接使用，不需要在制定路径例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.view.View&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">...</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">   android:visibility=&quot;@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;com.example.MyStringUtils&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">…</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Binding-数据对象\"><a href=\"#Binding-数据对象\" class=\"headerlink\" title=\"Binding 数据对象\"></a>Binding 数据对象</h2><p>创建正确的数据对象才能在xml文件中引用，反之则会报错。<br>主要就是对属性进行getXX、isXX等。</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>算术 + - / * %</li>\n<li>字符串合并 +</li>\n<li>逻辑 &amp;&amp; ||</li>\n<li>二元 &amp; | ^</li>\n<li>一元 + - ! ~</li>\n<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>\n<li>比较 == &gt; &lt; &gt;= &lt;=</li>\n<li>Instanceof</li>\n<li>Grouping ()</li>\n<li>文字 - character, String, numeric, null</li>\n<li>Cast</li>\n<li>方法调用</li>\n<li>Field 访问</li>\n<li>Array 访问 []</li>\n<li>三元 ?:</li>\n</ul>\n<p>尚且不支持this,super,new,以及显示的泛型，还支持一种空合并运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text = &quot;@&#123;user.displayName ?? user.lastName&#125;&quot;</div></pre></td></tr></table></figure>\n<p>还可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=&quot;@&#123;@string/nameFormat(firstName, lastName)&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">&lt;string name=&quot;nameFormat&quot;&gt;%s, %s&lt;/string&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h2><p>事件监听两种实现方式</p>\n<ol>\n<li><p>方法引用<br> 主要是使用<code>名称::方法名</code>格式，而Binding类中方法必须有View参数，要不然编译不通过。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Handlers &#123;</div><div class=\"line\">    public void onClickFriend(View view) &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">····</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;handlers&quot; type=&quot;com.example.Handlers&quot;/&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;handlers::onClickFriend&#125;&quot;/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>监听器绑定<br>使用<code>() -&gt; 名称.方法(参数...)</code></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Presenter &#123;</div><div class=\"line\">    public void onSaveClick(Task task)&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">···</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;data&gt;</div><div class=\"line\">        &lt;variable name=&quot;task&quot; type=&quot;com.android.example.Task&quot; /&gt;</div><div class=\"line\">        &lt;variable name=&quot;presenter&quot; type=&quot;com.android.example.Presenter&quot; /&gt;</div><div class=\"line\">    &lt;/data&gt;</div><div class=\"line\">    &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\">        &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:onClick=&quot;@&#123;() -&gt; presenter.onSaveClick(task)&#125;&quot; /&gt;</div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"ID-Views\"><a href=\"#ID-Views\" class=\"headerlink\" title=\"ID Views\"></a>ID Views</h2><p>只要是在xml中，带有id的View都会在Binding中通过public final 来修饰。直接调用也可以达到findViewById效果。</p>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>动态更新数据</p>\n<p><a href=\"http://www.jianshu.com/p/b1df61a4df77\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/b1df61a4df77</a><br><a href=\"http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/\" target=\"_blank\" rel=\"external\">http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/</a><br><a href=\"http://www.jianshu.com/p/87d4b9f30960\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/87d4b9f30960</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>此文讲解的是MVVM中的Data Binding数据绑定</p>\n<h2 id=\"打开数据绑定\"><a href=\"#打开数据绑定\" class=\"headerlink\" title=\"打开数据绑定\"></a>打开数据绑定</h2><p>在Model的gradle中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    ....</div><div class=\"line\">    dataBinding &#123;</div><div class=\"line\">        enabled = true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Data-Binding-Layout说明\"><a href=\"#Data-Binding-Layout说明\" class=\"headerlink\" title=\"Data Binding Layout说明\"></a>Data Binding Layout说明</h2><p>使用Data Binding后，可以将UI代码放到xml中，布局和数据更加紧密。</p>\n<p>xml文件中，根节点为layout，之后data标签，在下面就是常用界面布局文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;/&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"data标签常用属性\"><a href=\"#data标签常用属性\" class=\"headerlink\" title=\"data标签常用属性\"></a>data标签常用属性</h3><p><strong>class属性</strong><br><code>class</code> 自定义Binding名称，如果不写则默认是驼峰xml文件名+Binding，例如activity_main.xml则为ActivityMainBinding。如果有<code>class = &quot;MainViewBinding&quot;</code> 则直接这这个名字。</p>\n<p><strong>variable标签</strong><br>用于描述一个对象，之后在布局中引用使用，使用<code>name</code>表示对象引用时使用名称，<code>type</code>为要引用的对象。在View中用<code>@{}</code>来引用。例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;variable name = &quot;user&quot; type = &quot;com.example.User&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&lt;TextView </div><div class=\"line\">    android:layout_width = &quot;warp_content&quot;</div><div class=\"line\">    android:layout_hight = &quot;warp_content&quot;</div><div class=\"line\">    android:text = &quot;@&#123;user.name&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>import标签</strong><br>导入跟Java用法一样，只要导入了当前类，后面引用的时候，就可以直接使用，不需要在制定路径例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.view.View&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">...</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">   android:visibility=&quot;@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;com.example.MyStringUtils&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">…</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Binding-数据对象\"><a href=\"#Binding-数据对象\" class=\"headerlink\" title=\"Binding 数据对象\"></a>Binding 数据对象</h2><p>创建正确的数据对象才能在xml文件中引用，反之则会报错。<br>主要就是对属性进行getXX、isXX等。</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>算术 + - / * %</li>\n<li>字符串合并 +</li>\n<li>逻辑 &amp;&amp; ||</li>\n<li>二元 &amp; | ^</li>\n<li>一元 + - ! ~</li>\n<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>\n<li>比较 == &gt; &lt; &gt;= &lt;=</li>\n<li>Instanceof</li>\n<li>Grouping ()</li>\n<li>文字 - character, String, numeric, null</li>\n<li>Cast</li>\n<li>方法调用</li>\n<li>Field 访问</li>\n<li>Array 访问 []</li>\n<li>三元 ?:</li>\n</ul>\n<p>尚且不支持this,super,new,以及显示的泛型，还支持一种空合并运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text = &quot;@&#123;user.displayName ?? user.lastName&#125;&quot;</div></pre></td></tr></table></figure>\n<p>还可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:text=&quot;@&#123;@string/nameFormat(firstName, lastName)&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">&lt;string name=&quot;nameFormat&quot;&gt;%s, %s&lt;/string&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h2><p>事件监听两种实现方式</p>\n<ol>\n<li><p>方法引用<br> 主要是使用<code>名称::方法名</code>格式，而Binding类中方法必须有View参数，要不然编译不通过。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Handlers &#123;</div><div class=\"line\">    public void onClickFriend(View view) &#123; ... &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">····</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;handlers&quot; type=&quot;com.example.Handlers&quot;/&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;handlers::onClickFriend&#125;&quot;/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>监听器绑定<br>使用<code>() -&gt; 名称.方法(参数...)</code></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Presenter &#123;</div><div class=\"line\">    public void onSaveClick(Task task)&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">···</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;data&gt;</div><div class=\"line\">        &lt;variable name=&quot;task&quot; type=&quot;com.android.example.Task&quot; /&gt;</div><div class=\"line\">        &lt;variable name=&quot;presenter&quot; type=&quot;com.android.example.Presenter&quot; /&gt;</div><div class=\"line\">    &lt;/data&gt;</div><div class=\"line\">    &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\">        &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:onClick=&quot;@&#123;() -&gt; presenter.onSaveClick(task)&#125;&quot; /&gt;</div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"ID-Views\"><a href=\"#ID-Views\" class=\"headerlink\" title=\"ID Views\"></a>ID Views</h2><p>只要是在xml中，带有id的View都会在Binding中通过public final 来修饰。直接调用也可以达到findViewById效果。</p>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><p>动态更新数据</p>\n<p><a href=\"http://www.jianshu.com/p/b1df61a4df77\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/b1df61a4df77</a><br><a href=\"http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/\" target=\"_blank\" rel=\"external\">http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/</a><br><a href=\"http://www.jianshu.com/p/87d4b9f30960\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/87d4b9f30960</a></p>\n"},{"title":"Dagger2简单使用","date":"2017-09-24T04:38:59.000Z","_content":"\n\nDagger2是基于JSR—330标准的依赖注入框架，也就是在编译期间自动生成代码，来创建相应的对象。\n\n## Dagger2相应注释讲解\n此文讲解案例使用`Retrofit`讲解，讲解前先把常规写法写出来大家根据此对比，来发现Dagger2的便利之处。\n\n```\n        //创建OkHttpClient\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(15, TimeUnit.SECONDS);\n        client.writeTimeout(30, TimeUnit.SECONDS);\n        client.readTimeout(30, TimeUnit.SECONDS);\n        \n        //添加Interceptor\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.i(TAG, message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n        client.addInterceptor(logging);\n        client.addNetworkInterceptor(new StethoInterceptor());\n        client.addNetworkInterceptor(new NetworkInterceptor());\n        \n        //创建Retrofit，传递OkHttpClient、HostUrl\n        Retrofit retrofit = new Retrofit.Builder().client(client.build())\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                .baseUrl(HOST_URL).build();\n                \n        //创建ApiService\n        mService = retrofit.create(ApiService.class);\n```\n大家都知道`Retrofit`中Api的调用都会放在`ApiService`中，那么使用`Dagger2`如何来获取到`ApiService`？如何创建`Retrofit`对象？如何传递`OkHttpClient`对象？大家先带着这样的问题来看此文。\n\n### @Inject\n`@Inject`负责标记那些需要被依赖注入自动创建出来，说白一点就是看见`@Inject`就代表这个对象在依赖注入中被引用或者被new出来。\n\n在`ApiModule`中代码如下，先不用看非`@Inject`地方，后续会讲到。\n\n```\n@Module\npublic class ApiModule {\n    String host;\n\n    @Inject\n    public ApiModule(String host) {\n        this.host = host;\n    }\n    \n...\n\n}\n\n```\n\n在`ApiManager`属性中添加`@Inject ApiService`\n\n```\npublic class ApiManager {\n\n    private static class Holder {\n        private static ApiManager IN = new ApiManager();\n    }\n\n    public static ApiManager getInstance() {\n        return Holder.IN;\n    }\n\n    @Inject\n    ApiService apiService;\n\n    public ApiManager() {\n        DaggerApiComponent.builder().apiModule(new ApiModule(\"\")).build().inject(this);\n    }\n}\n```\n\n\n### @Module\n\n通过`@Module`注解，Dagger才知道怎么去依赖注入，也就是上文中的`@Inject`的对象在此处查找并构造出来。\n\n```\n@Module\npublic class ApiModule {\n    String host;\n\n    @Inject\n    public ApiModule(String host) {\n        this.host = host;\n    }\n\n    @Provides\n    @SoApp\n    public OkHttpClient okHttpClient() {\n          //创建OkHttpClient\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(15, TimeUnit.SECONDS);\n        client.writeTimeout(30, TimeUnit.SECONDS);\n        client.readTimeout(30, TimeUnit.SECONDS);\n        \n        //添加Interceptor\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.i(TAG, message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n        client.addInterceptor(logging);\n        client.addNetworkInterceptor(new StethoInterceptor());\n        client.addNetworkInterceptor(new NetworkInterceptor());\n        return client.build();\n    }\n\n    @Provides\n    @SoApp\n    public ApiService apiService(String host, OkHttpClient client) {\n     //创建Retrofit，传递OkHttpClient、HostUrl\n        Retrofit retrofit = new Retrofit.Builder().client(client)\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .baseUrl(host)\n                .build();\n        return retrofit.create(ApiService.class);\n    }\n\n\n    @Provides\n    String providesHost() {\n        return host;\n    }\n}\n\n```\n\n### @Provides\n\n`@Provides`会标记Module中那些返回依赖的方法，通过此注解查找依赖引用，尤其是有些构造器会有很多参数，而这些参数必须在Module中添加`@Provides`的依赖方法，否则无法编译通过。\n\n```\n@Module\npublic class ApiModule {\n    String host;\n\n    @Inject\n    public ApiModule(String host) {\n        this.host = host;\n    }\n\n    @Provides\n    @SoApp\n    public OkHttpClient okHttpClient() {\n          //创建OkHttpClient\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(15, TimeUnit.SECONDS);\n        client.writeTimeout(30, TimeUnit.SECONDS);\n        client.readTimeout(30, TimeUnit.SECONDS);\n        \n        //添加Interceptor\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.i(TAG, message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n        client.addInterceptor(logging);\n        client.addNetworkInterceptor(new StethoInterceptor());\n        client.addNetworkInterceptor(new NetworkInterceptor());\n        return client.build();\n    }\n\n    @Provides\n    @SoApp\n    public ApiService apiService(String host, OkHttpClient client) {\n     //创建Retrofit，传递OkHttpClient、HostUrl\n        Retrofit retrofit = new Retrofit.Builder().client(client)\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .baseUrl(host)\n                .build();\n        return retrofit.create(ApiService.class);\n    }\n\n\n    @Provides\n    String providesHost() {\n        return host;\n    }\n}\n\n```\n\n### @Component\n\n在`@Component`里面定义了在哪些Module中去依赖注入，`@Component`通常是`@Module`和`@Inject`之间的桥梁。`@Component`也可以依赖其它的component，在此处先不讲解，后续讲解。\n\n```\n@SoApp\n@Component(modules = {ApiModule.class})\npublic interface ApiComponent {\n\n    void inject(ApiManager manager);\n\n}\n```\n\n\n### 使用\n\n在`ApiManager`属性中需要依赖注入的对象例如添加`@Inject ApiService`，Build Make Module 一下即可编译生成` DaggerApiComponent.builder().apiModule(new ApiModule(\"\")).build().inject(this);`\n\n```\npublic class ApiManager {\n\n    private static class Holder {\n        private static ApiManager IN = new ApiManager();\n    }\n\n    public static ApiManager getInstance() {\n        return Holder.IN;\n    }\n\n    @Inject\n    ApiService apiService;\n\n    public ApiManager() {\n        DaggerApiComponent.builder().apiModule(new ApiModule(\"\")).build().inject(this);\n    }\n}\n```\n\n到此基本的Dagger也就讲解完成了，文中还有`@SoApp`注解在下一个文章中讲解。\n\n\n\n","source":"_posts/Dagger2Simple.md","raw":"---\ntitle: Dagger2简单使用\ndate: 2017-9-24 12:38:59\ntags: [Android]\n---\n\n\nDagger2是基于JSR—330标准的依赖注入框架，也就是在编译期间自动生成代码，来创建相应的对象。\n\n## Dagger2相应注释讲解\n此文讲解案例使用`Retrofit`讲解，讲解前先把常规写法写出来大家根据此对比，来发现Dagger2的便利之处。\n\n```\n        //创建OkHttpClient\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(15, TimeUnit.SECONDS);\n        client.writeTimeout(30, TimeUnit.SECONDS);\n        client.readTimeout(30, TimeUnit.SECONDS);\n        \n        //添加Interceptor\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.i(TAG, message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n        client.addInterceptor(logging);\n        client.addNetworkInterceptor(new StethoInterceptor());\n        client.addNetworkInterceptor(new NetworkInterceptor());\n        \n        //创建Retrofit，传递OkHttpClient、HostUrl\n        Retrofit retrofit = new Retrofit.Builder().client(client.build())\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                .baseUrl(HOST_URL).build();\n                \n        //创建ApiService\n        mService = retrofit.create(ApiService.class);\n```\n大家都知道`Retrofit`中Api的调用都会放在`ApiService`中，那么使用`Dagger2`如何来获取到`ApiService`？如何创建`Retrofit`对象？如何传递`OkHttpClient`对象？大家先带着这样的问题来看此文。\n\n### @Inject\n`@Inject`负责标记那些需要被依赖注入自动创建出来，说白一点就是看见`@Inject`就代表这个对象在依赖注入中被引用或者被new出来。\n\n在`ApiModule`中代码如下，先不用看非`@Inject`地方，后续会讲到。\n\n```\n@Module\npublic class ApiModule {\n    String host;\n\n    @Inject\n    public ApiModule(String host) {\n        this.host = host;\n    }\n    \n...\n\n}\n\n```\n\n在`ApiManager`属性中添加`@Inject ApiService`\n\n```\npublic class ApiManager {\n\n    private static class Holder {\n        private static ApiManager IN = new ApiManager();\n    }\n\n    public static ApiManager getInstance() {\n        return Holder.IN;\n    }\n\n    @Inject\n    ApiService apiService;\n\n    public ApiManager() {\n        DaggerApiComponent.builder().apiModule(new ApiModule(\"\")).build().inject(this);\n    }\n}\n```\n\n\n### @Module\n\n通过`@Module`注解，Dagger才知道怎么去依赖注入，也就是上文中的`@Inject`的对象在此处查找并构造出来。\n\n```\n@Module\npublic class ApiModule {\n    String host;\n\n    @Inject\n    public ApiModule(String host) {\n        this.host = host;\n    }\n\n    @Provides\n    @SoApp\n    public OkHttpClient okHttpClient() {\n          //创建OkHttpClient\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(15, TimeUnit.SECONDS);\n        client.writeTimeout(30, TimeUnit.SECONDS);\n        client.readTimeout(30, TimeUnit.SECONDS);\n        \n        //添加Interceptor\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.i(TAG, message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n        client.addInterceptor(logging);\n        client.addNetworkInterceptor(new StethoInterceptor());\n        client.addNetworkInterceptor(new NetworkInterceptor());\n        return client.build();\n    }\n\n    @Provides\n    @SoApp\n    public ApiService apiService(String host, OkHttpClient client) {\n     //创建Retrofit，传递OkHttpClient、HostUrl\n        Retrofit retrofit = new Retrofit.Builder().client(client)\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .baseUrl(host)\n                .build();\n        return retrofit.create(ApiService.class);\n    }\n\n\n    @Provides\n    String providesHost() {\n        return host;\n    }\n}\n\n```\n\n### @Provides\n\n`@Provides`会标记Module中那些返回依赖的方法，通过此注解查找依赖引用，尤其是有些构造器会有很多参数，而这些参数必须在Module中添加`@Provides`的依赖方法，否则无法编译通过。\n\n```\n@Module\npublic class ApiModule {\n    String host;\n\n    @Inject\n    public ApiModule(String host) {\n        this.host = host;\n    }\n\n    @Provides\n    @SoApp\n    public OkHttpClient okHttpClient() {\n          //创建OkHttpClient\n        OkHttpClient.Builder client = new OkHttpClient.Builder();\n        client.connectTimeout(15, TimeUnit.SECONDS);\n        client.writeTimeout(30, TimeUnit.SECONDS);\n        client.readTimeout(30, TimeUnit.SECONDS);\n        \n        //添加Interceptor\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.i(TAG, message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n        client.addInterceptor(logging);\n        client.addNetworkInterceptor(new StethoInterceptor());\n        client.addNetworkInterceptor(new NetworkInterceptor());\n        return client.build();\n    }\n\n    @Provides\n    @SoApp\n    public ApiService apiService(String host, OkHttpClient client) {\n     //创建Retrofit，传递OkHttpClient、HostUrl\n        Retrofit retrofit = new Retrofit.Builder().client(client)\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n                .baseUrl(host)\n                .build();\n        return retrofit.create(ApiService.class);\n    }\n\n\n    @Provides\n    String providesHost() {\n        return host;\n    }\n}\n\n```\n\n### @Component\n\n在`@Component`里面定义了在哪些Module中去依赖注入，`@Component`通常是`@Module`和`@Inject`之间的桥梁。`@Component`也可以依赖其它的component，在此处先不讲解，后续讲解。\n\n```\n@SoApp\n@Component(modules = {ApiModule.class})\npublic interface ApiComponent {\n\n    void inject(ApiManager manager);\n\n}\n```\n\n\n### 使用\n\n在`ApiManager`属性中需要依赖注入的对象例如添加`@Inject ApiService`，Build Make Module 一下即可编译生成` DaggerApiComponent.builder().apiModule(new ApiModule(\"\")).build().inject(this);`\n\n```\npublic class ApiManager {\n\n    private static class Holder {\n        private static ApiManager IN = new ApiManager();\n    }\n\n    public static ApiManager getInstance() {\n        return Holder.IN;\n    }\n\n    @Inject\n    ApiService apiService;\n\n    public ApiManager() {\n        DaggerApiComponent.builder().apiModule(new ApiModule(\"\")).build().inject(this);\n    }\n}\n```\n\n到此基本的Dagger也就讲解完成了，文中还有`@SoApp`注解在下一个文章中讲解。\n\n\n\n","slug":"Dagger2Simple","published":1,"updated":"2018-01-18T09:49:43.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21dk000fj0fys6s51ghv","content":"<p>Dagger2是基于JSR—330标准的依赖注入框架，也就是在编译期间自动生成代码，来创建相应的对象。</p>\n<h2 id=\"Dagger2相应注释讲解\"><a href=\"#Dagger2相应注释讲解\" class=\"headerlink\" title=\"Dagger2相应注释讲解\"></a>Dagger2相应注释讲解</h2><p>此文讲解案例使用<code>Retrofit</code>讲解，讲解前先把常规写法写出来大家根据此对比，来发现Dagger2的便利之处。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建OkHttpClient</div><div class=\"line\">OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class=\"line\">client.connectTimeout(15, TimeUnit.SECONDS);</div><div class=\"line\">client.writeTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">client.readTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\"></div><div class=\"line\">//添加Interceptor</div><div class=\"line\">HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void log(String message) &#123;</div><div class=\"line\">        LogUtil.i(TAG, message);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">client.addInterceptor(logging);</div><div class=\"line\">client.addNetworkInterceptor(new StethoInterceptor());</div><div class=\"line\">client.addNetworkInterceptor(new NetworkInterceptor());</div><div class=\"line\"></div><div class=\"line\">//创建Retrofit，传递OkHttpClient、HostUrl</div><div class=\"line\">Retrofit retrofit = new Retrofit.Builder().client(client.build())</div><div class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">        .baseUrl(HOST_URL).build();</div><div class=\"line\">        </div><div class=\"line\">//创建ApiService</div><div class=\"line\">mService = retrofit.create(ApiService.class);</div></pre></td></tr></table></figure>\n<p>大家都知道<code>Retrofit</code>中Api的调用都会放在<code>ApiService</code>中，那么使用<code>Dagger2</code>如何来获取到<code>ApiService</code>？如何创建<code>Retrofit</code>对象？如何传递<code>OkHttpClient</code>对象？大家先带着这样的问题来看此文。</p>\n<h3 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"@Inject\"></a>@Inject</h3><p><code>@Inject</code>负责标记那些需要被依赖注入自动创建出来，说白一点就是看见<code>@Inject</code>就代表这个对象在依赖注入中被引用或者被new出来。</p>\n<p>在<code>ApiModule</code>中代码如下，先不用看非<code>@Inject</code>地方，后续会讲到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Module</div><div class=\"line\">public class ApiModule &#123;</div><div class=\"line\">    String host;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    public ApiModule(String host) &#123;</div><div class=\"line\">        this.host = host;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>ApiManager</code>属性中添加<code>@Inject ApiService</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ApiManager &#123;</div><div class=\"line\"></div><div class=\"line\">    private static class Holder &#123;</div><div class=\"line\">        private static ApiManager IN = new ApiManager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static ApiManager getInstance() &#123;</div><div class=\"line\">        return Holder.IN;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    ApiService apiService;</div><div class=\"line\"></div><div class=\"line\">    public ApiManager() &#123;</div><div class=\"line\">        DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"@Module\"></a>@Module</h3><p>通过<code>@Module</code>注解，Dagger才知道怎么去依赖注入，也就是上文中的<code>@Inject</code>的对象在此处查找并构造出来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Module</div><div class=\"line\">public class ApiModule &#123;</div><div class=\"line\">    String host;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    public ApiModule(String host) &#123;</div><div class=\"line\">        this.host = host;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public OkHttpClient okHttpClient() &#123;</div><div class=\"line\">          //创建OkHttpClient</div><div class=\"line\">        OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class=\"line\">        client.connectTimeout(15, TimeUnit.SECONDS);</div><div class=\"line\">        client.writeTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        client.readTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        </div><div class=\"line\">        //添加Interceptor</div><div class=\"line\">        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void log(String message) &#123;</div><div class=\"line\">                LogUtil.i(TAG, message);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">        client.addInterceptor(logging);</div><div class=\"line\">        client.addNetworkInterceptor(new StethoInterceptor());</div><div class=\"line\">        client.addNetworkInterceptor(new NetworkInterceptor());</div><div class=\"line\">        return client.build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public ApiService apiService(String host, OkHttpClient client) &#123;</div><div class=\"line\">     //创建Retrofit，传递OkHttpClient、HostUrl</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder().client(client)</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class=\"line\">                .baseUrl(host)</div><div class=\"line\">                .build();</div><div class=\"line\">        return retrofit.create(ApiService.class);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    String providesHost() &#123;</div><div class=\"line\">        return host;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Provides\"><a href=\"#Provides\" class=\"headerlink\" title=\"@Provides\"></a>@Provides</h3><p><code>@Provides</code>会标记Module中那些返回依赖的方法，通过此注解查找依赖引用，尤其是有些构造器会有很多参数，而这些参数必须在Module中添加<code>@Provides</code>的依赖方法，否则无法编译通过。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Module</div><div class=\"line\">public class ApiModule &#123;</div><div class=\"line\">    String host;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    public ApiModule(String host) &#123;</div><div class=\"line\">        this.host = host;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public OkHttpClient okHttpClient() &#123;</div><div class=\"line\">          //创建OkHttpClient</div><div class=\"line\">        OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class=\"line\">        client.connectTimeout(15, TimeUnit.SECONDS);</div><div class=\"line\">        client.writeTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        client.readTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        </div><div class=\"line\">        //添加Interceptor</div><div class=\"line\">        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void log(String message) &#123;</div><div class=\"line\">                LogUtil.i(TAG, message);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">        client.addInterceptor(logging);</div><div class=\"line\">        client.addNetworkInterceptor(new StethoInterceptor());</div><div class=\"line\">        client.addNetworkInterceptor(new NetworkInterceptor());</div><div class=\"line\">        return client.build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public ApiService apiService(String host, OkHttpClient client) &#123;</div><div class=\"line\">     //创建Retrofit，传递OkHttpClient、HostUrl</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder().client(client)</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class=\"line\">                .baseUrl(host)</div><div class=\"line\">                .build();</div><div class=\"line\">        return retrofit.create(ApiService.class);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    String providesHost() &#123;</div><div class=\"line\">        return host;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h3><p>在<code>@Component</code>里面定义了在哪些Module中去依赖注入，<code>@Component</code>通常是<code>@Module</code>和<code>@Inject</code>之间的桥梁。<code>@Component</code>也可以依赖其它的component，在此处先不讲解，后续讲解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SoApp</div><div class=\"line\">@Component(modules = &#123;ApiModule.class&#125;)</div><div class=\"line\">public interface ApiComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    void inject(ApiManager manager);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在<code>ApiManager</code>属性中需要依赖注入的对象例如添加<code>@Inject ApiService</code>，Build Make Module 一下即可编译生成<code>DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ApiManager &#123;</div><div class=\"line\"></div><div class=\"line\">    private static class Holder &#123;</div><div class=\"line\">        private static ApiManager IN = new ApiManager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static ApiManager getInstance() &#123;</div><div class=\"line\">        return Holder.IN;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    ApiService apiService;</div><div class=\"line\"></div><div class=\"line\">    public ApiManager() &#123;</div><div class=\"line\">        DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到此基本的Dagger也就讲解完成了，文中还有<code>@SoApp</code>注解在下一个文章中讲解。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Dagger2是基于JSR—330标准的依赖注入框架，也就是在编译期间自动生成代码，来创建相应的对象。</p>\n<h2 id=\"Dagger2相应注释讲解\"><a href=\"#Dagger2相应注释讲解\" class=\"headerlink\" title=\"Dagger2相应注释讲解\"></a>Dagger2相应注释讲解</h2><p>此文讲解案例使用<code>Retrofit</code>讲解，讲解前先把常规写法写出来大家根据此对比，来发现Dagger2的便利之处。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建OkHttpClient</div><div class=\"line\">OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class=\"line\">client.connectTimeout(15, TimeUnit.SECONDS);</div><div class=\"line\">client.writeTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">client.readTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\"></div><div class=\"line\">//添加Interceptor</div><div class=\"line\">HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void log(String message) &#123;</div><div class=\"line\">        LogUtil.i(TAG, message);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">client.addInterceptor(logging);</div><div class=\"line\">client.addNetworkInterceptor(new StethoInterceptor());</div><div class=\"line\">client.addNetworkInterceptor(new NetworkInterceptor());</div><div class=\"line\"></div><div class=\"line\">//创建Retrofit，传递OkHttpClient、HostUrl</div><div class=\"line\">Retrofit retrofit = new Retrofit.Builder().client(client.build())</div><div class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">        .baseUrl(HOST_URL).build();</div><div class=\"line\">        </div><div class=\"line\">//创建ApiService</div><div class=\"line\">mService = retrofit.create(ApiService.class);</div></pre></td></tr></table></figure>\n<p>大家都知道<code>Retrofit</code>中Api的调用都会放在<code>ApiService</code>中，那么使用<code>Dagger2</code>如何来获取到<code>ApiService</code>？如何创建<code>Retrofit</code>对象？如何传递<code>OkHttpClient</code>对象？大家先带着这样的问题来看此文。</p>\n<h3 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"@Inject\"></a>@Inject</h3><p><code>@Inject</code>负责标记那些需要被依赖注入自动创建出来，说白一点就是看见<code>@Inject</code>就代表这个对象在依赖注入中被引用或者被new出来。</p>\n<p>在<code>ApiModule</code>中代码如下，先不用看非<code>@Inject</code>地方，后续会讲到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Module</div><div class=\"line\">public class ApiModule &#123;</div><div class=\"line\">    String host;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    public ApiModule(String host) &#123;</div><div class=\"line\">        this.host = host;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>ApiManager</code>属性中添加<code>@Inject ApiService</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ApiManager &#123;</div><div class=\"line\"></div><div class=\"line\">    private static class Holder &#123;</div><div class=\"line\">        private static ApiManager IN = new ApiManager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static ApiManager getInstance() &#123;</div><div class=\"line\">        return Holder.IN;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    ApiService apiService;</div><div class=\"line\"></div><div class=\"line\">    public ApiManager() &#123;</div><div class=\"line\">        DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"@Module\"></a>@Module</h3><p>通过<code>@Module</code>注解，Dagger才知道怎么去依赖注入，也就是上文中的<code>@Inject</code>的对象在此处查找并构造出来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Module</div><div class=\"line\">public class ApiModule &#123;</div><div class=\"line\">    String host;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    public ApiModule(String host) &#123;</div><div class=\"line\">        this.host = host;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public OkHttpClient okHttpClient() &#123;</div><div class=\"line\">          //创建OkHttpClient</div><div class=\"line\">        OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class=\"line\">        client.connectTimeout(15, TimeUnit.SECONDS);</div><div class=\"line\">        client.writeTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        client.readTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        </div><div class=\"line\">        //添加Interceptor</div><div class=\"line\">        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void log(String message) &#123;</div><div class=\"line\">                LogUtil.i(TAG, message);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">        client.addInterceptor(logging);</div><div class=\"line\">        client.addNetworkInterceptor(new StethoInterceptor());</div><div class=\"line\">        client.addNetworkInterceptor(new NetworkInterceptor());</div><div class=\"line\">        return client.build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public ApiService apiService(String host, OkHttpClient client) &#123;</div><div class=\"line\">     //创建Retrofit，传递OkHttpClient、HostUrl</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder().client(client)</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class=\"line\">                .baseUrl(host)</div><div class=\"line\">                .build();</div><div class=\"line\">        return retrofit.create(ApiService.class);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    String providesHost() &#123;</div><div class=\"line\">        return host;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Provides\"><a href=\"#Provides\" class=\"headerlink\" title=\"@Provides\"></a>@Provides</h3><p><code>@Provides</code>会标记Module中那些返回依赖的方法，通过此注解查找依赖引用，尤其是有些构造器会有很多参数，而这些参数必须在Module中添加<code>@Provides</code>的依赖方法，否则无法编译通过。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Module</div><div class=\"line\">public class ApiModule &#123;</div><div class=\"line\">    String host;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    public ApiModule(String host) &#123;</div><div class=\"line\">        this.host = host;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public OkHttpClient okHttpClient() &#123;</div><div class=\"line\">          //创建OkHttpClient</div><div class=\"line\">        OkHttpClient.Builder client = new OkHttpClient.Builder();</div><div class=\"line\">        client.connectTimeout(15, TimeUnit.SECONDS);</div><div class=\"line\">        client.writeTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        client.readTimeout(30, TimeUnit.SECONDS);</div><div class=\"line\">        </div><div class=\"line\">        //添加Interceptor</div><div class=\"line\">        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void log(String message) &#123;</div><div class=\"line\">                LogUtil.i(TAG, message);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">        client.addInterceptor(logging);</div><div class=\"line\">        client.addNetworkInterceptor(new StethoInterceptor());</div><div class=\"line\">        client.addNetworkInterceptor(new NetworkInterceptor());</div><div class=\"line\">        return client.build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @SoApp</div><div class=\"line\">    public ApiService apiService(String host, OkHttpClient client) &#123;</div><div class=\"line\">     //创建Retrofit，传递OkHttpClient、HostUrl</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder().client(client)</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class=\"line\">                .baseUrl(host)</div><div class=\"line\">                .build();</div><div class=\"line\">        return retrofit.create(ApiService.class);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    String providesHost() &#123;</div><div class=\"line\">        return host;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a>@Component</h3><p>在<code>@Component</code>里面定义了在哪些Module中去依赖注入，<code>@Component</code>通常是<code>@Module</code>和<code>@Inject</code>之间的桥梁。<code>@Component</code>也可以依赖其它的component，在此处先不讲解，后续讲解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SoApp</div><div class=\"line\">@Component(modules = &#123;ApiModule.class&#125;)</div><div class=\"line\">public interface ApiComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    void inject(ApiManager manager);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在<code>ApiManager</code>属性中需要依赖注入的对象例如添加<code>@Inject ApiService</code>，Build Make Module 一下即可编译生成<code>DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ApiManager &#123;</div><div class=\"line\"></div><div class=\"line\">    private static class Holder &#123;</div><div class=\"line\">        private static ApiManager IN = new ApiManager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static ApiManager getInstance() &#123;</div><div class=\"line\">        return Holder.IN;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Inject</div><div class=\"line\">    ApiService apiService;</div><div class=\"line\"></div><div class=\"line\">    public ApiManager() &#123;</div><div class=\"line\">        DaggerApiComponent.builder().apiModule(new ApiModule(&quot;&quot;)).build().inject(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到此基本的Dagger也就讲解完成了，文中还有<code>@SoApp</code>注解在下一个文章中讲解。</p>\n"},{"title":"Fragment基础知识","date":"2017-11-19T09:54:34.000Z","_content":"\nFragment不能独立存在，它必须嵌入到activity中，而且Fragment的生命周期直接受所在的activity的影响。例如：当activity暂停时，它拥有的所有的Fragment们都暂停了，当activity销毁时，它拥有的所有Fragment们都被销毁。\n\n\n\n\n\n![](https://upload-images.jianshu.io/upload_images/2210217-8d748ff4a0e8a124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500)\n\n\n\n\n\n此文章没有任何讲解，只是纯粹的代码文档，列举几种方法，忘记的时候方便查看巩固使用的。\n\n### 方法一：\n\n在activity的layoutxml文件中声明fragment\n\n```\n<LinearLayoutxmlns:android=\"http://schemas.android.com/apk/res/android\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n android:baselineAligned=\"false\">\n\n   <fragment\n     android:id=\"@+id/titles\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:layout_weight=\"4\"\n     class=\"cn.eoe.first.fragment.LeftFragment\"/>\n\n   <fragment\n     android:id=\"@+id/details\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:layout_weight=\"1\"\n     class=\"cn.eoe.first.fragment.RightFragment\"/>\n\n</LinearLayout>\n\nclass= \"cn.eoe.first.fragment.LeftFragment\" 换成\nandroid:name=\"cn.eoe.first.fragment.LeftFragment\"也可以 \n\n```\n\n### 方法二：在代码中添加fragment到一个ViewGroup\n\n```\n   //先获得Fragment的管理\n    FragmentManager fragmentManager = getFragmentManager();\n   //所有Fragment的事务都是通过FragmentTransaction来完成，在通过管理者获取事务对象\n    FragmentTransaction fragmentTransaction = fragmentManager\n                     .beginTransaction();\n   //实例化要添加的Fragment\n    MyFragment fragment =  new  MyFragment();\n   //添加Fragment通过layout中的id，实例对象，还有tag标签\n     fragmentTransaction.add(R.id.fragment_container1, fragment,\"fragment\");\n    //提交\n    fragmentTransaction.commit();\n\n```\n\n或者\n\n```\n    FragmentTransaction tx =getSupportFragmentManager().beginTransaction();\n    tx.replace(R.id.main, Fragment.instantiate(MyHomeSlidingActivity.**this**,\n               \"com.joymis.audio.FragmentmyhomeInfo\"));\n    tx.commit();\n\n```\n\n其中 \"com.joymis.audio.FragmentmyhomeInfo\"的代码\n\n```\n    public   class  FragmentmyhomeInfo  extends  Fragment {\n\n   @Override\n     public  View onCreateView(LayoutInflater inflater, ViewGroup container,\n              Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.layout_myhome_fragment, container,**false**);\n\n           return  view;\n   }\n\n   @Override\n     public    void  onDestroyView() {\n\n           super.onDestroyView();\n     }\n\n}\n\n```\n\nlayout中的布局为\n\n```\n  <FrameLayout\n     android:id=\"@+id/fragment_container1\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"wrap_content\" />\n\n```\n\n### 其他\n\n要管理fragment们，需使用FragmentManager，要获取它，需在activity中调用方法getFragmentManager()。\n你可以用FragmentManager来做以上事情：\n1使用方法findFragmentById()或findFragmentByTag()，获取activity中已存在的fragment们。\n2使用方法popBackStack()从activity的后退栈中弹出fragment们（这可以模拟后退键引发的动作）。\n3用方法addOnBackStackChangedListerner()注册一个侦听器以监视后退栈的变化。\n\n\n\n\n\n\n","source":"_posts/Fragment-Base.md","raw":"---\ntitle: Fragment基础知识\ndate: 2017-11-19 17:54:34\ntags: [Android]\n---\n\nFragment不能独立存在，它必须嵌入到activity中，而且Fragment的生命周期直接受所在的activity的影响。例如：当activity暂停时，它拥有的所有的Fragment们都暂停了，当activity销毁时，它拥有的所有Fragment们都被销毁。\n\n\n\n\n\n![](https://upload-images.jianshu.io/upload_images/2210217-8d748ff4a0e8a124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500)\n\n\n\n\n\n此文章没有任何讲解，只是纯粹的代码文档，列举几种方法，忘记的时候方便查看巩固使用的。\n\n### 方法一：\n\n在activity的layoutxml文件中声明fragment\n\n```\n<LinearLayoutxmlns:android=\"http://schemas.android.com/apk/res/android\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n android:baselineAligned=\"false\">\n\n   <fragment\n     android:id=\"@+id/titles\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:layout_weight=\"4\"\n     class=\"cn.eoe.first.fragment.LeftFragment\"/>\n\n   <fragment\n     android:id=\"@+id/details\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:layout_weight=\"1\"\n     class=\"cn.eoe.first.fragment.RightFragment\"/>\n\n</LinearLayout>\n\nclass= \"cn.eoe.first.fragment.LeftFragment\" 换成\nandroid:name=\"cn.eoe.first.fragment.LeftFragment\"也可以 \n\n```\n\n### 方法二：在代码中添加fragment到一个ViewGroup\n\n```\n   //先获得Fragment的管理\n    FragmentManager fragmentManager = getFragmentManager();\n   //所有Fragment的事务都是通过FragmentTransaction来完成，在通过管理者获取事务对象\n    FragmentTransaction fragmentTransaction = fragmentManager\n                     .beginTransaction();\n   //实例化要添加的Fragment\n    MyFragment fragment =  new  MyFragment();\n   //添加Fragment通过layout中的id，实例对象，还有tag标签\n     fragmentTransaction.add(R.id.fragment_container1, fragment,\"fragment\");\n    //提交\n    fragmentTransaction.commit();\n\n```\n\n或者\n\n```\n    FragmentTransaction tx =getSupportFragmentManager().beginTransaction();\n    tx.replace(R.id.main, Fragment.instantiate(MyHomeSlidingActivity.**this**,\n               \"com.joymis.audio.FragmentmyhomeInfo\"));\n    tx.commit();\n\n```\n\n其中 \"com.joymis.audio.FragmentmyhomeInfo\"的代码\n\n```\n    public   class  FragmentmyhomeInfo  extends  Fragment {\n\n   @Override\n     public  View onCreateView(LayoutInflater inflater, ViewGroup container,\n              Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.layout_myhome_fragment, container,**false**);\n\n           return  view;\n   }\n\n   @Override\n     public    void  onDestroyView() {\n\n           super.onDestroyView();\n     }\n\n}\n\n```\n\nlayout中的布局为\n\n```\n  <FrameLayout\n     android:id=\"@+id/fragment_container1\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"wrap_content\" />\n\n```\n\n### 其他\n\n要管理fragment们，需使用FragmentManager，要获取它，需在activity中调用方法getFragmentManager()。\n你可以用FragmentManager来做以上事情：\n1使用方法findFragmentById()或findFragmentByTag()，获取activity中已存在的fragment们。\n2使用方法popBackStack()从activity的后退栈中弹出fragment们（这可以模拟后退键引发的动作）。\n3用方法addOnBackStackChangedListerner()注册一个侦听器以监视后退栈的变化。\n\n\n\n\n\n\n","slug":"Fragment-Base","published":1,"updated":"2018-01-19T09:59:37.515Z","_id":"cjclr21dl000hj0fygjftqwe9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Fragment不能独立存在，它必须嵌入到activity中，而且Fragment的生命周期直接受所在的activity的影响。例如：当activity暂停时，它拥有的所有的Fragment们都暂停了，当activity销毁时，它拥有的所有Fragment们都被销毁。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2210217-8d748ff4a0e8a124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\" alt=\"\"></p>\n<p>此文章没有任何讲解，只是纯粹的代码文档，列举几种方法，忘记的时候方便查看巩固使用的。</p>\n<h3 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h3><p>在activity的layoutxml文件中声明fragment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayoutxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\"> android:layout_width=&quot;match_parent&quot;</div><div class=\"line\"> android:layout_height=&quot;match_parent&quot;</div><div class=\"line\"> android:baselineAligned=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;fragment</div><div class=\"line\">     android:id=&quot;@+id/titles&quot;</div><div class=\"line\">     android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_weight=&quot;4&quot;</div><div class=\"line\">     class=&quot;cn.eoe.first.fragment.LeftFragment&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;fragment</div><div class=\"line\">     android:id=&quot;@+id/details&quot;</div><div class=\"line\">     android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_weight=&quot;1&quot;</div><div class=\"line\">     class=&quot;cn.eoe.first.fragment.RightFragment&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div><div class=\"line\"></div><div class=\"line\">class= &quot;cn.eoe.first.fragment.LeftFragment&quot; 换成</div><div class=\"line\">android:name=&quot;cn.eoe.first.fragment.LeftFragment&quot;也可以</div></pre></td></tr></table></figure>\n<h3 id=\"方法二：在代码中添加fragment到一个ViewGroup\"><a href=\"#方法二：在代码中添加fragment到一个ViewGroup\" class=\"headerlink\" title=\"方法二：在代码中添加fragment到一个ViewGroup\"></a>方法二：在代码中添加fragment到一个ViewGroup</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//先获得Fragment的管理</div><div class=\"line\"> FragmentManager fragmentManager = getFragmentManager();</div><div class=\"line\">//所有Fragment的事务都是通过FragmentTransaction来完成，在通过管理者获取事务对象</div><div class=\"line\"> FragmentTransaction fragmentTransaction = fragmentManager</div><div class=\"line\">                  .beginTransaction();</div><div class=\"line\">//实例化要添加的Fragment</div><div class=\"line\"> MyFragment fragment =  new  MyFragment();</div><div class=\"line\">//添加Fragment通过layout中的id，实例对象，还有tag标签</div><div class=\"line\">  fragmentTransaction.add(R.id.fragment_container1, fragment,&quot;fragment&quot;);</div><div class=\"line\"> //提交</div><div class=\"line\"> fragmentTransaction.commit();</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentTransaction tx =getSupportFragmentManager().beginTransaction();</div><div class=\"line\">tx.replace(R.id.main, Fragment.instantiate(MyHomeSlidingActivity.**this**,</div><div class=\"line\">           &quot;com.joymis.audio.FragmentmyhomeInfo&quot;));</div><div class=\"line\">tx.commit();</div></pre></td></tr></table></figure>\n<p>其中 “com.joymis.audio.FragmentmyhomeInfo”的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    public   class  FragmentmyhomeInfo  extends  Fragment &#123;</div><div class=\"line\"></div><div class=\"line\">   @Override</div><div class=\"line\">     public  View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class=\"line\">              Bundle savedInstanceState) &#123;</div><div class=\"line\">         View view = inflater.inflate(R.layout.layout_myhome_fragment, container,**false**);</div><div class=\"line\"></div><div class=\"line\">           return  view;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   @Override</div><div class=\"line\">     public    void  onDestroyView() &#123;</div><div class=\"line\"></div><div class=\"line\">           super.onDestroyView();</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>layout中的布局为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FrameLayout</div><div class=\"line\">   android:id=&quot;@+id/fragment_container1&quot;</div><div class=\"line\">   android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot; /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>要管理fragment们，需使用FragmentManager，要获取它，需在activity中调用方法getFragmentManager()。<br>你可以用FragmentManager来做以上事情：<br>1使用方法findFragmentById()或findFragmentByTag()，获取activity中已存在的fragment们。<br>2使用方法popBackStack()从activity的后退栈中弹出fragment们（这可以模拟后退键引发的动作）。<br>3用方法addOnBackStackChangedListerner()注册一个侦听器以监视后退栈的变化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Fragment不能独立存在，它必须嵌入到activity中，而且Fragment的生命周期直接受所在的activity的影响。例如：当activity暂停时，它拥有的所有的Fragment们都暂停了，当activity销毁时，它拥有的所有Fragment们都被销毁。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2210217-8d748ff4a0e8a124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\" alt=\"\"></p>\n<p>此文章没有任何讲解，只是纯粹的代码文档，列举几种方法，忘记的时候方便查看巩固使用的。</p>\n<h3 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h3><p>在activity的layoutxml文件中声明fragment</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;LinearLayoutxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\"> android:layout_width=&quot;match_parent&quot;</div><div class=\"line\"> android:layout_height=&quot;match_parent&quot;</div><div class=\"line\"> android:baselineAligned=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;fragment</div><div class=\"line\">     android:id=&quot;@+id/titles&quot;</div><div class=\"line\">     android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_weight=&quot;4&quot;</div><div class=\"line\">     class=&quot;cn.eoe.first.fragment.LeftFragment&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;fragment</div><div class=\"line\">     android:id=&quot;@+id/details&quot;</div><div class=\"line\">     android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">     android:layout_weight=&quot;1&quot;</div><div class=\"line\">     class=&quot;cn.eoe.first.fragment.RightFragment&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div><div class=\"line\"></div><div class=\"line\">class= &quot;cn.eoe.first.fragment.LeftFragment&quot; 换成</div><div class=\"line\">android:name=&quot;cn.eoe.first.fragment.LeftFragment&quot;也可以</div></pre></td></tr></table></figure>\n<h3 id=\"方法二：在代码中添加fragment到一个ViewGroup\"><a href=\"#方法二：在代码中添加fragment到一个ViewGroup\" class=\"headerlink\" title=\"方法二：在代码中添加fragment到一个ViewGroup\"></a>方法二：在代码中添加fragment到一个ViewGroup</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//先获得Fragment的管理</div><div class=\"line\"> FragmentManager fragmentManager = getFragmentManager();</div><div class=\"line\">//所有Fragment的事务都是通过FragmentTransaction来完成，在通过管理者获取事务对象</div><div class=\"line\"> FragmentTransaction fragmentTransaction = fragmentManager</div><div class=\"line\">                  .beginTransaction();</div><div class=\"line\">//实例化要添加的Fragment</div><div class=\"line\"> MyFragment fragment =  new  MyFragment();</div><div class=\"line\">//添加Fragment通过layout中的id，实例对象，还有tag标签</div><div class=\"line\">  fragmentTransaction.add(R.id.fragment_container1, fragment,&quot;fragment&quot;);</div><div class=\"line\"> //提交</div><div class=\"line\"> fragmentTransaction.commit();</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentTransaction tx =getSupportFragmentManager().beginTransaction();</div><div class=\"line\">tx.replace(R.id.main, Fragment.instantiate(MyHomeSlidingActivity.**this**,</div><div class=\"line\">           &quot;com.joymis.audio.FragmentmyhomeInfo&quot;));</div><div class=\"line\">tx.commit();</div></pre></td></tr></table></figure>\n<p>其中 “com.joymis.audio.FragmentmyhomeInfo”的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    public   class  FragmentmyhomeInfo  extends  Fragment &#123;</div><div class=\"line\"></div><div class=\"line\">   @Override</div><div class=\"line\">     public  View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class=\"line\">              Bundle savedInstanceState) &#123;</div><div class=\"line\">         View view = inflater.inflate(R.layout.layout_myhome_fragment, container,**false**);</div><div class=\"line\"></div><div class=\"line\">           return  view;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   @Override</div><div class=\"line\">     public    void  onDestroyView() &#123;</div><div class=\"line\"></div><div class=\"line\">           super.onDestroyView();</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>layout中的布局为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;FrameLayout</div><div class=\"line\">   android:id=&quot;@+id/fragment_container1&quot;</div><div class=\"line\">   android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot; /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>要管理fragment们，需使用FragmentManager，要获取它，需在activity中调用方法getFragmentManager()。<br>你可以用FragmentManager来做以上事情：<br>1使用方法findFragmentById()或findFragmentByTag()，获取activity中已存在的fragment们。<br>2使用方法popBackStack()从activity的后退栈中弹出fragment们（这可以模拟后退键引发的动作）。<br>3用方法addOnBackStackChangedListerner()注册一个侦听器以监视后退栈的变化。</p>\n"},{"title":"树莓派3在Mac中安装步骤","date":"2017-09-13T11:13:01.000Z","_content":"\n1.格式TF卡\n磁盘工具->抹掉TAB->MS_DOS(FAT)\n\n2.查看挂载信息\n命令行中输入 `df -h` 查看相对应的TF卡路径如：`/dev/disk2s1`\n\n3.卸载分区\n命令行输入`diskutil numount` \n\n4.确定设备\n命令行输入`diskutil list` 主要目的是查看对应的路径名如：`/dev/disk2`\n\n5.写入系统\n```\nsudo dd bs=4m if=固件名称.img of=上面确定的路径名\n```\n\n例如：\n`sudo dd bs=4m if=LCD35-2016-03-18-raspbian-jessie.img of=/dev/rdisk2`\n\n6.卸载设备\n使用磁盘工具进行卸载即可","source":"_posts/RaspberryPIInstallStep.md","raw":"---\ntitle: 树莓派3在Mac中安装步骤\ndate: 2017-9-13 19:13:01\ntags: [Raspberry PI , 树莓派] \n---\n\n1.格式TF卡\n磁盘工具->抹掉TAB->MS_DOS(FAT)\n\n2.查看挂载信息\n命令行中输入 `df -h` 查看相对应的TF卡路径如：`/dev/disk2s1`\n\n3.卸载分区\n命令行输入`diskutil numount` \n\n4.确定设备\n命令行输入`diskutil list` 主要目的是查看对应的路径名如：`/dev/disk2`\n\n5.写入系统\n```\nsudo dd bs=4m if=固件名称.img of=上面确定的路径名\n```\n\n例如：\n`sudo dd bs=4m if=LCD35-2016-03-18-raspbian-jessie.img of=/dev/rdisk2`\n\n6.卸载设备\n使用磁盘工具进行卸载即可","slug":"RaspberryPIInstallStep","published":1,"updated":"2018-01-18T09:49:17.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21do000kj0fy1muwn6sd","content":"<p>1.格式TF卡<br>磁盘工具-&gt;抹掉TAB-&gt;MS_DOS(FAT)</p>\n<p>2.查看挂载信息<br>命令行中输入 <code>df -h</code> 查看相对应的TF卡路径如：<code>/dev/disk2s1</code></p>\n<p>3.卸载分区<br>命令行输入<code>diskutil numount</code> </p>\n<p>4.确定设备<br>命令行输入<code>diskutil list</code> 主要目的是查看对应的路径名如：<code>/dev/disk2</code></p>\n<p>5.写入系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo dd bs=4m if=固件名称.img of=上面确定的路径名</div></pre></td></tr></table></figure></p>\n<p>例如：<br><code>sudo dd bs=4m if=LCD35-2016-03-18-raspbian-jessie.img of=/dev/rdisk2</code></p>\n<p>6.卸载设备<br>使用磁盘工具进行卸载即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.格式TF卡<br>磁盘工具-&gt;抹掉TAB-&gt;MS_DOS(FAT)</p>\n<p>2.查看挂载信息<br>命令行中输入 <code>df -h</code> 查看相对应的TF卡路径如：<code>/dev/disk2s1</code></p>\n<p>3.卸载分区<br>命令行输入<code>diskutil numount</code> </p>\n<p>4.确定设备<br>命令行输入<code>diskutil list</code> 主要目的是查看对应的路径名如：<code>/dev/disk2</code></p>\n<p>5.写入系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo dd bs=4m if=固件名称.img of=上面确定的路径名</div></pre></td></tr></table></figure></p>\n<p>例如：<br><code>sudo dd bs=4m if=LCD35-2016-03-18-raspbian-jessie.img of=/dev/rdisk2</code></p>\n<p>6.卸载设备<br>使用磁盘工具进行卸载即可</p>\n"},{"title":"Gradle Wrapper 常用方法讲解","date":"2017-08-31T06:44:13.000Z","_content":"\nGradle是一个基于Groovy强大的构建系统，此文讲解的是Android Studio所使用的一些常用命令。至于以后慢慢学习在讲解一些Gradle基础知识。\n\n\n## 常用命令\n\n以下命令都是在Mac系统下的常用命令。\n\n```\n./gradlew -v \t\t# 版本号\n./gradlew clean\t\t# 清理项目build文件夹\n./gradlew build\t\t# 检查依赖并编译打包,同时把debug、release环境的包都打出来。与上文build相对应，一个是清理，一个是生成。\n./gradlew assembleDebug\t\t# 编译并打Debug包\n./gradlew assembleXxxRelease\t\t# 编译并打Release的包\n```\n\n这里面在讲解一下`assemble`的其他使用方法。\n\n```\n./gradlew assembleXxxRelease\t# 生成Xxx渠道的Release版本包\n./gradlew assembleXxx\t# 生成Xxx渠道的Release和Debug版本包\n./gradlew assembleRelease\t# 生成全部渠道的Release版本包。\n```\n\nXxx为渠道名称写法如下：\n\n```\nandroid{\n...\n   productFlavors {\n        tencent{\n        ...\n        ...\n        }\n        ...\n   }\n...\n}\n```\n\n完整版本如下：\n\n```\n// 友盟多渠道打包\nproductFlavors {\n    tencent {}\n    wandoujia {}\n    host {}\n}\n\nproductFlavors.all { flavor ->\n    flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]\n}  \n```\n\n```\n// AndroidManifest.xml清单中如下\n\n<meta-data\n    android:name=\"UMENG_CHANNEL\"\n    android:value=\"${UMENG_CHANNEL_VALUE}\" />\n```\n\n\n\n\n","source":"_posts/Gradlew.md","raw":"---\ntitle: Gradle Wrapper 常用方法讲解\ndate: 2017-08-31 14:44:13\ntags: [Android]\ncategories: [Android]\n---\n\nGradle是一个基于Groovy强大的构建系统，此文讲解的是Android Studio所使用的一些常用命令。至于以后慢慢学习在讲解一些Gradle基础知识。\n\n\n## 常用命令\n\n以下命令都是在Mac系统下的常用命令。\n\n```\n./gradlew -v \t\t# 版本号\n./gradlew clean\t\t# 清理项目build文件夹\n./gradlew build\t\t# 检查依赖并编译打包,同时把debug、release环境的包都打出来。与上文build相对应，一个是清理，一个是生成。\n./gradlew assembleDebug\t\t# 编译并打Debug包\n./gradlew assembleXxxRelease\t\t# 编译并打Release的包\n```\n\n这里面在讲解一下`assemble`的其他使用方法。\n\n```\n./gradlew assembleXxxRelease\t# 生成Xxx渠道的Release版本包\n./gradlew assembleXxx\t# 生成Xxx渠道的Release和Debug版本包\n./gradlew assembleRelease\t# 生成全部渠道的Release版本包。\n```\n\nXxx为渠道名称写法如下：\n\n```\nandroid{\n...\n   productFlavors {\n        tencent{\n        ...\n        ...\n        }\n        ...\n   }\n...\n}\n```\n\n完整版本如下：\n\n```\n// 友盟多渠道打包\nproductFlavors {\n    tencent {}\n    wandoujia {}\n    host {}\n}\n\nproductFlavors.all { flavor ->\n    flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]\n}  \n```\n\n```\n// AndroidManifest.xml清单中如下\n\n<meta-data\n    android:name=\"UMENG_CHANNEL\"\n    android:value=\"${UMENG_CHANNEL_VALUE}\" />\n```\n\n\n\n\n","slug":"Gradlew","published":1,"updated":"2018-01-18T09:48:16.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21dp000mj0fyoab3fpq9","content":"<p>Gradle是一个基于Groovy强大的构建系统，此文讲解的是Android Studio所使用的一些常用命令。至于以后慢慢学习在讲解一些Gradle基础知识。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>以下命令都是在Mac系统下的常用命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">./gradlew -v \t\t# 版本号</div><div class=\"line\">./gradlew clean\t\t# 清理项目build文件夹</div><div class=\"line\">./gradlew build\t\t# 检查依赖并编译打包,同时把debug、release环境的包都打出来。与上文build相对应，一个是清理，一个是生成。</div><div class=\"line\">./gradlew assembleDebug\t\t# 编译并打Debug包</div><div class=\"line\">./gradlew assembleXxxRelease\t\t# 编译并打Release的包</div></pre></td></tr></table></figure>\n<p>这里面在讲解一下<code>assemble</code>的其他使用方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./gradlew assembleXxxRelease\t# 生成Xxx渠道的Release版本包</div><div class=\"line\">./gradlew assembleXxx\t# 生成Xxx渠道的Release和Debug版本包</div><div class=\"line\">./gradlew assembleRelease\t# 生成全部渠道的Release版本包。</div></pre></td></tr></table></figure>\n<p>Xxx为渠道名称写法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">...</div><div class=\"line\">   productFlavors &#123;</div><div class=\"line\">        tencent&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">   &#125;</div><div class=\"line\">...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完整版本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 友盟多渠道打包</div><div class=\"line\">productFlavors &#123;</div><div class=\"line\">    tencent &#123;&#125;</div><div class=\"line\">    wandoujia &#123;&#125;</div><div class=\"line\">    host &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">productFlavors.all &#123; flavor -&gt;</div><div class=\"line\">    flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// AndroidManifest.xml清单中如下</div><div class=\"line\"></div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class=\"line\">    android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; /&gt;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Gradle是一个基于Groovy强大的构建系统，此文讲解的是Android Studio所使用的一些常用命令。至于以后慢慢学习在讲解一些Gradle基础知识。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>以下命令都是在Mac系统下的常用命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">./gradlew -v \t\t# 版本号</div><div class=\"line\">./gradlew clean\t\t# 清理项目build文件夹</div><div class=\"line\">./gradlew build\t\t# 检查依赖并编译打包,同时把debug、release环境的包都打出来。与上文build相对应，一个是清理，一个是生成。</div><div class=\"line\">./gradlew assembleDebug\t\t# 编译并打Debug包</div><div class=\"line\">./gradlew assembleXxxRelease\t\t# 编译并打Release的包</div></pre></td></tr></table></figure>\n<p>这里面在讲解一下<code>assemble</code>的其他使用方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./gradlew assembleXxxRelease\t# 生成Xxx渠道的Release版本包</div><div class=\"line\">./gradlew assembleXxx\t# 生成Xxx渠道的Release和Debug版本包</div><div class=\"line\">./gradlew assembleRelease\t# 生成全部渠道的Release版本包。</div></pre></td></tr></table></figure>\n<p>Xxx为渠道名称写法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">...</div><div class=\"line\">   productFlavors &#123;</div><div class=\"line\">        tencent&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        ...</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">   &#125;</div><div class=\"line\">...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完整版本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 友盟多渠道打包</div><div class=\"line\">productFlavors &#123;</div><div class=\"line\">    tencent &#123;&#125;</div><div class=\"line\">    wandoujia &#123;&#125;</div><div class=\"line\">    host &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">productFlavors.all &#123; flavor -&gt;</div><div class=\"line\">    flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// AndroidManifest.xml清单中如下</div><div class=\"line\"></div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class=\"line\">    android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; /&gt;</div></pre></td></tr></table></figure>\n"},{"title":"Toolbar基本使用","date":"2017-08-18T14:26:05.000Z","_content":"此文讲解的Toolbar为V7包中的Toolbar。此文会有很多不成熟地方，请大家指正。\n\n## 设置样式\n首先使用Toolbar需要先更改Style样式，主要是将样式设置成无Actionbar的样式，当然网上也有很多其他方式，本人使用的代码如下：\n\n```\n\t<style name=\"AppTheme\" parent=\"AppTheme.Base\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n\n    <style name=\"AppTheme.Base\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n\n    </style>\n```\n\n## 官方文档中XML资源\n\n![](http://upload-images.jianshu.io/upload_images/2210217-8f81e990effdea5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/2210217-e3f8039a8db02bf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 常用参数以及方法说明\n### 1.基本使用\n\n\n```\n    <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"?attr/colorPrimary\"\n        tools:logo=\"@mipmap/ic_launcher\"\n        tools:navigationIcon=\"@drawable/ic_acb_list\"\n        tools:subtitle=\"@string/app_name\"\n        tools:subtitleTextColor=\"@color/colorAccent\"\n        tools:title=\"@string/app_name\"\n        tools:titleTextColor=\"@android:color/white\">\n\n    </android.support.v7.widget.Toolbar>\n```\n\ntools中的参数如下图解释\n![](http://upload-images.jianshu.io/upload_images/2210217-8a2737cb975ed701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n代码实现如下：\n\n```\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n\n        toolbar.setNavigationIcon(R.drawable.ic_acb_list);//设置导航栏图标\n        toolbar.setLogo(R.mipmap.ic_launcher);//设置app logo\n        toolbar.setTitle(\"Toolbar\");//设置主标题\n        toolbar.setTitleTextColor(ContextCompat.getColor(this, android.R.color.white));\n        toolbar.setSubtitle(\"Subtitle\");//设置子标题\n        toolbar.setSubtitleTextColor(ContextCompat.getColor(this, R.color.colorAccent));\n```\n\n### 2.菜单使用\n\n主代码部分\n\n```\n        toolbar.setOverflowIcon(ContextCompat.getDrawable(this, R.drawable.ic_acb_list));//设置更多图标\n\n        toolbar.inflateMenu(R.menu.main_menu);\n        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem item) {\n                int id = item.getItemId();\n                Toast.makeText(MainActivity.this, String.valueOf(id), Toast.LENGTH_SHORT).show();\n                switch (id) {\n                    case R.id.action_1:\n                        break;\n                    case R.id.action_2:\n                        break;\n                    case R.id.action_3:\n                        break;\n                    case R.id.action_4:\n                        break;\n                    case R.id.action_5:\n                        break;\n                }\n                return false;\n            }\n        });\n```\n\nmenu部分\n\n```\n\t<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \txmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n\t    <item\n\t        android:id=\"@+id/action_1\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\n\t    <item\n\t        android:id=\"@+id/action_2\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t    <item\n\t        android:id=\"@+id/action_3\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t    <item\n\t        android:id=\"@+id/action_4\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t    <item\n\t        android:id=\"@+id/action_5\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t</menu>\n```\n\n\n![](http://upload-images.jianshu.io/upload_images/2210217-51f9e6ee5319c0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/2210217-e2a29d76964f995b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 3.特殊说明\n\nA.TextAppearnce\n\nToolbar当然也可以自定义样式，例如自定义Title字体大小,字体颜色等等基本信息，这时候会使用到一个属性`TextAppearance`\n\nTextAppearance：可以从新定义Style，接着看代码：\n\n```\n    <style name=\"Toolbar.Title\" parent=\"@style/TextAppearance.Widget.AppCompat.Toolbar.Title\">\n        <item name=\"android:textSize\">22sp</item>\n        <item name=\"android:textColor\">@android:color/white</item>\n    </style>\n```\n\n其中上面中将字体大小已经字体颜色都改变。\n特别说明，如果你前面已经定义了颜色后面又调用了TextAppearance，那面你之前设置都按照你新定义的Appearance来实现.\n\nB.PopupStyle\n\n```\n    <style name=\"Toolbar.Popup\" parent=\"@style/Widget.AppCompat.PopupMenu.Overflow\">\n        <item name=\"overlapAnchor\">false</item>\n    </style>\n```\n\n默认情况overlapAnchor为true，而这样在弹出更多菜单的时候，会覆盖标题栏弹出，如果这是false则不会覆盖标题栏。\n\n","source":"_posts/ToolBar.md","raw":"---\ntitle: Toolbar基本使用\ndate: 2017-08-18 22:26:05\ntags: [Android]\n---\n此文讲解的Toolbar为V7包中的Toolbar。此文会有很多不成熟地方，请大家指正。\n\n## 设置样式\n首先使用Toolbar需要先更改Style样式，主要是将样式设置成无Actionbar的样式，当然网上也有很多其他方式，本人使用的代码如下：\n\n```\n\t<style name=\"AppTheme\" parent=\"AppTheme.Base\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n\n    <style name=\"AppTheme.Base\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n\n    </style>\n```\n\n## 官方文档中XML资源\n\n![](http://upload-images.jianshu.io/upload_images/2210217-8f81e990effdea5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/2210217-e3f8039a8db02bf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 常用参数以及方法说明\n### 1.基本使用\n\n\n```\n    <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"?attr/colorPrimary\"\n        tools:logo=\"@mipmap/ic_launcher\"\n        tools:navigationIcon=\"@drawable/ic_acb_list\"\n        tools:subtitle=\"@string/app_name\"\n        tools:subtitleTextColor=\"@color/colorAccent\"\n        tools:title=\"@string/app_name\"\n        tools:titleTextColor=\"@android:color/white\">\n\n    </android.support.v7.widget.Toolbar>\n```\n\ntools中的参数如下图解释\n![](http://upload-images.jianshu.io/upload_images/2210217-8a2737cb975ed701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n代码实现如下：\n\n```\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n\n        toolbar.setNavigationIcon(R.drawable.ic_acb_list);//设置导航栏图标\n        toolbar.setLogo(R.mipmap.ic_launcher);//设置app logo\n        toolbar.setTitle(\"Toolbar\");//设置主标题\n        toolbar.setTitleTextColor(ContextCompat.getColor(this, android.R.color.white));\n        toolbar.setSubtitle(\"Subtitle\");//设置子标题\n        toolbar.setSubtitleTextColor(ContextCompat.getColor(this, R.color.colorAccent));\n```\n\n### 2.菜单使用\n\n主代码部分\n\n```\n        toolbar.setOverflowIcon(ContextCompat.getDrawable(this, R.drawable.ic_acb_list));//设置更多图标\n\n        toolbar.inflateMenu(R.menu.main_menu);\n        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem item) {\n                int id = item.getItemId();\n                Toast.makeText(MainActivity.this, String.valueOf(id), Toast.LENGTH_SHORT).show();\n                switch (id) {\n                    case R.id.action_1:\n                        break;\n                    case R.id.action_2:\n                        break;\n                    case R.id.action_3:\n                        break;\n                    case R.id.action_4:\n                        break;\n                    case R.id.action_5:\n                        break;\n                }\n                return false;\n            }\n        });\n```\n\nmenu部分\n\n```\n\t<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \txmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n\t    <item\n\t        android:id=\"@+id/action_1\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\n\t    <item\n\t        android:id=\"@+id/action_2\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t    <item\n\t        android:id=\"@+id/action_3\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t    <item\n\t        android:id=\"@+id/action_4\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t    <item\n\t        android:id=\"@+id/action_5\"\n\t        android:icon=\"@mipmap/ic_launcher\"\n\t        android:title=\"@string/app_name\"\n\t        app:showAsAction=\"never\"></item>\n\t</menu>\n```\n\n\n![](http://upload-images.jianshu.io/upload_images/2210217-51f9e6ee5319c0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](http://upload-images.jianshu.io/upload_images/2210217-e2a29d76964f995b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 3.特殊说明\n\nA.TextAppearnce\n\nToolbar当然也可以自定义样式，例如自定义Title字体大小,字体颜色等等基本信息，这时候会使用到一个属性`TextAppearance`\n\nTextAppearance：可以从新定义Style，接着看代码：\n\n```\n    <style name=\"Toolbar.Title\" parent=\"@style/TextAppearance.Widget.AppCompat.Toolbar.Title\">\n        <item name=\"android:textSize\">22sp</item>\n        <item name=\"android:textColor\">@android:color/white</item>\n    </style>\n```\n\n其中上面中将字体大小已经字体颜色都改变。\n特别说明，如果你前面已经定义了颜色后面又调用了TextAppearance，那面你之前设置都按照你新定义的Appearance来实现.\n\nB.PopupStyle\n\n```\n    <style name=\"Toolbar.Popup\" parent=\"@style/Widget.AppCompat.PopupMenu.Overflow\">\n        <item name=\"overlapAnchor\">false</item>\n    </style>\n```\n\n默认情况overlapAnchor为true，而这样在弹出更多菜单的时候，会覆盖标题栏弹出，如果这是false则不会覆盖标题栏。\n\n","slug":"ToolBar","published":1,"updated":"2018-01-18T09:47:25.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21dq000qj0fydj5zrgox","content":"<p>此文讲解的Toolbar为V7包中的Toolbar。此文会有很多不成熟地方，请大家指正。</p>\n<h2 id=\"设置样式\"><a href=\"#设置样式\" class=\"headerlink\" title=\"设置样式\"></a>设置样式</h2><p>首先使用Toolbar需要先更改Style样式，主要是将样式设置成无Actionbar的样式，当然网上也有很多其他方式，本人使用的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</div><div class=\"line\">       &lt;!-- Customize your theme here. --&gt;</div><div class=\"line\">       &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</div><div class=\"line\">       &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class=\"line\">       &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</div><div class=\"line\">   &lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   &lt;style name=&quot;AppTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;/style&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"官方文档中XML资源\"><a href=\"#官方文档中XML资源\" class=\"headerlink\" title=\"官方文档中XML资源\"></a>官方文档中XML资源</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-8f81e990effdea5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-e3f8039a8db02bf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"常用参数以及方法说明\"><a href=\"#常用参数以及方法说明\" class=\"headerlink\" title=\"常用参数以及方法说明\"></a>常用参数以及方法说明</h2><h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v7.widget.Toolbar</div><div class=\"line\">    android:id=&quot;@+id/toolbar&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">    android:background=&quot;?attr/colorPrimary&quot;</div><div class=\"line\">    tools:logo=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">    tools:navigationIcon=&quot;@drawable/ic_acb_list&quot;</div><div class=\"line\">    tools:subtitle=&quot;@string/app_name&quot;</div><div class=\"line\">    tools:subtitleTextColor=&quot;@color/colorAccent&quot;</div><div class=\"line\">    tools:title=&quot;@string/app_name&quot;</div><div class=\"line\">    tools:titleTextColor=&quot;@android:color/white&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/android.support.v7.widget.Toolbar&gt;</div></pre></td></tr></table></figure>\n<p>tools中的参数如下图解释<br><img src=\"http://upload-images.jianshu.io/upload_images/2210217-8a2737cb975ed701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"></div><div class=\"line\">toolbar.setNavigationIcon(R.drawable.ic_acb_list);//设置导航栏图标</div><div class=\"line\">toolbar.setLogo(R.mipmap.ic_launcher);//设置app logo</div><div class=\"line\">toolbar.setTitle(&quot;Toolbar&quot;);//设置主标题</div><div class=\"line\">toolbar.setTitleTextColor(ContextCompat.getColor(this, android.R.color.white));</div><div class=\"line\">toolbar.setSubtitle(&quot;Subtitle&quot;);//设置子标题</div><div class=\"line\">toolbar.setSubtitleTextColor(ContextCompat.getColor(this, R.color.colorAccent));</div></pre></td></tr></table></figure>\n<h3 id=\"2-菜单使用\"><a href=\"#2-菜单使用\" class=\"headerlink\" title=\"2.菜单使用\"></a>2.菜单使用</h3><p>主代码部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">toolbar.setOverflowIcon(ContextCompat.getDrawable(this, R.drawable.ic_acb_list));//设置更多图标</div><div class=\"line\"></div><div class=\"line\">toolbar.inflateMenu(R.menu.main_menu);</div><div class=\"line\">toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public boolean onMenuItemClick(MenuItem item) &#123;</div><div class=\"line\">        int id = item.getItemId();</div><div class=\"line\">        Toast.makeText(MainActivity.this, String.valueOf(id), Toast.LENGTH_SHORT).show();</div><div class=\"line\">        switch (id) &#123;</div><div class=\"line\">            case R.id.action_1:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_2:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_3:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_4:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_5:</div><div class=\"line\">                break;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>menu部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">   \txmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_1&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_2&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_3&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_4&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_5&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">&lt;/menu&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-51f9e6ee5319c0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-e2a29d76964f995b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"3-特殊说明\"><a href=\"#3-特殊说明\" class=\"headerlink\" title=\"3.特殊说明\"></a>3.特殊说明</h3><p>A.TextAppearnce</p>\n<p>Toolbar当然也可以自定义样式，例如自定义Title字体大小,字体颜色等等基本信息，这时候会使用到一个属性<code>TextAppearance</code></p>\n<p>TextAppearance：可以从新定义Style，接着看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;Toolbar.Title&quot; parent=&quot;@style/TextAppearance.Widget.AppCompat.Toolbar.Title&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;android:textSize&quot;&gt;22sp&lt;/item&gt;</div><div class=\"line\">    &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>其中上面中将字体大小已经字体颜色都改变。<br>特别说明，如果你前面已经定义了颜色后面又调用了TextAppearance，那面你之前设置都按照你新定义的Appearance来实现.</p>\n<p>B.PopupStyle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;Toolbar.Popup&quot; parent=&quot;@style/Widget.AppCompat.PopupMenu.Overflow&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;overlapAnchor&quot;&gt;false&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>默认情况overlapAnchor为true，而这样在弹出更多菜单的时候，会覆盖标题栏弹出，如果这是false则不会覆盖标题栏。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>此文讲解的Toolbar为V7包中的Toolbar。此文会有很多不成熟地方，请大家指正。</p>\n<h2 id=\"设置样式\"><a href=\"#设置样式\" class=\"headerlink\" title=\"设置样式\"></a>设置样式</h2><p>首先使用Toolbar需要先更改Style样式，主要是将样式设置成无Actionbar的样式，当然网上也有很多其他方式，本人使用的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</div><div class=\"line\">       &lt;!-- Customize your theme here. --&gt;</div><div class=\"line\">       &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</div><div class=\"line\">       &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class=\"line\">       &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</div><div class=\"line\">   &lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   &lt;style name=&quot;AppTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;/style&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"官方文档中XML资源\"><a href=\"#官方文档中XML资源\" class=\"headerlink\" title=\"官方文档中XML资源\"></a>官方文档中XML资源</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-8f81e990effdea5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-e3f8039a8db02bf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"常用参数以及方法说明\"><a href=\"#常用参数以及方法说明\" class=\"headerlink\" title=\"常用参数以及方法说明\"></a>常用参数以及方法说明</h2><h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v7.widget.Toolbar</div><div class=\"line\">    android:id=&quot;@+id/toolbar&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">    android:background=&quot;?attr/colorPrimary&quot;</div><div class=\"line\">    tools:logo=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">    tools:navigationIcon=&quot;@drawable/ic_acb_list&quot;</div><div class=\"line\">    tools:subtitle=&quot;@string/app_name&quot;</div><div class=\"line\">    tools:subtitleTextColor=&quot;@color/colorAccent&quot;</div><div class=\"line\">    tools:title=&quot;@string/app_name&quot;</div><div class=\"line\">    tools:titleTextColor=&quot;@android:color/white&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/android.support.v7.widget.Toolbar&gt;</div></pre></td></tr></table></figure>\n<p>tools中的参数如下图解释<br><img src=\"http://upload-images.jianshu.io/upload_images/2210217-8a2737cb975ed701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>代码实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"></div><div class=\"line\">toolbar.setNavigationIcon(R.drawable.ic_acb_list);//设置导航栏图标</div><div class=\"line\">toolbar.setLogo(R.mipmap.ic_launcher);//设置app logo</div><div class=\"line\">toolbar.setTitle(&quot;Toolbar&quot;);//设置主标题</div><div class=\"line\">toolbar.setTitleTextColor(ContextCompat.getColor(this, android.R.color.white));</div><div class=\"line\">toolbar.setSubtitle(&quot;Subtitle&quot;);//设置子标题</div><div class=\"line\">toolbar.setSubtitleTextColor(ContextCompat.getColor(this, R.color.colorAccent));</div></pre></td></tr></table></figure>\n<h3 id=\"2-菜单使用\"><a href=\"#2-菜单使用\" class=\"headerlink\" title=\"2.菜单使用\"></a>2.菜单使用</h3><p>主代码部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">toolbar.setOverflowIcon(ContextCompat.getDrawable(this, R.drawable.ic_acb_list));//设置更多图标</div><div class=\"line\"></div><div class=\"line\">toolbar.inflateMenu(R.menu.main_menu);</div><div class=\"line\">toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public boolean onMenuItemClick(MenuItem item) &#123;</div><div class=\"line\">        int id = item.getItemId();</div><div class=\"line\">        Toast.makeText(MainActivity.this, String.valueOf(id), Toast.LENGTH_SHORT).show();</div><div class=\"line\">        switch (id) &#123;</div><div class=\"line\">            case R.id.action_1:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_2:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_3:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_4:</div><div class=\"line\">                break;</div><div class=\"line\">            case R.id.action_5:</div><div class=\"line\">                break;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>menu部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">   \txmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_1&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_2&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_3&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_4&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:id=&quot;@+id/action_5&quot;</div><div class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class=\"line\">        android:title=&quot;@string/app_name&quot;</div><div class=\"line\">        app:showAsAction=&quot;never&quot;&gt;&lt;/item&gt;</div><div class=\"line\">&lt;/menu&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-51f9e6ee5319c0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-e2a29d76964f995b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"3-特殊说明\"><a href=\"#3-特殊说明\" class=\"headerlink\" title=\"3.特殊说明\"></a>3.特殊说明</h3><p>A.TextAppearnce</p>\n<p>Toolbar当然也可以自定义样式，例如自定义Title字体大小,字体颜色等等基本信息，这时候会使用到一个属性<code>TextAppearance</code></p>\n<p>TextAppearance：可以从新定义Style，接着看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;Toolbar.Title&quot; parent=&quot;@style/TextAppearance.Widget.AppCompat.Toolbar.Title&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;android:textSize&quot;&gt;22sp&lt;/item&gt;</div><div class=\"line\">    &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>其中上面中将字体大小已经字体颜色都改变。<br>特别说明，如果你前面已经定义了颜色后面又调用了TextAppearance，那面你之前设置都按照你新定义的Appearance来实现.</p>\n<p>B.PopupStyle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;Toolbar.Popup&quot; parent=&quot;@style/Widget.AppCompat.PopupMenu.Overflow&quot;&gt;</div><div class=\"line\">    &lt;item name=&quot;overlapAnchor&quot;&gt;false&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n<p>默认情况overlapAnchor为true，而这样在弹出更多菜单的时候，会覆盖标题栏弹出，如果这是false则不会覆盖标题栏。</p>\n"},{"title":"Android动态授权那些事","date":"2017-08-25T14:02:33.000Z","_content":"\nAndroid6.0(API 23)以后推出了很多新特性，其中 动态授权 对于开发人员来说带了很多麻烦，此文将说说动态授权那些事。\n\n好在google已经给出了解决方案，答案都在support-v4-24.1.0包中。首先最重要的两个类ActivityCompat，ContextCompat。\n\n## ContextCompat类\n检测是否有相应权限permission，如果有则返回PackageManager.PERMISSION_DENIED。\n\n    public static int checkSelfPermission(@NonNull Context context, @NonNull String permission)\n\n## ActivityCompat类\n\n请求权限\n\n    public static void requestPermissions(final @NonNull Activity activity,final @NonNull String[] permissions, final int requestCode)\n\n## Activity类返回\n\n请求权限返回\n\n     public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)\n\n## 说明\n关于动态授权，核心代码无非就上面几个方法的使用。要想明白如何来动态获取权限，首先要知道其交互流程。\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2210217-ceda81027909ea98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n按照上图所示，分解步骤\n1.检查所需权限是否获取\n2.请求所有权限\n3.友好提示用户，手动获取权限方法。\n4.结束\n\n## 步骤方法\n### a.检查权限是否获取使用\n\n    // 判断权限集合\n    public boolean checkPermissions(String... permissions) {\n        for (String permission : permissions) {\n            if (checkPermission(context, permission))\n                return true;\n        }\n        return false;\n    }\n\n    // 判断是否缺少权限\n    private boolean checkPermission(Context context, String permission) {\n        return ContextCompat.checkSelfPermission(context, permission) ==\n                PackageManager.PERMISSION_DENIED;\n    }\n    \n如果有为获取权限则请求权限\n\n### b.请求权限\n\n    // 请求权限兼容低版本\n    public void requestPermissions(String... permissions) {\n        ActivityCompat.requestPermissions(activity, permissions, PERMISSION_REQUEST_CODE);\n    }\n\n使用系统权限对话框提示用户是否授权，如有拒绝获取权限的地方，则优化提示用户手动获取权限方法。\n\n### c.手动获取权限提示。\n\n    private void showPermissionDialog() {\n        AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n        builder.setTitle(\"帮助\");\n        builder.setMessage(\"当前应用缺少必要权限。\\n\\n请点击\\\"设置\\\"-\\\"权限\\\"-打开所需权限。\");///n/n最后点击两次后退按钮，即可返回。\n\n        // 拒绝, 退出应用\n        builder.setNegativeButton(\"退出\", new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                activity.setResult(PERMISSIONS_DENIED);\n                activity.finish();\n            }\n        });\n\n        builder.setPositiveButton(\"设置\", new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                startAppSettings();\n            }\n        });\n\n        builder.setCancelable(false);\n\n        builder.show();\n    }\n\n    // 启动应用的设置\n    private void startAppSettings() {\n        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + activity.getPackageName()));\n        activity.startActivity(intent);\n    }\n\n### d.结束\n\n\n## 使用\n\n### a.初始化\n\n\tmCheckPermission = new CheckPermission(this) {\n\t\t@Override\n\t\tString[] getPermissions() {\n\t\t\treturn new String[]{\n\t\t\t\t\tManifest.permission.CAMERA\n\t\t\t};\n\t\t}\n\t};\n\nb.检查权限\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        mCheckPermission.checkPermission();\n    }\n\nc.实现onRequestPermissionsResult\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        mCheckPermission.checkRequestPermissionsResult(requestCode, grantResults);\n    }\n\n具体代码可以看我的[ZXingScan](https://github.com/Chunyang1988/ZXingScan)\n\nPS:欢迎大家支持我的，[Github](https://github.com/Chunyang1988)\n\n","source":"_posts/SelfPermission.md","raw":"---\ntitle: Android动态授权那些事\ndate: 2017-08-25 22:02:33\ntags: [Android]\n---\n\nAndroid6.0(API 23)以后推出了很多新特性，其中 动态授权 对于开发人员来说带了很多麻烦，此文将说说动态授权那些事。\n\n好在google已经给出了解决方案，答案都在support-v4-24.1.0包中。首先最重要的两个类ActivityCompat，ContextCompat。\n\n## ContextCompat类\n检测是否有相应权限permission，如果有则返回PackageManager.PERMISSION_DENIED。\n\n    public static int checkSelfPermission(@NonNull Context context, @NonNull String permission)\n\n## ActivityCompat类\n\n请求权限\n\n    public static void requestPermissions(final @NonNull Activity activity,final @NonNull String[] permissions, final int requestCode)\n\n## Activity类返回\n\n请求权限返回\n\n     public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)\n\n## 说明\n关于动态授权，核心代码无非就上面几个方法的使用。要想明白如何来动态获取权限，首先要知道其交互流程。\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2210217-ceda81027909ea98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n按照上图所示，分解步骤\n1.检查所需权限是否获取\n2.请求所有权限\n3.友好提示用户，手动获取权限方法。\n4.结束\n\n## 步骤方法\n### a.检查权限是否获取使用\n\n    // 判断权限集合\n    public boolean checkPermissions(String... permissions) {\n        for (String permission : permissions) {\n            if (checkPermission(context, permission))\n                return true;\n        }\n        return false;\n    }\n\n    // 判断是否缺少权限\n    private boolean checkPermission(Context context, String permission) {\n        return ContextCompat.checkSelfPermission(context, permission) ==\n                PackageManager.PERMISSION_DENIED;\n    }\n    \n如果有为获取权限则请求权限\n\n### b.请求权限\n\n    // 请求权限兼容低版本\n    public void requestPermissions(String... permissions) {\n        ActivityCompat.requestPermissions(activity, permissions, PERMISSION_REQUEST_CODE);\n    }\n\n使用系统权限对话框提示用户是否授权，如有拒绝获取权限的地方，则优化提示用户手动获取权限方法。\n\n### c.手动获取权限提示。\n\n    private void showPermissionDialog() {\n        AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n        builder.setTitle(\"帮助\");\n        builder.setMessage(\"当前应用缺少必要权限。\\n\\n请点击\\\"设置\\\"-\\\"权限\\\"-打开所需权限。\");///n/n最后点击两次后退按钮，即可返回。\n\n        // 拒绝, 退出应用\n        builder.setNegativeButton(\"退出\", new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                activity.setResult(PERMISSIONS_DENIED);\n                activity.finish();\n            }\n        });\n\n        builder.setPositiveButton(\"设置\", new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                startAppSettings();\n            }\n        });\n\n        builder.setCancelable(false);\n\n        builder.show();\n    }\n\n    // 启动应用的设置\n    private void startAppSettings() {\n        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + activity.getPackageName()));\n        activity.startActivity(intent);\n    }\n\n### d.结束\n\n\n## 使用\n\n### a.初始化\n\n\tmCheckPermission = new CheckPermission(this) {\n\t\t@Override\n\t\tString[] getPermissions() {\n\t\t\treturn new String[]{\n\t\t\t\t\tManifest.permission.CAMERA\n\t\t\t};\n\t\t}\n\t};\n\nb.检查权限\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        mCheckPermission.checkPermission();\n    }\n\nc.实现onRequestPermissionsResult\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        mCheckPermission.checkRequestPermissionsResult(requestCode, grantResults);\n    }\n\n具体代码可以看我的[ZXingScan](https://github.com/Chunyang1988/ZXingScan)\n\nPS:欢迎大家支持我的，[Github](https://github.com/Chunyang1988)\n\n","slug":"SelfPermission","published":1,"updated":"2018-01-18T09:47:53.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21ds000tj0fyamvnonci","content":"<p>Android6.0(API 23)以后推出了很多新特性，其中 动态授权 对于开发人员来说带了很多麻烦，此文将说说动态授权那些事。</p>\n<p>好在google已经给出了解决方案，答案都在support-v4-24.1.0包中。首先最重要的两个类ActivityCompat，ContextCompat。</p>\n<h2 id=\"ContextCompat类\"><a href=\"#ContextCompat类\" class=\"headerlink\" title=\"ContextCompat类\"></a>ContextCompat类</h2><p>检测是否有相应权限permission，如果有则返回PackageManager.PERMISSION_DENIED。</p>\n<pre><code>public static int checkSelfPermission(@NonNull Context context, @NonNull String permission)\n</code></pre><h2 id=\"ActivityCompat类\"><a href=\"#ActivityCompat类\" class=\"headerlink\" title=\"ActivityCompat类\"></a>ActivityCompat类</h2><p>请求权限</p>\n<pre><code>public static void requestPermissions(final @NonNull Activity activity,final @NonNull String[] permissions, final int requestCode)\n</code></pre><h2 id=\"Activity类返回\"><a href=\"#Activity类返回\" class=\"headerlink\" title=\"Activity类返回\"></a>Activity类返回</h2><p>请求权限返回</p>\n<pre><code>public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)\n</code></pre><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>关于动态授权，核心代码无非就上面几个方法的使用。要想明白如何来动态获取权限，首先要知道其交互流程。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-ceda81027909ea98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>按照上图所示，分解步骤<br>1.检查所需权限是否获取<br>2.请求所有权限<br>3.友好提示用户，手动获取权限方法。<br>4.结束</p>\n<h2 id=\"步骤方法\"><a href=\"#步骤方法\" class=\"headerlink\" title=\"步骤方法\"></a>步骤方法</h2><h3 id=\"a-检查权限是否获取使用\"><a href=\"#a-检查权限是否获取使用\" class=\"headerlink\" title=\"a.检查权限是否获取使用\"></a>a.检查权限是否获取使用</h3><pre><code>// 判断权限集合\npublic boolean checkPermissions(String... permissions) {\n    for (String permission : permissions) {\n        if (checkPermission(context, permission))\n            return true;\n    }\n    return false;\n}\n\n// 判断是否缺少权限\nprivate boolean checkPermission(Context context, String permission) {\n    return ContextCompat.checkSelfPermission(context, permission) ==\n            PackageManager.PERMISSION_DENIED;\n}\n</code></pre><p>如果有为获取权限则请求权限</p>\n<h3 id=\"b-请求权限\"><a href=\"#b-请求权限\" class=\"headerlink\" title=\"b.请求权限\"></a>b.请求权限</h3><pre><code>// 请求权限兼容低版本\npublic void requestPermissions(String... permissions) {\n    ActivityCompat.requestPermissions(activity, permissions, PERMISSION_REQUEST_CODE);\n}\n</code></pre><p>使用系统权限对话框提示用户是否授权，如有拒绝获取权限的地方，则优化提示用户手动获取权限方法。</p>\n<h3 id=\"c-手动获取权限提示。\"><a href=\"#c-手动获取权限提示。\" class=\"headerlink\" title=\"c.手动获取权限提示。\"></a>c.手动获取权限提示。</h3><pre><code>private void showPermissionDialog() {\n    AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n    builder.setTitle(&quot;帮助&quot;);\n    builder.setMessage(&quot;当前应用缺少必要权限。\\n\\n请点击\\&quot;设置\\&quot;-\\&quot;权限\\&quot;-打开所需权限。&quot;);///n/n最后点击两次后退按钮，即可返回。\n\n    // 拒绝, 退出应用\n    builder.setNegativeButton(&quot;退出&quot;, new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            activity.setResult(PERMISSIONS_DENIED);\n            activity.finish();\n        }\n    });\n\n    builder.setPositiveButton(&quot;设置&quot;, new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            startAppSettings();\n        }\n    });\n\n    builder.setCancelable(false);\n\n    builder.show();\n}\n\n// 启动应用的设置\nprivate void startAppSettings() {\n    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n    intent.setData(Uri.parse(PACKAGE_URL_SCHEME + activity.getPackageName()));\n    activity.startActivity(intent);\n}\n</code></pre><h3 id=\"d-结束\"><a href=\"#d-结束\" class=\"headerlink\" title=\"d.结束\"></a>d.结束</h3><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"a-初始化\"><a href=\"#a-初始化\" class=\"headerlink\" title=\"a.初始化\"></a>a.初始化</h3><pre><code>mCheckPermission = new CheckPermission(this) {\n    @Override\n    String[] getPermissions() {\n        return new String[]{\n                Manifest.permission.CAMERA\n        };\n    }\n};\n</code></pre><p>b.检查权限</p>\n<pre><code>@Override\nprotected void onResume() {\n    super.onResume();\n    mCheckPermission.checkPermission();\n}\n</code></pre><p>c.实现onRequestPermissionsResult</p>\n<pre><code>@Override\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n    mCheckPermission.checkRequestPermissionsResult(requestCode, grantResults);\n}\n</code></pre><p>具体代码可以看我的<a href=\"https://github.com/Chunyang1988/ZXingScan\" target=\"_blank\" rel=\"external\">ZXingScan</a></p>\n<p>PS:欢迎大家支持我的，<a href=\"https://github.com/Chunyang1988\" target=\"_blank\" rel=\"external\">Github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Android6.0(API 23)以后推出了很多新特性，其中 动态授权 对于开发人员来说带了很多麻烦，此文将说说动态授权那些事。</p>\n<p>好在google已经给出了解决方案，答案都在support-v4-24.1.0包中。首先最重要的两个类ActivityCompat，ContextCompat。</p>\n<h2 id=\"ContextCompat类\"><a href=\"#ContextCompat类\" class=\"headerlink\" title=\"ContextCompat类\"></a>ContextCompat类</h2><p>检测是否有相应权限permission，如果有则返回PackageManager.PERMISSION_DENIED。</p>\n<pre><code>public static int checkSelfPermission(@NonNull Context context, @NonNull String permission)\n</code></pre><h2 id=\"ActivityCompat类\"><a href=\"#ActivityCompat类\" class=\"headerlink\" title=\"ActivityCompat类\"></a>ActivityCompat类</h2><p>请求权限</p>\n<pre><code>public static void requestPermissions(final @NonNull Activity activity,final @NonNull String[] permissions, final int requestCode)\n</code></pre><h2 id=\"Activity类返回\"><a href=\"#Activity类返回\" class=\"headerlink\" title=\"Activity类返回\"></a>Activity类返回</h2><p>请求权限返回</p>\n<pre><code>public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)\n</code></pre><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>关于动态授权，核心代码无非就上面几个方法的使用。要想明白如何来动态获取权限，首先要知道其交互流程。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2210217-ceda81027909ea98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>按照上图所示，分解步骤<br>1.检查所需权限是否获取<br>2.请求所有权限<br>3.友好提示用户，手动获取权限方法。<br>4.结束</p>\n<h2 id=\"步骤方法\"><a href=\"#步骤方法\" class=\"headerlink\" title=\"步骤方法\"></a>步骤方法</h2><h3 id=\"a-检查权限是否获取使用\"><a href=\"#a-检查权限是否获取使用\" class=\"headerlink\" title=\"a.检查权限是否获取使用\"></a>a.检查权限是否获取使用</h3><pre><code>// 判断权限集合\npublic boolean checkPermissions(String... permissions) {\n    for (String permission : permissions) {\n        if (checkPermission(context, permission))\n            return true;\n    }\n    return false;\n}\n\n// 判断是否缺少权限\nprivate boolean checkPermission(Context context, String permission) {\n    return ContextCompat.checkSelfPermission(context, permission) ==\n            PackageManager.PERMISSION_DENIED;\n}\n</code></pre><p>如果有为获取权限则请求权限</p>\n<h3 id=\"b-请求权限\"><a href=\"#b-请求权限\" class=\"headerlink\" title=\"b.请求权限\"></a>b.请求权限</h3><pre><code>// 请求权限兼容低版本\npublic void requestPermissions(String... permissions) {\n    ActivityCompat.requestPermissions(activity, permissions, PERMISSION_REQUEST_CODE);\n}\n</code></pre><p>使用系统权限对话框提示用户是否授权，如有拒绝获取权限的地方，则优化提示用户手动获取权限方法。</p>\n<h3 id=\"c-手动获取权限提示。\"><a href=\"#c-手动获取权限提示。\" class=\"headerlink\" title=\"c.手动获取权限提示。\"></a>c.手动获取权限提示。</h3><pre><code>private void showPermissionDialog() {\n    AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n    builder.setTitle(&quot;帮助&quot;);\n    builder.setMessage(&quot;当前应用缺少必要权限。\\n\\n请点击\\&quot;设置\\&quot;-\\&quot;权限\\&quot;-打开所需权限。&quot;);///n/n最后点击两次后退按钮，即可返回。\n\n    // 拒绝, 退出应用\n    builder.setNegativeButton(&quot;退出&quot;, new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            activity.setResult(PERMISSIONS_DENIED);\n            activity.finish();\n        }\n    });\n\n    builder.setPositiveButton(&quot;设置&quot;, new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            startAppSettings();\n        }\n    });\n\n    builder.setCancelable(false);\n\n    builder.show();\n}\n\n// 启动应用的设置\nprivate void startAppSettings() {\n    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n    intent.setData(Uri.parse(PACKAGE_URL_SCHEME + activity.getPackageName()));\n    activity.startActivity(intent);\n}\n</code></pre><h3 id=\"d-结束\"><a href=\"#d-结束\" class=\"headerlink\" title=\"d.结束\"></a>d.结束</h3><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"a-初始化\"><a href=\"#a-初始化\" class=\"headerlink\" title=\"a.初始化\"></a>a.初始化</h3><pre><code>mCheckPermission = new CheckPermission(this) {\n    @Override\n    String[] getPermissions() {\n        return new String[]{\n                Manifest.permission.CAMERA\n        };\n    }\n};\n</code></pre><p>b.检查权限</p>\n<pre><code>@Override\nprotected void onResume() {\n    super.onResume();\n    mCheckPermission.checkPermission();\n}\n</code></pre><p>c.实现onRequestPermissionsResult</p>\n<pre><code>@Override\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n    mCheckPermission.checkRequestPermissionsResult(requestCode, grantResults);\n}\n</code></pre><p>具体代码可以看我的<a href=\"https://github.com/Chunyang1988/ZXingScan\" target=\"_blank\" rel=\"external\">ZXingScan</a></p>\n<p>PS:欢迎大家支持我的，<a href=\"https://github.com/Chunyang1988\" target=\"_blank\" rel=\"external\">Github</a></p>\n"},{"title":"ADB 常用命令","date":"2017-10-18T09:43:34.000Z","_content":"\n\n重启机器\n\n```\nadb reboot\n```\n重启机器到bootloader刷机模式\n\n```\nadb reboot bootloader\n```\n重启机器到recovery恢复模式\n\n```\nadb reboot recovery\n```\n查看设备应用\n\n```\nadb shell pm ls packages //查看设备所有应用\nadb shell pm list packages -s //查看系统应用\nadb shell pm list packages -3 //查看第三方应用\nadb shell pm list packages <name> //查看包含<name>列表\n或者\nadb shell pm list packages | grep <name>\n```\n查看应用详情\n\n```\nadb shell dumpsys package <packagename>\n```\n查看设备分辨率\n\n```\nadb shell wm size\nadb shell wm size 480x1024 //修改分辨率\nadb shell wm size reset //恢复分辨率\n```\n查看屏幕密度\n\n```\nadb shell wm density\nadb shell wm density 160 //修改屏幕密度\nadb shell wm density reset //回复屏幕密度\n```\n查看系统版本\n\n```\nadb shell getprop ro.build.version.release\n```\n强制停止应用\n\n```\nadb shell am force-stop <packagename>\n```\n\n复制设备文件到电脑\n```\nadb pull <设备里的文件路径> [电脑上的目录]\n```\n\n复制电脑文件到设备\n\n```\nadb push <电脑上的文件路径> <设备里的目录>\n```\n查看log日志\n\n```\nadb logcat\n```\n查看内核日志\n\n```\nadb shell dmesg\n```\n\n\n安装APk\n\n```\nadb install [-lrtsdg] <path_to_apk>// adb install x.apk\n```\n| 参数 | 含义                                                                              |\n|------|-----------------------------------------------------------------------------------|\n| -l   | 将应用安装到保护目录 /mnt/asec                                                    |\n| -r   | 允许覆盖安装                                                                      |\n| -t   | 允许安装 AndroidManifest.xml 里 application 指定 `android:testOnly=\"true\"` 的应用 |\n| -s   | 将应用安装到 sdcard                                                               |\n| -d   | 允许降级覆盖安装                                                                  |\n| -g   | 授予所有运行时权限                                                                |\n\n\n常见安装失败输出代码、含义及可能的解决办法如下：\n\n| 输出                                                                | 含义                                                                     | 解决办法                                                                       |\n|---------------------------------------------------------------------|--------------------------------------------------------------------------|--------------------------------------------------------------------------------|\n| INSTALL\\_FAILED\\_ALREADY\\_EXISTS                                    | 应用已经存在，或卸载了但没卸载干净                                       | `adb install` 时使用 `-r` 参数，或者先 `adb uninstall <packagename>` 再安装    |\n| INSTALL\\_FAILED\\_INVALID\\_APK                                       | 无效的 APK 文件                                                          |                                                                                |\n| INSTALL\\_FAILED\\_INVALID\\_URI                                       | 无效的 APK 文件名                                                        | 确保 APK 文件名里无中文                                                        |\n| INSTALL\\_FAILED\\_INSUFFICIENT\\_STORAGE                              | 空间不足                                                                 | 清理空间                                                                       |\n| INSTALL\\_FAILED\\_DUPLICATE\\_PACKAGE                                 | 已经存在同名程序                                                         |                                                                                |\n| INSTALL\\_FAILED\\_NO\\_SHARED\\_USER                                   | 请求的共享用户不存在                                                     |                                                                                |\n| INSTALL\\_FAILED\\_UPDATE\\_INCOMPATIBLE                               | 以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致 | 先 `adb uninstall <packagename>` 再安装                                        |\n| INSTALL\\_FAILED\\_SHARED\\_USER\\_INCOMPATIBLE                         | 请求的共享用户存在但签名不一致                                           |                                                                                |\n| INSTALL\\_FAILED\\_MISSING\\_SHARED\\_LIBRARY                           | 安装包使用了设备上不可用的共享库                                         |                                                                                |\n| INSTALL\\_FAILED\\_REPLACE\\_COULDNT\\_DELETE                           | 替换时无法删除                                                           |                                                                                |\n| INSTALL\\_FAILED\\_DEXOPT                                             | dex 优化验证失败或空间不足                                               |                                                                                |\n| INSTALL\\_FAILED\\_OLDER\\_SDK                                         | 设备系统版本低于应用要求                                                 |                                                                                |\n| INSTALL\\_FAILED\\_CONFLICTING\\_PROVIDER                              | 设备里已经存在与应用里同名的 content provider                            |                                                                                |\n| INSTALL\\_FAILED\\_NEWER\\_SDK                                         | 设备系统版本高于应用要求                                                 |                                                                                |\n| INSTALL\\_FAILED\\_TEST\\_ONLY                                         | 应用是 test-only 的，但安装时没有指定 `-t` 参数                          |                                                                                |\n| INSTALL\\_FAILED\\_CPU\\_ABI\\_INCOMPATIBLE                             | 包含不兼容设备 CPU 应用程序二进制接口的 native code                      |                                                                                |\n| INSTALL\\_FAILED\\_MISSING\\_FEATURE                                   | 应用使用了设备不可用的功能                                               |                                                                                |\n| INSTALL\\_FAILED\\_CONTAINER\\_ERROR                                   | 1. sdcard 访问失败;<br />2. 应用签名与 ROM 签名一致，被当作内置应用。    | 1. 确认 sdcard 可用，或者安装到内置存储;<br />2. 打包时不与 ROM 使用相同签名。 |\n| INSTALL\\_FAILED\\_INVALID\\_INSTALL\\_LOCATION                         | 1. 不能安装到指定位置;<br />2. 应用签名与 ROM 签名一致，被当作内置应用。 | 1. 切换安装位置，添加或删除 `-s` 参数;<br />2. 打包时不与 ROM 使用相同签名。   |\n| INSTALL\\_FAILED\\_MEDIA\\_UNAVAILABLE                                 | 安装位置不可用                                                           | 一般为 sdcard，确认 sdcard 可用或安装到内置存储                                |\n| INSTALL\\_FAILED\\_VERIFICATION\\_TIMEOUT                              | 验证安装包超时                                                           |                                                                                |\n| INSTALL\\_FAILED\\_VERIFICATION\\_FAILURE                              | 验证安装包失败                                                           |                                                                                |\n| INSTALL\\_FAILED\\_PACKAGE\\_CHANGED                                   | 应用与调用程序期望的不一致                                               |                                                                                |\n| INSTALL\\_FAILED\\_UID\\_CHANGED                                       | 以前安装过该应用，与本次分配的 UID 不一致                                | 清除以前安装过的残留文件                                                       |\n| INSTALL\\_FAILED\\_VERSION\\_DOWNGRADE                                 | 已经安装了该应用更高版本                                                 | 使用 `-d` 参数                                                                 |\n| INSTALL\\_FAILED\\_PERMISSION\\_MODEL\\_DOWNGRADE                       | 已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限 |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_NOT\\_APK                                    | 指定路径不是文件，或不是以 `.apk` 结尾                                   |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_BAD\\_MANIFEST                               | 无法解析的 AndroidManifest.xml 文件                                      |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_UNEXPECTED\\_EXCEPTION                       | 解析器遇到异常                                                           |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_NO\\_CERTIFICATES                            | 安装包没有签名                                                           |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_INCONSISTENT\\_CERTIFICATES                  | 已安装该应用，且签名与 APK 文件不一致                                    | 先卸载设备上的该应用，再安装                                                   |\n| INSTALL\\_PARSE\\_FAILED\\_CERTIFICATE\\_ENCODING                       | 解析 APK 文件时遇到 `CertificateEncodingException`                       |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_BAD\\_PACKAGE\\_NAME                          | manifest 文件里没有或者使用了无效的包名                                  |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_BAD\\_SHARED\\_USER\\_ID                       | manifest 文件里指定了无效的共享用户 ID                                   |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_MANIFEST\\_MALFORMED                         | 解析 manifest 文件时遇到结构性错误                                       |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_MANIFEST\\_EMPTY                             | 在 manifest 文件里找不到找可操作标签（instrumentation 或 application）   |                                                                                |\n| INSTALL\\_FAILED\\_INTERNAL\\_ERROR                                    | 因系统问题安装失败                                                       |                                                                                |\n| INSTALL\\_FAILED\\_USER\\_RESTRICTED                                   | 用户被限制安装应用                                                       |                                                                                |\n| INSTALL\\_FAILED\\_DUPLICATE\\_PERMISSION                              | 应用尝试定义一个已经存在的权限名称                                       |                                                                                |\n| INSTALL\\_FAILED\\_NO\\_MATCHING\\_ABIS                                 | 应用包含设备的应用程序二进制接口不支持的 native code                     |                                                                                |\n| INSTALL\\_CANCELED\\_BY\\_USER                                         | 应用安装需要在设备上确认，但未操作设备或点了取消                         | 在设备上同意安装                                                               |\n| INSTALL\\_FAILED\\_ACWF\\_INCOMPATIBLE                                 | 应用程序与设备不兼容                                                     |                                                                                |\n| does not contain AndroidManifest.xml                                | 无效的 APK 文件                                                          |                                                                                |\n| is not a valid zip file                                             | 无效的 APK 文件                                                          |                                                                                |\n| Offline                                                             | 设备未连接成功                                                           | 先将设备与 adb 连接成功                                                        |\n| unauthorized                                                        | 设备未授权允许调试                                                       |                                                                                |\n| error: device not found                                             | 没有连接成功的设备                                                       | 先将设备与 adb 连接成功                                                        |\n| protocol failure                                                    | 设备已断开连接                                                           | 先将设备与 adb 连接成功                                                        |\n| Unknown option: -s                                                  | Android 2.2 以下不支持安装到 sdcard                                      | 不使用 `-s` 参数                                                               |\n| No space left on device                                             | 空间不足                                                                 | 清理空间                                                                       |\n| Permission denied ... sdcard ...                                    | sdcard 不可用                                                            |                                                                                |\n| signatures do not match the previously installed version; ignoring! | 已安装该应用且签名不一致                                                 | 先卸载设备上的该应用，再安装                                                   |\n\n\n卸载apk\n\n```\nadb uninstall [-k] <packagename>\n```\n清除应用数据与缓存\n\n```\nadb shell pm clear <packagename>\n//<packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据\n```\n\n\n\n\n\n\n\n\n还有部分功能是需要root的以及更多命令可以查看[github](https://github.com/mzlogin/awesome-adb)\n\n\n\n\n","source":"_posts/adb-command.md","raw":"---\ntitle: ADB 常用命令\ndate: 2017-10-18 17:43:34\ntags: [Android]\n---\n\n\n重启机器\n\n```\nadb reboot\n```\n重启机器到bootloader刷机模式\n\n```\nadb reboot bootloader\n```\n重启机器到recovery恢复模式\n\n```\nadb reboot recovery\n```\n查看设备应用\n\n```\nadb shell pm ls packages //查看设备所有应用\nadb shell pm list packages -s //查看系统应用\nadb shell pm list packages -3 //查看第三方应用\nadb shell pm list packages <name> //查看包含<name>列表\n或者\nadb shell pm list packages | grep <name>\n```\n查看应用详情\n\n```\nadb shell dumpsys package <packagename>\n```\n查看设备分辨率\n\n```\nadb shell wm size\nadb shell wm size 480x1024 //修改分辨率\nadb shell wm size reset //恢复分辨率\n```\n查看屏幕密度\n\n```\nadb shell wm density\nadb shell wm density 160 //修改屏幕密度\nadb shell wm density reset //回复屏幕密度\n```\n查看系统版本\n\n```\nadb shell getprop ro.build.version.release\n```\n强制停止应用\n\n```\nadb shell am force-stop <packagename>\n```\n\n复制设备文件到电脑\n```\nadb pull <设备里的文件路径> [电脑上的目录]\n```\n\n复制电脑文件到设备\n\n```\nadb push <电脑上的文件路径> <设备里的目录>\n```\n查看log日志\n\n```\nadb logcat\n```\n查看内核日志\n\n```\nadb shell dmesg\n```\n\n\n安装APk\n\n```\nadb install [-lrtsdg] <path_to_apk>// adb install x.apk\n```\n| 参数 | 含义                                                                              |\n|------|-----------------------------------------------------------------------------------|\n| -l   | 将应用安装到保护目录 /mnt/asec                                                    |\n| -r   | 允许覆盖安装                                                                      |\n| -t   | 允许安装 AndroidManifest.xml 里 application 指定 `android:testOnly=\"true\"` 的应用 |\n| -s   | 将应用安装到 sdcard                                                               |\n| -d   | 允许降级覆盖安装                                                                  |\n| -g   | 授予所有运行时权限                                                                |\n\n\n常见安装失败输出代码、含义及可能的解决办法如下：\n\n| 输出                                                                | 含义                                                                     | 解决办法                                                                       |\n|---------------------------------------------------------------------|--------------------------------------------------------------------------|--------------------------------------------------------------------------------|\n| INSTALL\\_FAILED\\_ALREADY\\_EXISTS                                    | 应用已经存在，或卸载了但没卸载干净                                       | `adb install` 时使用 `-r` 参数，或者先 `adb uninstall <packagename>` 再安装    |\n| INSTALL\\_FAILED\\_INVALID\\_APK                                       | 无效的 APK 文件                                                          |                                                                                |\n| INSTALL\\_FAILED\\_INVALID\\_URI                                       | 无效的 APK 文件名                                                        | 确保 APK 文件名里无中文                                                        |\n| INSTALL\\_FAILED\\_INSUFFICIENT\\_STORAGE                              | 空间不足                                                                 | 清理空间                                                                       |\n| INSTALL\\_FAILED\\_DUPLICATE\\_PACKAGE                                 | 已经存在同名程序                                                         |                                                                                |\n| INSTALL\\_FAILED\\_NO\\_SHARED\\_USER                                   | 请求的共享用户不存在                                                     |                                                                                |\n| INSTALL\\_FAILED\\_UPDATE\\_INCOMPATIBLE                               | 以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致 | 先 `adb uninstall <packagename>` 再安装                                        |\n| INSTALL\\_FAILED\\_SHARED\\_USER\\_INCOMPATIBLE                         | 请求的共享用户存在但签名不一致                                           |                                                                                |\n| INSTALL\\_FAILED\\_MISSING\\_SHARED\\_LIBRARY                           | 安装包使用了设备上不可用的共享库                                         |                                                                                |\n| INSTALL\\_FAILED\\_REPLACE\\_COULDNT\\_DELETE                           | 替换时无法删除                                                           |                                                                                |\n| INSTALL\\_FAILED\\_DEXOPT                                             | dex 优化验证失败或空间不足                                               |                                                                                |\n| INSTALL\\_FAILED\\_OLDER\\_SDK                                         | 设备系统版本低于应用要求                                                 |                                                                                |\n| INSTALL\\_FAILED\\_CONFLICTING\\_PROVIDER                              | 设备里已经存在与应用里同名的 content provider                            |                                                                                |\n| INSTALL\\_FAILED\\_NEWER\\_SDK                                         | 设备系统版本高于应用要求                                                 |                                                                                |\n| INSTALL\\_FAILED\\_TEST\\_ONLY                                         | 应用是 test-only 的，但安装时没有指定 `-t` 参数                          |                                                                                |\n| INSTALL\\_FAILED\\_CPU\\_ABI\\_INCOMPATIBLE                             | 包含不兼容设备 CPU 应用程序二进制接口的 native code                      |                                                                                |\n| INSTALL\\_FAILED\\_MISSING\\_FEATURE                                   | 应用使用了设备不可用的功能                                               |                                                                                |\n| INSTALL\\_FAILED\\_CONTAINER\\_ERROR                                   | 1. sdcard 访问失败;<br />2. 应用签名与 ROM 签名一致，被当作内置应用。    | 1. 确认 sdcard 可用，或者安装到内置存储;<br />2. 打包时不与 ROM 使用相同签名。 |\n| INSTALL\\_FAILED\\_INVALID\\_INSTALL\\_LOCATION                         | 1. 不能安装到指定位置;<br />2. 应用签名与 ROM 签名一致，被当作内置应用。 | 1. 切换安装位置，添加或删除 `-s` 参数;<br />2. 打包时不与 ROM 使用相同签名。   |\n| INSTALL\\_FAILED\\_MEDIA\\_UNAVAILABLE                                 | 安装位置不可用                                                           | 一般为 sdcard，确认 sdcard 可用或安装到内置存储                                |\n| INSTALL\\_FAILED\\_VERIFICATION\\_TIMEOUT                              | 验证安装包超时                                                           |                                                                                |\n| INSTALL\\_FAILED\\_VERIFICATION\\_FAILURE                              | 验证安装包失败                                                           |                                                                                |\n| INSTALL\\_FAILED\\_PACKAGE\\_CHANGED                                   | 应用与调用程序期望的不一致                                               |                                                                                |\n| INSTALL\\_FAILED\\_UID\\_CHANGED                                       | 以前安装过该应用，与本次分配的 UID 不一致                                | 清除以前安装过的残留文件                                                       |\n| INSTALL\\_FAILED\\_VERSION\\_DOWNGRADE                                 | 已经安装了该应用更高版本                                                 | 使用 `-d` 参数                                                                 |\n| INSTALL\\_FAILED\\_PERMISSION\\_MODEL\\_DOWNGRADE                       | 已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限 |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_NOT\\_APK                                    | 指定路径不是文件，或不是以 `.apk` 结尾                                   |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_BAD\\_MANIFEST                               | 无法解析的 AndroidManifest.xml 文件                                      |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_UNEXPECTED\\_EXCEPTION                       | 解析器遇到异常                                                           |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_NO\\_CERTIFICATES                            | 安装包没有签名                                                           |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_INCONSISTENT\\_CERTIFICATES                  | 已安装该应用，且签名与 APK 文件不一致                                    | 先卸载设备上的该应用，再安装                                                   |\n| INSTALL\\_PARSE\\_FAILED\\_CERTIFICATE\\_ENCODING                       | 解析 APK 文件时遇到 `CertificateEncodingException`                       |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_BAD\\_PACKAGE\\_NAME                          | manifest 文件里没有或者使用了无效的包名                                  |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_BAD\\_SHARED\\_USER\\_ID                       | manifest 文件里指定了无效的共享用户 ID                                   |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_MANIFEST\\_MALFORMED                         | 解析 manifest 文件时遇到结构性错误                                       |                                                                                |\n| INSTALL\\_PARSE\\_FAILED\\_MANIFEST\\_EMPTY                             | 在 manifest 文件里找不到找可操作标签（instrumentation 或 application）   |                                                                                |\n| INSTALL\\_FAILED\\_INTERNAL\\_ERROR                                    | 因系统问题安装失败                                                       |                                                                                |\n| INSTALL\\_FAILED\\_USER\\_RESTRICTED                                   | 用户被限制安装应用                                                       |                                                                                |\n| INSTALL\\_FAILED\\_DUPLICATE\\_PERMISSION                              | 应用尝试定义一个已经存在的权限名称                                       |                                                                                |\n| INSTALL\\_FAILED\\_NO\\_MATCHING\\_ABIS                                 | 应用包含设备的应用程序二进制接口不支持的 native code                     |                                                                                |\n| INSTALL\\_CANCELED\\_BY\\_USER                                         | 应用安装需要在设备上确认，但未操作设备或点了取消                         | 在设备上同意安装                                                               |\n| INSTALL\\_FAILED\\_ACWF\\_INCOMPATIBLE                                 | 应用程序与设备不兼容                                                     |                                                                                |\n| does not contain AndroidManifest.xml                                | 无效的 APK 文件                                                          |                                                                                |\n| is not a valid zip file                                             | 无效的 APK 文件                                                          |                                                                                |\n| Offline                                                             | 设备未连接成功                                                           | 先将设备与 adb 连接成功                                                        |\n| unauthorized                                                        | 设备未授权允许调试                                                       |                                                                                |\n| error: device not found                                             | 没有连接成功的设备                                                       | 先将设备与 adb 连接成功                                                        |\n| protocol failure                                                    | 设备已断开连接                                                           | 先将设备与 adb 连接成功                                                        |\n| Unknown option: -s                                                  | Android 2.2 以下不支持安装到 sdcard                                      | 不使用 `-s` 参数                                                               |\n| No space left on device                                             | 空间不足                                                                 | 清理空间                                                                       |\n| Permission denied ... sdcard ...                                    | sdcard 不可用                                                            |                                                                                |\n| signatures do not match the previously installed version; ignoring! | 已安装该应用且签名不一致                                                 | 先卸载设备上的该应用，再安装                                                   |\n\n\n卸载apk\n\n```\nadb uninstall [-k] <packagename>\n```\n清除应用数据与缓存\n\n```\nadb shell pm clear <packagename>\n//<packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据\n```\n\n\n\n\n\n\n\n\n还有部分功能是需要root的以及更多命令可以查看[github](https://github.com/mzlogin/awesome-adb)\n\n\n\n\n","slug":"adb-command","published":1,"updated":"2018-01-18T09:51:07.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjclr21dv000wj0fyh6b1ntub","content":"<p>重启机器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot</div></pre></td></tr></table></figure>\n<p>重启机器到bootloader刷机模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot bootloader</div></pre></td></tr></table></figure>\n<p>重启机器到recovery恢复模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot recovery</div></pre></td></tr></table></figure>\n<p>查看设备应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm ls packages //查看设备所有应用</div><div class=\"line\">adb shell pm list packages -s //查看系统应用</div><div class=\"line\">adb shell pm list packages -3 //查看第三方应用</div><div class=\"line\">adb shell pm list packages &lt;name&gt; //查看包含&lt;name&gt;列表</div><div class=\"line\">或者</div><div class=\"line\">adb shell pm list packages | grep &lt;name&gt;</div></pre></td></tr></table></figure>\n<p>查看应用详情</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dumpsys package &lt;packagename&gt;</div></pre></td></tr></table></figure>\n<p>查看设备分辨率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm size</div><div class=\"line\">adb shell wm size 480x1024 //修改分辨率</div><div class=\"line\">adb shell wm size reset //恢复分辨率</div></pre></td></tr></table></figure>\n<p>查看屏幕密度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm density</div><div class=\"line\">adb shell wm density 160 //修改屏幕密度</div><div class=\"line\">adb shell wm density reset //回复屏幕密度</div></pre></td></tr></table></figure>\n<p>查看系统版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell getprop ro.build.version.release</div></pre></td></tr></table></figure>\n<p>强制停止应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am force-stop &lt;packagename&gt;</div></pre></td></tr></table></figure>\n<p>复制设备文件到电脑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</div></pre></td></tr></table></figure></p>\n<p>复制电脑文件到设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</div></pre></td></tr></table></figure>\n<p>查看log日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb logcat</div></pre></td></tr></table></figure>\n<p>查看内核日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dmesg</div></pre></td></tr></table></figure>\n<p>安装APk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb install [-lrtsdg] &lt;path_to_apk&gt;// adb install x.apk</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-l</td>\n<td>将应用安装到保护目录 /mnt/asec</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>允许覆盖安装</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>将应用安装到 sdcard</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>允许降级覆盖安装</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>授予所有运行时权限</td>\n</tr>\n</tbody>\n</table>\n<p>常见安装失败输出代码、含义及可能的解决办法如下：</p>\n<table>\n<thead>\n<tr>\n<th>输出</th>\n<th>含义</th>\n<th>解决办法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INSTALL_FAILED_ALREADY_EXISTS</td>\n<td>应用已经存在，或卸载了但没卸载干净</td>\n<td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INVALID_APK</td>\n<td>无效的 APK 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INVALID_URI</td>\n<td>无效的 APK 文件名</td>\n<td>确保 APK 文件名里无中文</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td>\n<td>空间不足</td>\n<td>清理空间</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_DUPLICATE_PACKAGE</td>\n<td>已经存在同名程序</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_NO_SHARED_USER</td>\n<td>请求的共享用户不存在</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td>\n<td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td>\n<td>先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td>\n<td>请求的共享用户存在但签名不一致</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td>\n<td>安装包使用了设备上不可用的共享库</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td>\n<td>替换时无法删除</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_DEXOPT</td>\n<td>dex 优化验证失败或空间不足</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_OLDER_SDK</td>\n<td>设备系统版本低于应用要求</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_CONFLICTING_PROVIDER</td>\n<td>设备里已经存在与应用里同名的 content provider</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_NEWER_SDK</td>\n<td>设备系统版本高于应用要求</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_TEST_ONLY</td>\n<td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td>\n<td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_MISSING_FEATURE</td>\n<td>应用使用了设备不可用的功能</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_CONTAINER_ERROR</td>\n<td>1. sdcard 访问失败;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td>\n<td>1. 确认 sdcard 可用，或者安装到内置存储;<br>2. 打包时不与 ROM 使用相同签名。</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INVALID_INSTALL_LOCATION</td>\n<td>1. 不能安装到指定位置;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td>\n<td>1. 切换安装位置，添加或删除 <code>-s</code> 参数;<br>2. 打包时不与 ROM 使用相同签名。</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_MEDIA_UNAVAILABLE</td>\n<td>安装位置不可用</td>\n<td>一般为 sdcard，确认 sdcard 可用或安装到内置存储</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_VERIFICATION_TIMEOUT</td>\n<td>验证安装包超时</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_VERIFICATION_FAILURE</td>\n<td>验证安装包失败</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_PACKAGE_CHANGED</td>\n<td>应用与调用程序期望的不一致</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_UID_CHANGED</td>\n<td>以前安装过该应用，与本次分配的 UID 不一致</td>\n<td>清除以前安装过的残留文件</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_VERSION_DOWNGRADE</td>\n<td>已经安装了该应用更高版本</td>\n<td>使用 <code>-d</code> 参数</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</td>\n<td>已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_NOT_APK</td>\n<td>指定路径不是文件，或不是以 <code>.apk</code> 结尾</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_BAD_MANIFEST</td>\n<td>无法解析的 AndroidManifest.xml 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</td>\n<td>解析器遇到异常</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_NO_CERTIFICATES</td>\n<td>安装包没有签名</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</td>\n<td>已安装该应用，且签名与 APK 文件不一致</td>\n<td>先卸载设备上的该应用，再安装</td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</td>\n<td>解析 APK 文件时遇到 <code>CertificateEncodingException</code></td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</td>\n<td>manifest 文件里没有或者使用了无效的包名</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</td>\n<td>manifest 文件里指定了无效的共享用户 ID</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</td>\n<td>解析 manifest 文件时遇到结构性错误</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_MANIFEST_EMPTY</td>\n<td>在 manifest 文件里找不到找可操作标签（instrumentation 或 application）</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INTERNAL_ERROR</td>\n<td>因系统问题安装失败</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_USER_RESTRICTED</td>\n<td>用户被限制安装应用</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_DUPLICATE_PERMISSION</td>\n<td>应用尝试定义一个已经存在的权限名称</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_NO_MATCHING_ABIS</td>\n<td>应用包含设备的应用程序二进制接口不支持的 native code</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_CANCELED_BY_USER</td>\n<td>应用安装需要在设备上确认，但未操作设备或点了取消</td>\n<td>在设备上同意安装</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_ACWF_INCOMPATIBLE</td>\n<td>应用程序与设备不兼容</td>\n<td></td>\n</tr>\n<tr>\n<td>does not contain AndroidManifest.xml</td>\n<td>无效的 APK 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>is not a valid zip file</td>\n<td>无效的 APK 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>Offline</td>\n<td>设备未连接成功</td>\n<td>先将设备与 adb 连接成功</td>\n</tr>\n<tr>\n<td>unauthorized</td>\n<td>设备未授权允许调试</td>\n<td></td>\n</tr>\n<tr>\n<td>error: device not found</td>\n<td>没有连接成功的设备</td>\n<td>先将设备与 adb 连接成功</td>\n</tr>\n<tr>\n<td>protocol failure</td>\n<td>设备已断开连接</td>\n<td>先将设备与 adb 连接成功</td>\n</tr>\n<tr>\n<td>Unknown option: -s</td>\n<td>Android 2.2 以下不支持安装到 sdcard</td>\n<td>不使用 <code>-s</code> 参数</td>\n</tr>\n<tr>\n<td>No space left on device</td>\n<td>空间不足</td>\n<td>清理空间</td>\n</tr>\n<tr>\n<td>Permission denied … sdcard …</td>\n<td>sdcard 不可用</td>\n<td></td>\n</tr>\n<tr>\n<td>signatures do not match the previously installed version; ignoring!</td>\n<td>已安装该应用且签名不一致</td>\n<td>先卸载设备上的该应用，再安装</td>\n</tr>\n</tbody>\n</table>\n<p>卸载apk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb uninstall [-k] &lt;packagename&gt;</div></pre></td></tr></table></figure>\n<p>清除应用数据与缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm clear &lt;packagename&gt;</div><div class=\"line\">//&lt;packagename&gt; 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据</div></pre></td></tr></table></figure>\n<p>还有部分功能是需要root的以及更多命令可以查看<a href=\"https://github.com/mzlogin/awesome-adb\" target=\"_blank\" rel=\"external\">github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>重启机器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot</div></pre></td></tr></table></figure>\n<p>重启机器到bootloader刷机模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot bootloader</div></pre></td></tr></table></figure>\n<p>重启机器到recovery恢复模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot recovery</div></pre></td></tr></table></figure>\n<p>查看设备应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm ls packages //查看设备所有应用</div><div class=\"line\">adb shell pm list packages -s //查看系统应用</div><div class=\"line\">adb shell pm list packages -3 //查看第三方应用</div><div class=\"line\">adb shell pm list packages &lt;name&gt; //查看包含&lt;name&gt;列表</div><div class=\"line\">或者</div><div class=\"line\">adb shell pm list packages | grep &lt;name&gt;</div></pre></td></tr></table></figure>\n<p>查看应用详情</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dumpsys package &lt;packagename&gt;</div></pre></td></tr></table></figure>\n<p>查看设备分辨率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm size</div><div class=\"line\">adb shell wm size 480x1024 //修改分辨率</div><div class=\"line\">adb shell wm size reset //恢复分辨率</div></pre></td></tr></table></figure>\n<p>查看屏幕密度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm density</div><div class=\"line\">adb shell wm density 160 //修改屏幕密度</div><div class=\"line\">adb shell wm density reset //回复屏幕密度</div></pre></td></tr></table></figure>\n<p>查看系统版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell getprop ro.build.version.release</div></pre></td></tr></table></figure>\n<p>强制停止应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am force-stop &lt;packagename&gt;</div></pre></td></tr></table></figure>\n<p>复制设备文件到电脑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</div></pre></td></tr></table></figure></p>\n<p>复制电脑文件到设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</div></pre></td></tr></table></figure>\n<p>查看log日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb logcat</div></pre></td></tr></table></figure>\n<p>查看内核日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dmesg</div></pre></td></tr></table></figure>\n<p>安装APk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb install [-lrtsdg] &lt;path_to_apk&gt;// adb install x.apk</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-l</td>\n<td>将应用安装到保护目录 /mnt/asec</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>允许覆盖安装</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>将应用安装到 sdcard</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>允许降级覆盖安装</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>授予所有运行时权限</td>\n</tr>\n</tbody>\n</table>\n<p>常见安装失败输出代码、含义及可能的解决办法如下：</p>\n<table>\n<thead>\n<tr>\n<th>输出</th>\n<th>含义</th>\n<th>解决办法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INSTALL_FAILED_ALREADY_EXISTS</td>\n<td>应用已经存在，或卸载了但没卸载干净</td>\n<td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INVALID_APK</td>\n<td>无效的 APK 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INVALID_URI</td>\n<td>无效的 APK 文件名</td>\n<td>确保 APK 文件名里无中文</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td>\n<td>空间不足</td>\n<td>清理空间</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_DUPLICATE_PACKAGE</td>\n<td>已经存在同名程序</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_NO_SHARED_USER</td>\n<td>请求的共享用户不存在</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td>\n<td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td>\n<td>先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td>\n<td>请求的共享用户存在但签名不一致</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td>\n<td>安装包使用了设备上不可用的共享库</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td>\n<td>替换时无法删除</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_DEXOPT</td>\n<td>dex 优化验证失败或空间不足</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_OLDER_SDK</td>\n<td>设备系统版本低于应用要求</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_CONFLICTING_PROVIDER</td>\n<td>设备里已经存在与应用里同名的 content provider</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_NEWER_SDK</td>\n<td>设备系统版本高于应用要求</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_TEST_ONLY</td>\n<td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td>\n<td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_MISSING_FEATURE</td>\n<td>应用使用了设备不可用的功能</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_CONTAINER_ERROR</td>\n<td>1. sdcard 访问失败;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td>\n<td>1. 确认 sdcard 可用，或者安装到内置存储;<br>2. 打包时不与 ROM 使用相同签名。</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INVALID_INSTALL_LOCATION</td>\n<td>1. 不能安装到指定位置;<br>2. 应用签名与 ROM 签名一致，被当作内置应用。</td>\n<td>1. 切换安装位置，添加或删除 <code>-s</code> 参数;<br>2. 打包时不与 ROM 使用相同签名。</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_MEDIA_UNAVAILABLE</td>\n<td>安装位置不可用</td>\n<td>一般为 sdcard，确认 sdcard 可用或安装到内置存储</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_VERIFICATION_TIMEOUT</td>\n<td>验证安装包超时</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_VERIFICATION_FAILURE</td>\n<td>验证安装包失败</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_PACKAGE_CHANGED</td>\n<td>应用与调用程序期望的不一致</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_UID_CHANGED</td>\n<td>以前安装过该应用，与本次分配的 UID 不一致</td>\n<td>清除以前安装过的残留文件</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_VERSION_DOWNGRADE</td>\n<td>已经安装了该应用更高版本</td>\n<td>使用 <code>-d</code> 参数</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</td>\n<td>已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_NOT_APK</td>\n<td>指定路径不是文件，或不是以 <code>.apk</code> 结尾</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_BAD_MANIFEST</td>\n<td>无法解析的 AndroidManifest.xml 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</td>\n<td>解析器遇到异常</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_NO_CERTIFICATES</td>\n<td>安装包没有签名</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</td>\n<td>已安装该应用，且签名与 APK 文件不一致</td>\n<td>先卸载设备上的该应用，再安装</td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</td>\n<td>解析 APK 文件时遇到 <code>CertificateEncodingException</code></td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</td>\n<td>manifest 文件里没有或者使用了无效的包名</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</td>\n<td>manifest 文件里指定了无效的共享用户 ID</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</td>\n<td>解析 manifest 文件时遇到结构性错误</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_PARSE_FAILED_MANIFEST_EMPTY</td>\n<td>在 manifest 文件里找不到找可操作标签（instrumentation 或 application）</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_INTERNAL_ERROR</td>\n<td>因系统问题安装失败</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_USER_RESTRICTED</td>\n<td>用户被限制安装应用</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_DUPLICATE_PERMISSION</td>\n<td>应用尝试定义一个已经存在的权限名称</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_NO_MATCHING_ABIS</td>\n<td>应用包含设备的应用程序二进制接口不支持的 native code</td>\n<td></td>\n</tr>\n<tr>\n<td>INSTALL_CANCELED_BY_USER</td>\n<td>应用安装需要在设备上确认，但未操作设备或点了取消</td>\n<td>在设备上同意安装</td>\n</tr>\n<tr>\n<td>INSTALL_FAILED_ACWF_INCOMPATIBLE</td>\n<td>应用程序与设备不兼容</td>\n<td></td>\n</tr>\n<tr>\n<td>does not contain AndroidManifest.xml</td>\n<td>无效的 APK 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>is not a valid zip file</td>\n<td>无效的 APK 文件</td>\n<td></td>\n</tr>\n<tr>\n<td>Offline</td>\n<td>设备未连接成功</td>\n<td>先将设备与 adb 连接成功</td>\n</tr>\n<tr>\n<td>unauthorized</td>\n<td>设备未授权允许调试</td>\n<td></td>\n</tr>\n<tr>\n<td>error: device not found</td>\n<td>没有连接成功的设备</td>\n<td>先将设备与 adb 连接成功</td>\n</tr>\n<tr>\n<td>protocol failure</td>\n<td>设备已断开连接</td>\n<td>先将设备与 adb 连接成功</td>\n</tr>\n<tr>\n<td>Unknown option: -s</td>\n<td>Android 2.2 以下不支持安装到 sdcard</td>\n<td>不使用 <code>-s</code> 参数</td>\n</tr>\n<tr>\n<td>No space left on device</td>\n<td>空间不足</td>\n<td>清理空间</td>\n</tr>\n<tr>\n<td>Permission denied … sdcard …</td>\n<td>sdcard 不可用</td>\n<td></td>\n</tr>\n<tr>\n<td>signatures do not match the previously installed version; ignoring!</td>\n<td>已安装该应用且签名不一致</td>\n<td>先卸载设备上的该应用，再安装</td>\n</tr>\n</tbody>\n</table>\n<p>卸载apk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb uninstall [-k] &lt;packagename&gt;</div></pre></td></tr></table></figure>\n<p>清除应用数据与缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm clear &lt;packagename&gt;</div><div class=\"line\">//&lt;packagename&gt; 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据</div></pre></td></tr></table></figure>\n<p>还有部分功能是需要root的以及更多命令可以查看<a href=\"https://github.com/mzlogin/awesome-adb\" target=\"_blank\" rel=\"external\">github</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjclr21df0009j0fyh9oe8pze","category_id":"cjclr21dj000dj0fyxhhsiu99","_id":"cjclr21dq000oj0fy0lmi4hqm"},{"post_id":"cjclr21dp000mj0fyoab3fpq9","category_id":"cjclr21dr000rj0fywbtan4je","_id":"cjclr21dx0010j0fyho6psee3"}],"PostTag":[{"post_id":"cjclr21d50005j0fykqw0ibjk","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dd0008j0fyjr7v3n11"},{"post_id":"cjclr21cu0000j0fybmsks97a","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dh000aj0fywi2159gr"},{"post_id":"cjclr21cz0002j0fyhea6crli","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dk000ej0fyl5vgny8w"},{"post_id":"cjclr21di000bj0fywk21mhye","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dl000gj0fy7iuoscrq"},{"post_id":"cjclr21dk000fj0fys6s51ghv","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dn000jj0fyk4irvqd6"},{"post_id":"cjclr21d30004j0fywnqovbq2","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dp000lj0fypid52c7x"},{"post_id":"cjclr21dl000hj0fygjftqwe9","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dq000pj0fywkfx0rrs"},{"post_id":"cjclr21d80006j0fygc1y7d5h","tag_id":"cjclr21dn000ij0fylrvtoz1v","_id":"cjclr21dr000sj0fyviiyvd9l"},{"post_id":"cjclr21dp000mj0fyoab3fpq9","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dv000vj0fy474zmqme"},{"post_id":"cjclr21dq000qj0fydj5zrgox","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dw000xj0fy9qp8j5f4"},{"post_id":"cjclr21df0009j0fyh9oe8pze","tag_id":"cjclr21dq000nj0fykmqfm50p","_id":"cjclr21dw000zj0fyt5xow7vz"},{"post_id":"cjclr21ds000tj0fyamvnonci","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dx0011j0fy69n17f3k"},{"post_id":"cjclr21dv000wj0fyh6b1ntub","tag_id":"cjclr21d10003j0fy80rse0ku","_id":"cjclr21dx0012j0fyznevoqh5"},{"post_id":"cjclr21do000kj0fy1muwn6sd","tag_id":"cjclr21du000uj0fyzcgyv1et","_id":"cjclr21dx0013j0fy3c11prbz"},{"post_id":"cjclr21do000kj0fy1muwn6sd","tag_id":"cjclr21dw000yj0fyegff6e5m","_id":"cjclr21dy0014j0fyylj42l5y"}],"Tag":[{"name":"Android","_id":"cjclr21d10003j0fy80rse0ku"},{"name":"Hexo","_id":"cjclr21dn000ij0fylrvtoz1v"},{"name":"Shell","_id":"cjclr21dq000nj0fykmqfm50p"},{"name":"Raspberry PI","_id":"cjclr21du000uj0fyzcgyv1et"},{"name":"树莓派","_id":"cjclr21dw000yj0fyegff6e5m"}]}}